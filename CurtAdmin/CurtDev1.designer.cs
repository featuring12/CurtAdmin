#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurtAdmin
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CurtDev")]
	public partial class CurtDevDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertMake(Make instance);
    partial void UpdateMake(Make instance);
    partial void DeleteMake(Make instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertRelatedType(RelatedType instance);
    partial void UpdateRelatedType(RelatedType instance);
    partial void DeleteRelatedType(RelatedType instance);
    partial void InsertStyle(Style instance);
    partial void UpdateStyle(Style instance);
    partial void DeleteStyle(Style instance);
    partial void InsertYear(Year instance);
    partial void UpdateYear(Year instance);
    partial void DeleteYear(Year instance);
    partial void InsertCustomerPricing(CustomerPricing instance);
    partial void UpdateCustomerPricing(CustomerPricing instance);
    partial void DeleteCustomerPricing(CustomerPricing instance);
    partial void InsertCartIntegration(CartIntegration instance);
    partial void UpdateCartIntegration(CartIntegration instance);
    partial void DeleteCartIntegration(CartIntegration instance);
    partial void InsertWidgetDeployment(WidgetDeployment instance);
    partial void UpdateWidgetDeployment(WidgetDeployment instance);
    partial void DeleteWidgetDeployment(WidgetDeployment instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertMenu_SiteContent(Menu_SiteContent instance);
    partial void UpdateMenu_SiteContent(Menu_SiteContent instance);
    partial void DeleteMenu_SiteContent(Menu_SiteContent instance);
    partial void InsertSiteContentRevision(SiteContentRevision instance);
    partial void UpdateSiteContentRevision(SiteContentRevision instance);
    partial void DeleteSiteContentRevision(SiteContentRevision instance);
    partial void InsertContactReceiver(ContactReceiver instance);
    partial void UpdateContactReceiver(ContactReceiver instance);
    partial void DeleteContactReceiver(ContactReceiver instance);
    partial void InsertFAQ(FAQ instance);
    partial void UpdateFAQ(FAQ instance);
    partial void DeleteFAQ(FAQ instance);
    partial void InsertNewsItem(NewsItem instance);
    partial void UpdateNewsItem(NewsItem instance);
    partial void DeleteNewsItem(NewsItem instance);
    partial void InsertBlogPost_BlogCategory(BlogPost_BlogCategory instance);
    partial void UpdateBlogPost_BlogCategory(BlogPost_BlogCategory instance);
    partial void DeleteBlogPost_BlogCategory(BlogPost_BlogCategory instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertBlogPost(BlogPost instance);
    partial void UpdateBlogPost(BlogPost instance);
    partial void DeleteBlogPost(BlogPost instance);
    partial void InsertBlogCategory(BlogCategory instance);
    partial void UpdateBlogCategory(BlogCategory instance);
    partial void DeleteBlogCategory(BlogCategory instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertPartStates(PartStates instance);
    partial void UpdatePartStates(PartStates instance);
    partial void DeletePartStates(PartStates instance);
    partial void InsertCustomerLocation(CustomerLocation instance);
    partial void UpdateCustomerLocation(CustomerLocation instance);
    partial void DeleteCustomerLocation(CustomerLocation instance);
    partial void InsertSiteContent(SiteContent instance);
    partial void UpdateSiteContent(SiteContent instance);
    partial void DeleteSiteContent(SiteContent instance);
    partial void InsertBusinessClass(BusinessClass instance);
    partial void UpdateBusinessClass(BusinessClass instance);
    partial void DeleteBusinessClass(BusinessClass instance);
    partial void InsertContactType(ContactType instance);
    partial void UpdateContactType(ContactType instance);
    partial void DeleteContactType(ContactType instance);
    partial void InsertContactReceiver_ContactType(ContactReceiver_ContactType instance);
    partial void UpdateContactReceiver_ContactType(ContactReceiver_ContactType instance);
    partial void DeleteContactReceiver_ContactType(ContactReceiver_ContactType instance);
    partial void InsertTestimonial(Testimonial instance);
    partial void UpdateTestimonial(Testimonial instance);
    partial void DeleteTestimonial(Testimonial instance);
    partial void InsertDealerType(DealerType instance);
    partial void UpdateDealerType(DealerType instance);
    partial void DeleteDealerType(DealerType instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertFileGallery(FileGallery instance);
    partial void UpdateFileGallery(FileGallery instance);
    partial void DeleteFileGallery(FileGallery instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertFileExt(FileExt instance);
    partial void UpdateFileExt(FileExt instance);
    partial void DeleteFileExt(FileExt instance);
    partial void InsertFileType(FileType instance);
    partial void UpdateFileType(FileType instance);
    partial void DeleteFileType(FileType instance);
    partial void InsertPartImageSize(PartImageSize instance);
    partial void UpdatePartImageSize(PartImageSize instance);
    partial void DeletePartImageSize(PartImageSize instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    partial void InsertPartIndex(PartIndex instance);
    partial void UpdatePartIndex(PartIndex instance);
    partial void DeletePartIndex(PartIndex instance);
    partial void InsertPart(Part instance);
    partial void UpdatePart(Part instance);
    partial void DeletePart(Part instance);
    partial void InsertIPBlock(IPBlock instance);
    partial void UpdateIPBlock(IPBlock instance);
    partial void DeleteIPBlock(IPBlock instance);
    partial void InsertForumGroup(ForumGroup instance);
    partial void UpdateForumGroup(ForumGroup instance);
    partial void DeleteForumGroup(ForumGroup instance);
    partial void InsertForumTopic(ForumTopic instance);
    partial void UpdateForumTopic(ForumTopic instance);
    partial void DeleteForumTopic(ForumTopic instance);
    partial void InsertForumPost(ForumPost instance);
    partial void UpdateForumPost(ForumPost instance);
    partial void DeleteForumPost(ForumPost instance);
    partial void InsertForumThread(ForumThread instance);
    partial void UpdateForumThread(ForumThread instance);
    partial void DeleteForumThread(ForumThread instance);
    partial void InsertMapixCode(MapixCode instance);
    partial void UpdateMapixCode(MapixCode instance);
    partial void DeleteMapixCode(MapixCode instance);
    partial void InsertSalesRepresentative(SalesRepresentative instance);
    partial void UpdateSalesRepresentative(SalesRepresentative instance);
    partial void DeleteSalesRepresentative(SalesRepresentative instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCatParts(CatParts instance);
    partial void UpdateCatParts(CatParts instance);
    partial void DeleteCatParts(CatParts instance);
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    partial void InsertYearMake(YearMake instance);
    partial void UpdateYearMake(YearMake instance);
    partial void DeleteYearMake(YearMake instance);
    partial void InsertMakeModel(MakeModel instance);
    partial void UpdateMakeModel(MakeModel instance);
    partial void DeleteMakeModel(MakeModel instance);
    partial void InsertModelStyle(ModelStyle instance);
    partial void UpdateModelStyle(ModelStyle instance);
    partial void DeleteModelStyle(ModelStyle instance);
    partial void InsertPartAttribute(PartAttribute instance);
    partial void UpdatePartAttribute(PartAttribute instance);
    partial void DeletePartAttribute(PartAttribute instance);
    partial void InsertVehiclePartAttribute(VehiclePartAttribute instance);
    partial void UpdateVehiclePartAttribute(VehiclePartAttribute instance);
    partial void DeleteVehiclePartAttribute(VehiclePartAttribute instance);
    partial void InsertTrailer(Trailer instance);
    partial void UpdateTrailer(Trailer instance);
    partial void DeleteTrailer(Trailer instance);
    partial void InsertLifestyle_Trailer(Lifestyle_Trailer instance);
    partial void UpdateLifestyle_Trailer(Lifestyle_Trailer instance);
    partial void DeleteLifestyle_Trailer(Lifestyle_Trailer instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    partial void InsertPartImage(PartImage instance);
    partial void UpdatePartImage(PartImage instance);
    partial void DeletePartImage(PartImage instance);
    partial void InsertVehicles(Vehicles instance);
    partial void UpdateVehicles(Vehicles instance);
    partial void DeleteVehicles(Vehicles instance);
    partial void InsertVehiclePart(VehiclePart instance);
    partial void UpdateVehiclePart(VehiclePart instance);
    partial void DeleteVehiclePart(VehiclePart instance);
    partial void InsertRelatedPart(RelatedPart instance);
    partial void UpdateRelatedPart(RelatedPart instance);
    partial void DeleteRelatedPart(RelatedPart instance);
    partial void InsertvideoType(videoType instance);
    partial void UpdatevideoType(videoType instance);
    partial void DeletevideoType(videoType instance);
    partial void InsertPartVideo(PartVideo instance);
    partial void UpdatePartVideo(PartVideo instance);
    partial void DeletePartVideo(PartVideo instance);
    partial void InsertContentBridge(ContentBridge instance);
    partial void UpdateContentBridge(ContentBridge instance);
    partial void DeleteContentBridge(ContentBridge instance);
    partial void InsertDealerTier(DealerTier instance);
    partial void UpdateDealerTier(DealerTier instance);
    partial void DeleteDealerTier(DealerTier instance);
    partial void InsertMapIcon(MapIcon instance);
    partial void UpdateMapIcon(MapIcon instance);
    partial void DeleteMapIcon(MapIcon instance);
    partial void InsertImportProcess(ImportProcess instance);
    partial void UpdateImportProcess(ImportProcess instance);
    partial void DeleteImportProcess(ImportProcess instance);
    partial void InsertCustomerUser(CustomerUser instance);
    partial void UpdateCustomerUser(CustomerUser instance);
    partial void DeleteCustomerUser(CustomerUser instance);
    partial void InsertMapPolygon(MapPolygon instance);
    partial void UpdateMapPolygon(MapPolygon instance);
    partial void DeleteMapPolygon(MapPolygon instance);
    partial void InsertMapPolygonCoordinate(MapPolygonCoordinate instance);
    partial void UpdateMapPolygonCoordinate(MapPolygonCoordinate instance);
    partial void DeleteMapPolygonCoordinate(MapPolygonCoordinate instance);
    partial void InsertUnitOfMeasure(UnitOfMeasure instance);
    partial void UpdateUnitOfMeasure(UnitOfMeasure instance);
    partial void DeleteUnitOfMeasure(UnitOfMeasure instance);
    partial void InsertPartPackage(PartPackage instance);
    partial void UpdatePartPackage(PartPackage instance);
    partial void DeletePartPackage(PartPackage instance);
    partial void Insertvcdb_Make(vcdb_Make instance);
    partial void Updatevcdb_Make(vcdb_Make instance);
    partial void Deletevcdb_Make(vcdb_Make instance);
    partial void Insertvcdb_Model(vcdb_Model instance);
    partial void Updatevcdb_Model(vcdb_Model instance);
    partial void Deletevcdb_Model(vcdb_Model instance);
    partial void Insertvcdb_Vehicle(vcdb_Vehicle instance);
    partial void Updatevcdb_Vehicle(vcdb_Vehicle instance);
    partial void Deletevcdb_Vehicle(vcdb_Vehicle instance);
    partial void Insertvcdb_VehiclePart(vcdb_VehiclePart instance);
    partial void Updatevcdb_VehiclePart(vcdb_VehiclePart instance);
    partial void Deletevcdb_VehiclePart(vcdb_VehiclePart instance);
    partial void Insertvcdb_Year(vcdb_Year instance);
    partial void Updatevcdb_Year(vcdb_Year instance);
    partial void Deletevcdb_Year(vcdb_Year instance);
    partial void InsertSubmodel(Submodel instance);
    partial void UpdateSubmodel(Submodel instance);
    partial void DeleteSubmodel(Submodel instance);
    partial void InsertVehicleType(VehicleType instance);
    partial void UpdateVehicleType(VehicleType instance);
    partial void DeleteVehicleType(VehicleType instance);
    partial void InsertVehicleTypeGroup(VehicleTypeGroup instance);
    partial void UpdateVehicleTypeGroup(VehicleTypeGroup instance);
    partial void DeleteVehicleTypeGroup(VehicleTypeGroup instance);
    partial void InsertBaseVehicle(BaseVehicle instance);
    partial void UpdateBaseVehicle(BaseVehicle instance);
    partial void DeleteBaseVehicle(BaseVehicle instance);
    partial void InsertAcesType(AcesType instance);
    partial void UpdateAcesType(AcesType instance);
    partial void DeleteAcesType(AcesType instance);
    partial void InsertConfigAttributeType(ConfigAttributeType instance);
    partial void UpdateConfigAttributeType(ConfigAttributeType instance);
    partial void DeleteConfigAttributeType(ConfigAttributeType instance);
    partial void InsertConfigAttribute(ConfigAttribute instance);
    partial void UpdateConfigAttribute(ConfigAttribute instance);
    partial void DeleteConfigAttribute(ConfigAttribute instance);
    partial void InsertVehicleConfig(VehicleConfig instance);
    partial void UpdateVehicleConfig(VehicleConfig instance);
    partial void DeleteVehicleConfig(VehicleConfig instance);
    partial void InsertVehicleConfigAttribute(VehicleConfigAttribute instance);
    partial void UpdateVehicleConfigAttribute(VehicleConfigAttribute instance);
    partial void DeleteVehicleConfigAttribute(VehicleConfigAttribute instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertReportType(ReportType instance);
    partial void UpdateReportType(ReportType instance);
    partial void DeleteReportType(ReportType instance);
    partial void InsertCustomerReport(CustomerReport instance);
    partial void UpdateCustomerReport(CustomerReport instance);
    partial void DeleteCustomerReport(CustomerReport instance);
    partial void InsertCustomerReportPart(CustomerReportPart instance);
    partial void UpdateCustomerReportPart(CustomerReportPart instance);
    partial void DeleteCustomerReportPart(CustomerReportPart instance);
    partial void InsertWebsite(Website instance);
    partial void UpdateWebsite(Website instance);
    partial void DeleteWebsite(Website instance);
    partial void InsertCustUserWebProperty(CustUserWebProperty instance);
    partial void UpdateCustUserWebProperty(CustUserWebProperty instance);
    partial void DeleteCustUserWebProperty(CustUserWebProperty instance);
    partial void InsertWebProperty(WebProperty instance);
    partial void UpdateWebProperty(WebProperty instance);
    partial void DeleteWebProperty(WebProperty instance);
    partial void InsertWebPropertyType(WebPropertyType instance);
    partial void UpdateWebPropertyType(WebPropertyType instance);
    partial void DeleteWebPropertyType(WebPropertyType instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertLandingPage(LandingPage instance);
    partial void UpdateLandingPage(LandingPage instance);
    partial void DeleteLandingPage(LandingPage instance);
    partial void InsertLandingPageData(LandingPageData instance);
    partial void UpdateLandingPageData(LandingPageData instance);
    partial void DeleteLandingPageData(LandingPageData instance);
    partial void InsertLandingPageImage(LandingPageImage instance);
    partial void UpdateLandingPageImage(LandingPageImage instance);
    partial void DeleteLandingPageImage(LandingPageImage instance);
    partial void InsertCabela(Cabela instance);
    partial void UpdateCabela(Cabela instance);
    partial void DeleteCabela(Cabela instance);
    partial void InsertKioskOrderItem(KioskOrderItem instance);
    partial void UpdateKioskOrderItem(KioskOrderItem instance);
    partial void DeleteKioskOrderItem(KioskOrderItem instance);
    partial void InsertIncludedPart(IncludedPart instance);
    partial void UpdateIncludedPart(IncludedPart instance);
    partial void DeleteIncludedPart(IncludedPart instance);
    partial void InsertPartGroup(PartGroup instance);
    partial void UpdatePartGroup(PartGroup instance);
    partial void DeletePartGroup(PartGroup instance);
    partial void InsertPartGroupPart(PartGroupPart instance);
    partial void UpdatePartGroupPart(PartGroupPart instance);
    partial void DeletePartGroupPart(PartGroupPart instance);
    partial void InsertApiKey(ApiKey instance);
    partial void UpdateApiKey(ApiKey instance);
    partial void DeleteApiKey(ApiKey instance);
    partial void InsertApiKeyType(ApiKeyType instance);
    partial void UpdateApiKeyType(ApiKeyType instance);
    partial void DeleteApiKeyType(ApiKeyType instance);
    partial void InsertApiAccess(ApiAccess instance);
    partial void UpdateApiAccess(ApiAccess instance);
    partial void DeleteApiAccess(ApiAccess instance);
    partial void InsertApiModule(ApiModule instance);
    partial void UpdateApiModule(ApiModule instance);
    partial void DeleteApiModule(ApiModule instance);
    partial void InsertAuthAccess(AuthAccess instance);
    partial void UpdateAuthAccess(AuthAccess instance);
    partial void DeleteAuthAccess(AuthAccess instance);
    partial void InsertAuthArea(AuthArea instance);
    partial void UpdateAuthArea(AuthArea instance);
    partial void DeleteAuthArea(AuthArea instance);
    partial void InsertAuthDomain(AuthDomain instance);
    partial void UpdateAuthDomain(AuthDomain instance);
    partial void DeleteAuthDomain(AuthDomain instance);
    partial void InsertWebPropNote(WebPropNote instance);
    partial void UpdateWebPropNote(WebPropNote instance);
    partial void DeleteWebPropNote(WebPropNote instance);
    partial void InsertScheduledTask(ScheduledTask instance);
    partial void UpdateScheduledTask(ScheduledTask instance);
    partial void DeleteScheduledTask(ScheduledTask instance);
    partial void InsertPackageType(PackageType instance);
    partial void UpdatePackageType(PackageType instance);
    partial void DeletePackageType(PackageType instance);
    partial void InsertWebPropRequirementCheck(WebPropRequirementCheck instance);
    partial void UpdateWebPropRequirementCheck(WebPropRequirementCheck instance);
    partial void DeleteWebPropRequirementCheck(WebPropRequirementCheck instance);
    partial void InsertWebPropRequirement(WebPropRequirement instance);
    partial void UpdateWebPropRequirement(WebPropRequirement instance);
    partial void DeleteWebPropRequirement(WebPropRequirement instance);
    #endregion
		
		public CurtDevDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CurtDevConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurtDevDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<Make> Makes
		{
			get
			{
				return this.GetTable<Make>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<RelatedType> RelatedTypes
		{
			get
			{
				return this.GetTable<RelatedType>();
			}
		}
		
		public System.Data.Linq.Table<Style> Styles
		{
			get
			{
				return this.GetTable<Style>();
			}
		}
		
		public System.Data.Linq.Table<Year> Years
		{
			get
			{
				return this.GetTable<Year>();
			}
		}
		
		public System.Data.Linq.Table<CustomerPricing> CustomerPricings
		{
			get
			{
				return this.GetTable<CustomerPricing>();
			}
		}
		
		public System.Data.Linq.Table<ColorCode> ColorCodes
		{
			get
			{
				return this.GetTable<ColorCode>();
			}
		}
		
		public System.Data.Linq.Table<CartIntegration> CartIntegrations
		{
			get
			{
				return this.GetTable<CartIntegration>();
			}
		}
		
		public System.Data.Linq.Table<WidgetDeployment> WidgetDeployments
		{
			get
			{
				return this.GetTable<WidgetDeployment>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<Menu_SiteContent> Menu_SiteContents
		{
			get
			{
				return this.GetTable<Menu_SiteContent>();
			}
		}
		
		public System.Data.Linq.Table<SiteContentRevision> SiteContentRevisions
		{
			get
			{
				return this.GetTable<SiteContentRevision>();
			}
		}
		
		public System.Data.Linq.Table<ContactReceiver> ContactReceivers
		{
			get
			{
				return this.GetTable<ContactReceiver>();
			}
		}
		
		public System.Data.Linq.Table<FAQ> FAQs
		{
			get
			{
				return this.GetTable<FAQ>();
			}
		}
		
		public System.Data.Linq.Table<NewsItem> NewsItems
		{
			get
			{
				return this.GetTable<NewsItem>();
			}
		}
		
		public System.Data.Linq.Table<BlogPost_BlogCategory> BlogPost_BlogCategories
		{
			get
			{
				return this.GetTable<BlogPost_BlogCategory>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<BlogPost> BlogPosts
		{
			get
			{
				return this.GetTable<BlogPost>();
			}
		}
		
		public System.Data.Linq.Table<BlogCategory> BlogCategories
		{
			get
			{
				return this.GetTable<BlogCategory>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<PartStates> PartStates
		{
			get
			{
				return this.GetTable<PartStates>();
			}
		}
		
		public System.Data.Linq.Table<CustomerLocation> CustomerLocations
		{
			get
			{
				return this.GetTable<CustomerLocation>();
			}
		}
		
		public System.Data.Linq.Table<SiteContent> SiteContents
		{
			get
			{
				return this.GetTable<SiteContent>();
			}
		}
		
		public System.Data.Linq.Table<BusinessClass> BusinessClasses
		{
			get
			{
				return this.GetTable<BusinessClass>();
			}
		}
		
		public System.Data.Linq.Table<ContactType> ContactTypes
		{
			get
			{
				return this.GetTable<ContactType>();
			}
		}
		
		public System.Data.Linq.Table<ContactReceiver_ContactType> ContactReceiver_ContactTypes
		{
			get
			{
				return this.GetTable<ContactReceiver_ContactType>();
			}
		}
		
		public System.Data.Linq.Table<Testimonial> Testimonials
		{
			get
			{
				return this.GetTable<Testimonial>();
			}
		}
		
		public System.Data.Linq.Table<DealerType> DealerTypes
		{
			get
			{
				return this.GetTable<DealerType>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<FileGallery> FileGalleries
		{
			get
			{
				return this.GetTable<FileGallery>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<FileExt> FileExts
		{
			get
			{
				return this.GetTable<FileExt>();
			}
		}
		
		public System.Data.Linq.Table<FileType> FileTypes
		{
			get
			{
				return this.GetTable<FileType>();
			}
		}
		
		public System.Data.Linq.Table<PartImageSize> PartImageSizes
		{
			get
			{
				return this.GetTable<PartImageSize>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		public System.Data.Linq.Table<PartIndex> PartIndexes
		{
			get
			{
				return this.GetTable<PartIndex>();
			}
		}
		
		public System.Data.Linq.Table<Part> Parts
		{
			get
			{
				return this.GetTable<Part>();
			}
		}
		
		public System.Data.Linq.Table<IPBlock> IPBlocks
		{
			get
			{
				return this.GetTable<IPBlock>();
			}
		}
		
		public System.Data.Linq.Table<ForumGroup> ForumGroups
		{
			get
			{
				return this.GetTable<ForumGroup>();
			}
		}
		
		public System.Data.Linq.Table<ForumTopic> ForumTopics
		{
			get
			{
				return this.GetTable<ForumTopic>();
			}
		}
		
		public System.Data.Linq.Table<ForumPost> ForumPosts
		{
			get
			{
				return this.GetTable<ForumPost>();
			}
		}
		
		public System.Data.Linq.Table<ForumThread> ForumThreads
		{
			get
			{
				return this.GetTable<ForumThread>();
			}
		}
		
		public System.Data.Linq.Table<MapixCode> MapixCodes
		{
			get
			{
				return this.GetTable<MapixCode>();
			}
		}
		
		public System.Data.Linq.Table<SalesRepresentative> SalesRepresentatives
		{
			get
			{
				return this.GetTable<SalesRepresentative>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<CatParts> CatParts
		{
			get
			{
				return this.GetTable<CatParts>();
			}
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
		
		public System.Data.Linq.Table<YearMake> YearMakes
		{
			get
			{
				return this.GetTable<YearMake>();
			}
		}
		
		public System.Data.Linq.Table<MakeModel> MakeModels
		{
			get
			{
				return this.GetTable<MakeModel>();
			}
		}
		
		public System.Data.Linq.Table<ModelStyle> ModelStyles
		{
			get
			{
				return this.GetTable<ModelStyle>();
			}
		}
		
		public System.Data.Linq.Table<PartAttribute> PartAttributes
		{
			get
			{
				return this.GetTable<PartAttribute>();
			}
		}
		
		public System.Data.Linq.Table<VehiclePartAttribute> VehiclePartAttributes
		{
			get
			{
				return this.GetTable<VehiclePartAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Trailer> Trailers
		{
			get
			{
				return this.GetTable<Trailer>();
			}
		}
		
		public System.Data.Linq.Table<Lifestyle_Trailer> Lifestyle_Trailers
		{
			get
			{
				return this.GetTable<Lifestyle_Trailer>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
		
		public System.Data.Linq.Table<PartImage> PartImages
		{
			get
			{
				return this.GetTable<PartImage>();
			}
		}
		
		public System.Data.Linq.Table<Vehicles> Vehicles
		{
			get
			{
				return this.GetTable<Vehicles>();
			}
		}
		
		public System.Data.Linq.Table<VehiclePart> VehicleParts
		{
			get
			{
				return this.GetTable<VehiclePart>();
			}
		}
		
		public System.Data.Linq.Table<RelatedPart> RelatedParts
		{
			get
			{
				return this.GetTable<RelatedPart>();
			}
		}
		
		public System.Data.Linq.Table<videoType> videoTypes
		{
			get
			{
				return this.GetTable<videoType>();
			}
		}
		
		public System.Data.Linq.Table<PartVideo> PartVideos
		{
			get
			{
				return this.GetTable<PartVideo>();
			}
		}
		
		public System.Data.Linq.Table<ContentBridge> ContentBridges
		{
			get
			{
				return this.GetTable<ContentBridge>();
			}
		}
		
		public System.Data.Linq.Table<DealerTier> DealerTiers
		{
			get
			{
				return this.GetTable<DealerTier>();
			}
		}
		
		public System.Data.Linq.Table<MapIcon> MapIcons
		{
			get
			{
				return this.GetTable<MapIcon>();
			}
		}
		
		public System.Data.Linq.Table<ImportProcess> ImportProcesses
		{
			get
			{
				return this.GetTable<ImportProcess>();
			}
		}
		
		public System.Data.Linq.Table<CustomerUser> CustomerUsers
		{
			get
			{
				return this.GetTable<CustomerUser>();
			}
		}
		
		public System.Data.Linq.Table<MapPolygon> MapPolygons
		{
			get
			{
				return this.GetTable<MapPolygon>();
			}
		}
		
		public System.Data.Linq.Table<MapPolygonCoordinate> MapPolygonCoordinates
		{
			get
			{
				return this.GetTable<MapPolygonCoordinate>();
			}
		}
		
		public System.Data.Linq.Table<UnitOfMeasure> UnitOfMeasures
		{
			get
			{
				return this.GetTable<UnitOfMeasure>();
			}
		}
		
		public System.Data.Linq.Table<PartPackage> PartPackages
		{
			get
			{
				return this.GetTable<PartPackage>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Make> vcdb_Makes
		{
			get
			{
				return this.GetTable<vcdb_Make>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Model> vcdb_Models
		{
			get
			{
				return this.GetTable<vcdb_Model>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this.GetTable<vcdb_Vehicle>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_VehiclePart> vcdb_VehicleParts
		{
			get
			{
				return this.GetTable<vcdb_VehiclePart>();
			}
		}
		
		public System.Data.Linq.Table<vcdb_Year> vcdb_Years
		{
			get
			{
				return this.GetTable<vcdb_Year>();
			}
		}
		
		public System.Data.Linq.Table<Submodel> Submodels
		{
			get
			{
				return this.GetTable<Submodel>();
			}
		}
		
		public System.Data.Linq.Table<VehicleType> VehicleTypes
		{
			get
			{
				return this.GetTable<VehicleType>();
			}
		}
		
		public System.Data.Linq.Table<VehicleTypeGroup> VehicleTypeGroups
		{
			get
			{
				return this.GetTable<VehicleTypeGroup>();
			}
		}
		
		public System.Data.Linq.Table<BaseVehicle> BaseVehicles
		{
			get
			{
				return this.GetTable<BaseVehicle>();
			}
		}
		
		public System.Data.Linq.Table<AcesType> AcesTypes
		{
			get
			{
				return this.GetTable<AcesType>();
			}
		}
		
		public System.Data.Linq.Table<ConfigAttributeType> ConfigAttributeTypes
		{
			get
			{
				return this.GetTable<ConfigAttributeType>();
			}
		}
		
		public System.Data.Linq.Table<ConfigAttribute> ConfigAttributes
		{
			get
			{
				return this.GetTable<ConfigAttribute>();
			}
		}
		
		public System.Data.Linq.Table<VehicleConfig> VehicleConfigs
		{
			get
			{
				return this.GetTable<VehicleConfig>();
			}
		}
		
		public System.Data.Linq.Table<VehicleConfigAttribute> VehicleConfigAttributes
		{
			get
			{
				return this.GetTable<VehicleConfigAttribute>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<ReportType> ReportTypes
		{
			get
			{
				return this.GetTable<ReportType>();
			}
		}
		
		public System.Data.Linq.Table<CustomerReport> CustomerReports
		{
			get
			{
				return this.GetTable<CustomerReport>();
			}
		}
		
		public System.Data.Linq.Table<CustomerReportPart> CustomerReportParts
		{
			get
			{
				return this.GetTable<CustomerReportPart>();
			}
		}
		
		public System.Data.Linq.Table<Website> Websites
		{
			get
			{
				return this.GetTable<Website>();
			}
		}
		
		public System.Data.Linq.Table<CustUserWebProperty> CustUserWebProperties
		{
			get
			{
				return this.GetTable<CustUserWebProperty>();
			}
		}
		
		public System.Data.Linq.Table<WebProperty> WebProperties
		{
			get
			{
				return this.GetTable<WebProperty>();
			}
		}
		
		public System.Data.Linq.Table<WebPropertyType> WebPropertyTypes
		{
			get
			{
				return this.GetTable<WebPropertyType>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<LandingPage> LandingPages
		{
			get
			{
				return this.GetTable<LandingPage>();
			}
		}
		
		public System.Data.Linq.Table<LandingPageData> LandingPageDatas
		{
			get
			{
				return this.GetTable<LandingPageData>();
			}
		}
		
		public System.Data.Linq.Table<LandingPageImage> LandingPageImages
		{
			get
			{
				return this.GetTable<LandingPageImage>();
			}
		}
		
		public System.Data.Linq.Table<Cabela> Cabelas
		{
			get
			{
				return this.GetTable<Cabela>();
			}
		}
		
		public System.Data.Linq.Table<KioskOrderItem> KioskOrderItems
		{
			get
			{
				return this.GetTable<KioskOrderItem>();
			}
		}
		
		public System.Data.Linq.Table<PartChange2012> PartChange2012s
		{
			get
			{
				return this.GetTable<PartChange2012>();
			}
		}
		
		public System.Data.Linq.Table<IncludedPart> IncludedParts
		{
			get
			{
				return this.GetTable<IncludedPart>();
			}
		}
		
		public System.Data.Linq.Table<PartGroup> PartGroups
		{
			get
			{
				return this.GetTable<PartGroup>();
			}
		}
		
		public System.Data.Linq.Table<PartGroupPart> PartGroupParts
		{
			get
			{
				return this.GetTable<PartGroupPart>();
			}
		}
		
		public System.Data.Linq.Table<ApiKey> ApiKeys
		{
			get
			{
				return this.GetTable<ApiKey>();
			}
		}
		
		public System.Data.Linq.Table<ApiKeyType> ApiKeyTypes
		{
			get
			{
				return this.GetTable<ApiKeyType>();
			}
		}
		
		public System.Data.Linq.Table<ApiAccess> ApiAccesses
		{
			get
			{
				return this.GetTable<ApiAccess>();
			}
		}
		
		public System.Data.Linq.Table<ApiModule> ApiModules
		{
			get
			{
				return this.GetTable<ApiModule>();
			}
		}
		
		public System.Data.Linq.Table<AuthAccess> AuthAccesses
		{
			get
			{
				return this.GetTable<AuthAccess>();
			}
		}
		
		public System.Data.Linq.Table<AuthArea> AuthAreas
		{
			get
			{
				return this.GetTable<AuthArea>();
			}
		}
		
		public System.Data.Linq.Table<AuthDomain> AuthDomains
		{
			get
			{
				return this.GetTable<AuthDomain>();
			}
		}
		
		public System.Data.Linq.Table<WebPropNote> WebPropNotes
		{
			get
			{
				return this.GetTable<WebPropNote>();
			}
		}
		
		public System.Data.Linq.Table<ScheduledTask> ScheduledTasks
		{
			get
			{
				return this.GetTable<ScheduledTask>();
			}
		}
		
		public System.Data.Linq.Table<PackageType> PackageTypes
		{
			get
			{
				return this.GetTable<PackageType>();
			}
		}
		
		public System.Data.Linq.Table<WebPropRequirementCheck> WebPropRequirementChecks
		{
			get
			{
				return this.GetTable<WebPropRequirementCheck>();
			}
		}
		
		public System.Data.Linq.Table<WebPropRequirement> WebPropRequirements
		{
			get
			{
				return this.GetTable<WebPropRequirement>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.indexPart")]
		public int indexPart([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> partid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), partid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.indexAllParts")]
		public int indexAllParts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.searchIndex")]
		public ISingleResult<Part> searchIndex([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string searchparams)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), searchparams);
			return ((ISingleResult<Part>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getPartsWithMissingImageSizes")]
		public ISingleResult<getPartsWithMissingImageSizesResult> getPartsWithMissingImageSizes()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<getPartsWithMissingImageSizesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getPartsWithNoImages")]
		public ISingleResult<getPartsWithNoImagesResult> getPartsWithNoImages()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<getPartsWithNoImagesResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _classID;
		
		private string _class1;
		
		private string _image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclassIDChanging(int value);
    partial void OnclassIDChanged();
    partial void Onclass1Changing(string value);
    partial void Onclass1Changed();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    #endregion
		
		public Class()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="class", Storage="_class1", DbType="VarChar(255)")]
		public string class1
		{
			get
			{
				return this._class1;
			}
			set
			{
				if ((this._class1 != value))
				{
					this.Onclass1Changing(value);
					this.SendPropertyChanging();
					this._class1 = value;
					this.SendPropertyChanged("class1");
					this.Onclass1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(255)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contentID;
		
		private string _text;
		
		private int _cTypeID;
		
		private EntitySet<ContentBridge> _ContentBridges;
		
		private EntityRef<ContentType> _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontentIDChanging(int value);
    partial void OncontentIDChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OncTypeIDChanging(int value);
    partial void OncTypeIDChanged();
    #endregion
		
		public Content()
		{
			this._ContentBridges = new EntitySet<ContentBridge>(new Action<ContentBridge>(this.attach_ContentBridges), new Action<ContentBridge>(this.detach_ContentBridges));
			this._ContentType = default(EntityRef<ContentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(255)")]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cTypeID", DbType="Int NOT NULL")]
		public int cTypeID
		{
			get
			{
				return this._cTypeID;
			}
			set
			{
				if ((this._cTypeID != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncTypeIDChanging(value);
					this.SendPropertyChanging();
					this._cTypeID = value;
					this.SendPropertyChanged("cTypeID");
					this.OncTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentBridge", Storage="_ContentBridges", ThisKey="contentID", OtherKey="contentID")]
		internal EntitySet<ContentBridge> ContentBridges
		{
			get
			{
				return this._ContentBridges;
			}
			set
			{
				this._ContentBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Content", Storage="_ContentType", ThisKey="cTypeID", OtherKey="cTypeID", IsForeignKey=true)]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.Contents.Remove(this);
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.Contents.Add(this);
						this._cTypeID = value.cTypeID;
					}
					else
					{
						this._cTypeID = default(int);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Content = this;
		}
		
		private void detach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Content = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Make")]
	public partial class Make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _makeID;
		
		private string _make1;
		
		private EntitySet<YearMake> _YearMakes;
		
		private EntitySet<MakeModel> _MakeModels;
		
		private EntitySet<Vehicles> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmakeIDChanging(int value);
    partial void OnmakeIDChanged();
    partial void Onmake1Changing(string value);
    partial void Onmake1Changed();
    #endregion
		
		public Make()
		{
			this._YearMakes = new EntitySet<YearMake>(new Action<YearMake>(this.attach_YearMakes), new Action<YearMake>(this.detach_YearMakes));
			this._MakeModels = new EntitySet<MakeModel>(new Action<MakeModel>(this.attach_MakeModels), new Action<MakeModel>(this.detach_MakeModels));
			this._Vehicles = new EntitySet<Vehicles>(new Action<Vehicles>(this.attach_Vehicles), new Action<Vehicles>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int makeID
		{
			get
			{
				return this._makeID;
			}
			set
			{
				if ((this._makeID != value))
				{
					this.OnmakeIDChanging(value);
					this.SendPropertyChanging();
					this._makeID = value;
					this.SendPropertyChanged("makeID");
					this.OnmakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="make", Storage="_make1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string make1
		{
			get
			{
				return this._make1;
			}
			set
			{
				if ((this._make1 != value))
				{
					this.Onmake1Changing(value);
					this.SendPropertyChanging();
					this._make1 = value;
					this.SendPropertyChanged("make1");
					this.Onmake1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_YearMake", Storage="_YearMakes", ThisKey="makeID", OtherKey="makeID")]
		internal EntitySet<YearMake> YearMakes
		{
			get
			{
				return this._YearMakes;
			}
			set
			{
				this._YearMakes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_MakeModel", Storage="_MakeModels", ThisKey="makeID", OtherKey="makeID")]
		internal EntitySet<MakeModel> MakeModels
		{
			get
			{
				return this._MakeModels;
			}
			set
			{
				this._MakeModels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_Vehicles", Storage="_Vehicles", ThisKey="makeID", OtherKey="makeID")]
		internal EntitySet<Vehicles> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_YearMakes(YearMake entity)
		{
			this.SendPropertyChanging();
			entity.Make = this;
		}
		
		private void detach_YearMakes(YearMake entity)
		{
			this.SendPropertyChanging();
			entity.Make = null;
		}
		
		private void attach_MakeModels(MakeModel entity)
		{
			this.SendPropertyChanging();
			entity.Make = this;
		}
		
		private void detach_MakeModels(MakeModel entity)
		{
			this.SendPropertyChanging();
			entity.Make = null;
		}
		
		private void attach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Make = this;
		}
		
		private void detach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Model")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _modelID;
		
		private string _model1;
		
		private EntitySet<MakeModel> _MakeModels;
		
		private EntitySet<ModelStyle> _ModelStyles;
		
		private EntitySet<Vehicles> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmodelIDChanging(int value);
    partial void OnmodelIDChanged();
    partial void Onmodel1Changing(string value);
    partial void Onmodel1Changed();
    #endregion
		
		public Model()
		{
			this._MakeModels = new EntitySet<MakeModel>(new Action<MakeModel>(this.attach_MakeModels), new Action<MakeModel>(this.detach_MakeModels));
			this._ModelStyles = new EntitySet<ModelStyle>(new Action<ModelStyle>(this.attach_ModelStyles), new Action<ModelStyle>(this.detach_ModelStyles));
			this._Vehicles = new EntitySet<Vehicles>(new Action<Vehicles>(this.attach_Vehicles), new Action<Vehicles>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int modelID
		{
			get
			{
				return this._modelID;
			}
			set
			{
				if ((this._modelID != value))
				{
					this.OnmodelIDChanging(value);
					this.SendPropertyChanging();
					this._modelID = value;
					this.SendPropertyChanged("modelID");
					this.OnmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="model", Storage="_model1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string model1
		{
			get
			{
				return this._model1;
			}
			set
			{
				if ((this._model1 != value))
				{
					this.Onmodel1Changing(value);
					this.SendPropertyChanging();
					this._model1 = value;
					this.SendPropertyChanged("model1");
					this.Onmodel1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_MakeModel", Storage="_MakeModels", ThisKey="modelID", OtherKey="modelID")]
		internal EntitySet<MakeModel> MakeModels
		{
			get
			{
				return this._MakeModels;
			}
			set
			{
				this._MakeModels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModelStyle", Storage="_ModelStyles", ThisKey="modelID", OtherKey="modelID")]
		internal EntitySet<ModelStyle> ModelStyles
		{
			get
			{
				return this._ModelStyles;
			}
			set
			{
				this._ModelStyles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Vehicles", Storage="_Vehicles", ThisKey="modelID", OtherKey="modelID")]
		internal EntitySet<Vehicles> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MakeModels(MakeModel entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_MakeModels(MakeModel entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModelStyles(ModelStyle entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModelStyles(ModelStyle entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelatedType")]
	public partial class RelatedType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rTypeID;
		
		private string _type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrTypeIDChanging(int value);
    partial void OnrTypeIDChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public RelatedType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rTypeID
		{
			get
			{
				return this._rTypeID;
			}
			set
			{
				if ((this._rTypeID != value))
				{
					this.OnrTypeIDChanging(value);
					this.SendPropertyChanging();
					this._rTypeID = value;
					this.SendPropertyChanged("rTypeID");
					this.OnrTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Style")]
	public partial class Style : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _styleID;
		
		private string _style1;
		
		private int _aaiaID;
		
		private EntitySet<ModelStyle> _ModelStyles;
		
		private EntitySet<Vehicles> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstyleIDChanging(int value);
    partial void OnstyleIDChanged();
    partial void Onstyle1Changing(string value);
    partial void Onstyle1Changed();
    partial void OnaaiaIDChanging(int value);
    partial void OnaaiaIDChanged();
    #endregion
		
		public Style()
		{
			this._ModelStyles = new EntitySet<ModelStyle>(new Action<ModelStyle>(this.attach_ModelStyles), new Action<ModelStyle>(this.detach_ModelStyles));
			this._Vehicles = new EntitySet<Vehicles>(new Action<Vehicles>(this.attach_Vehicles), new Action<Vehicles>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_styleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int styleID
		{
			get
			{
				return this._styleID;
			}
			set
			{
				if ((this._styleID != value))
				{
					this.OnstyleIDChanging(value);
					this.SendPropertyChanging();
					this._styleID = value;
					this.SendPropertyChanged("styleID");
					this.OnstyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="style", Storage="_style1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string style1
		{
			get
			{
				return this._style1;
			}
			set
			{
				if ((this._style1 != value))
				{
					this.Onstyle1Changing(value);
					this.SendPropertyChanging();
					this._style1 = value;
					this.SendPropertyChanged("style1");
					this.Onstyle1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aaiaID", DbType="Int NOT NULL")]
		public int aaiaID
		{
			get
			{
				return this._aaiaID;
			}
			set
			{
				if ((this._aaiaID != value))
				{
					this.OnaaiaIDChanging(value);
					this.SendPropertyChanging();
					this._aaiaID = value;
					this.SendPropertyChanged("aaiaID");
					this.OnaaiaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Style_ModelStyle", Storage="_ModelStyles", ThisKey="styleID", OtherKey="styleID")]
		internal EntitySet<ModelStyle> ModelStyles
		{
			get
			{
				return this._ModelStyles;
			}
			set
			{
				this._ModelStyles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Style_Vehicles", Storage="_Vehicles", ThisKey="styleID", OtherKey="styleID")]
		internal EntitySet<Vehicles> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModelStyles(ModelStyle entity)
		{
			this.SendPropertyChanging();
			entity.Style = this;
		}
		
		private void detach_ModelStyles(ModelStyle entity)
		{
			this.SendPropertyChanging();
			entity.Style = null;
		}
		
		private void attach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Style = this;
		}
		
		private void detach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Style = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Year")]
	public partial class Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _yearID;
		
		private double _year1;
		
		private EntitySet<YearMake> _YearMakes;
		
		private EntitySet<Vehicles> _Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnyearIDChanging(int value);
    partial void OnyearIDChanged();
    partial void Onyear1Changing(double value);
    partial void Onyear1Changed();
    #endregion
		
		public Year()
		{
			this._YearMakes = new EntitySet<YearMake>(new Action<YearMake>(this.attach_YearMakes), new Action<YearMake>(this.detach_YearMakes));
			this._Vehicles = new EntitySet<Vehicles>(new Action<Vehicles>(this.attach_Vehicles), new Action<Vehicles>(this.detach_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int yearID
		{
			get
			{
				return this._yearID;
			}
			set
			{
				if ((this._yearID != value))
				{
					this.OnyearIDChanging(value);
					this.SendPropertyChanging();
					this._yearID = value;
					this.SendPropertyChanged("yearID");
					this.OnyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="year", Storage="_year1", DbType="Float NOT NULL")]
		public double year1
		{
			get
			{
				return this._year1;
			}
			set
			{
				if ((this._year1 != value))
				{
					this.Onyear1Changing(value);
					this.SendPropertyChanging();
					this._year1 = value;
					this.SendPropertyChanged("year1");
					this.Onyear1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_YearMake", Storage="_YearMakes", ThisKey="yearID", OtherKey="yearID")]
		internal EntitySet<YearMake> YearMakes
		{
			get
			{
				return this._YearMakes;
			}
			set
			{
				this._YearMakes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_Vehicles", Storage="_Vehicles", ThisKey="yearID", OtherKey="yearID")]
		internal EntitySet<Vehicles> Vehicles
		{
			get
			{
				return this._Vehicles;
			}
			set
			{
				this._Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_YearMakes(YearMake entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_YearMakes(YearMake entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
		
		private void attach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_Vehicles(Vehicles entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerPricing")]
	public partial class CustomerPricing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cust_price_id;
		
		private int _cust_id;
		
		private int _partID;
		
		private decimal _price;
		
		private int _isSale;
		
		private System.Nullable<System.DateTime> _sale_start;
		
		private System.Nullable<System.DateTime> _sale_end;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncust_price_idChanging(int value);
    partial void Oncust_price_idChanged();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnisSaleChanging(int value);
    partial void OnisSaleChanged();
    partial void Onsale_startChanging(System.Nullable<System.DateTime> value);
    partial void Onsale_startChanged();
    partial void Onsale_endChanging(System.Nullable<System.DateTime> value);
    partial void Onsale_endChanged();
    #endregion
		
		public CustomerPricing()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_price_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cust_price_id
		{
			get
			{
				return this._cust_price_id;
			}
			set
			{
				if ((this._cust_price_id != value))
				{
					this.Oncust_price_idChanging(value);
					this.SendPropertyChanging();
					this._cust_price_id = value;
					this.SendPropertyChanged("cust_price_id");
					this.Oncust_price_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id", DbType="Int NOT NULL")]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSale", DbType="Int NOT NULL")]
		public int isSale
		{
			get
			{
				return this._isSale;
			}
			set
			{
				if ((this._isSale != value))
				{
					this.OnisSaleChanging(value);
					this.SendPropertyChanging();
					this._isSale = value;
					this.SendPropertyChanged("isSale");
					this.OnisSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sale_start", DbType="Date")]
		public System.Nullable<System.DateTime> sale_start
		{
			get
			{
				return this._sale_start;
			}
			set
			{
				if ((this._sale_start != value))
				{
					this.Onsale_startChanging(value);
					this.SendPropertyChanging();
					this._sale_start = value;
					this.SendPropertyChanged("sale_start");
					this.Onsale_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sale_end", DbType="Date")]
		public System.Nullable<System.DateTime> sale_end
		{
			get
			{
				return this._sale_end;
			}
			set
			{
				if ((this._sale_end != value))
				{
					this.Onsale_endChanging(value);
					this.SendPropertyChanging();
					this._sale_end = value;
					this.SendPropertyChanged("sale_end");
					this.Onsale_endChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerPricing", Storage="_Customer", ThisKey="cust_id", OtherKey="cust_id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerPricings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerPricings.Add(this);
						this._cust_id = value.cust_id;
					}
					else
					{
						this._cust_id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ColorCode")]
	public partial class ColorCode
	{
		
		private int _codeID;
		
		private string _code;
		
		private string _font;
		
		public ColorCode()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codeID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int codeID
		{
			get
			{
				return this._codeID;
			}
			set
			{
				if ((this._codeID != value))
				{
					this._codeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(100)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this._code = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_font", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string font
		{
			get
			{
				return this._font;
			}
			set
			{
				if ((this._font != value))
				{
					this._font = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CartIntegration")]
	public partial class CartIntegration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _referenceID;
		
		private int _partID;
		
		private int _custPartID;
		
		private int _custID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreferenceIDChanging(int value);
    partial void OnreferenceIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OncustPartIDChanging(int value);
    partial void OncustPartIDChanged();
    partial void OncustIDChanging(int value);
    partial void OncustIDChanged();
    #endregion
		
		public CartIntegration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referenceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int referenceID
		{
			get
			{
				return this._referenceID;
			}
			set
			{
				if ((this._referenceID != value))
				{
					this.OnreferenceIDChanging(value);
					this.SendPropertyChanging();
					this._referenceID = value;
					this.SendPropertyChanged("referenceID");
					this.OnreferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custPartID", DbType="Int NOT NULL")]
		public int custPartID
		{
			get
			{
				return this._custPartID;
			}
			set
			{
				if ((this._custPartID != value))
				{
					this.OncustPartIDChanging(value);
					this.SendPropertyChanging();
					this._custPartID = value;
					this.SendPropertyChanged("custPartID");
					this.OncustPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custID", DbType="Int NOT NULL")]
		public int custID
		{
			get
			{
				return this._custID;
			}
			set
			{
				if ((this._custID != value))
				{
					this.OncustIDChanging(value);
					this.SendPropertyChanging();
					this._custID = value;
					this.SendPropertyChanged("custID");
					this.OncustIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WidgetDeployments")]
	public partial class WidgetDeployment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _trackerID;
		
		private string _url;
		
		private System.DateTime _date_added;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrackerIDChanging(int value);
    partial void OntrackerIDChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    #endregion
		
		public WidgetDeployment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trackerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int trackerID
		{
			get
			{
				return this._trackerID;
			}
			set
			{
				if ((this._trackerID != value))
				{
					this.OntrackerIDChanging(value);
					this.SendPropertyChanging();
					this._trackerID = value;
					this.SendPropertyChanged("trackerID");
					this.OntrackerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _menuID;
		
		private string _menu_name;
		
		private bool _isPrimary;
		
		private bool _active;
		
		private string _display_name;
		
		private bool _requireAuthentication;
		
		private bool _showOnSitemap;
		
		private int _sort;
		
		private int _websiteID;
		
		private EntitySet<Menu_SiteContent> _Menu_SiteContents;
		
		private EntityRef<Website> _Website;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmenuIDChanging(int value);
    partial void OnmenuIDChanged();
    partial void Onmenu_nameChanging(string value);
    partial void Onmenu_nameChanged();
    partial void OnisPrimaryChanging(bool value);
    partial void OnisPrimaryChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Ondisplay_nameChanging(string value);
    partial void Ondisplay_nameChanged();
    partial void OnrequireAuthenticationChanging(bool value);
    partial void OnrequireAuthenticationChanged();
    partial void OnshowOnSitemapChanging(bool value);
    partial void OnshowOnSitemapChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OnwebsiteIDChanging(int value);
    partial void OnwebsiteIDChanged();
    #endregion
		
		public Menu()
		{
			this._Menu_SiteContents = new EntitySet<Menu_SiteContent>(new Action<Menu_SiteContent>(this.attach_Menu_SiteContents), new Action<Menu_SiteContent>(this.detach_Menu_SiteContents));
			this._Website = default(EntityRef<Website>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int menuID
		{
			get
			{
				return this._menuID;
			}
			set
			{
				if ((this._menuID != value))
				{
					this.OnmenuIDChanging(value);
					this.SendPropertyChanging();
					this._menuID = value;
					this.SendPropertyChanged("menuID");
					this.OnmenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menu_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string menu_name
		{
			get
			{
				return this._menu_name;
			}
			set
			{
				if ((this._menu_name != value))
				{
					this.Onmenu_nameChanging(value);
					this.SendPropertyChanging();
					this._menu_name = value;
					this.SendPropertyChanged("menu_name");
					this.Onmenu_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPrimary", AutoSync=AutoSync.OnInsert, DbType="Bit NOT NULL")]
		public bool isPrimary
		{
			get
			{
				return this._isPrimary;
			}
			set
			{
				if ((this._isPrimary != value))
				{
					this.OnisPrimaryChanging(value);
					this.SendPropertyChanging();
					this._isPrimary = value;
					this.SendPropertyChanged("isPrimary");
					this.OnisPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", AutoSync=AutoSync.OnInsert, DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_display_name", DbType="Varchar(255) NULL")]
		public string display_name
		{
			get
			{
				return this._display_name;
			}
			set
			{
				if ((this._display_name != value))
				{
					this.Ondisplay_nameChanging(value);
					this.SendPropertyChanging();
					this._display_name = value;
					this.SendPropertyChanged("display_name");
					this.Ondisplay_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_requireAuthentication", AutoSync=AutoSync.OnInsert, DbType="Bit NOT NULL")]
		public bool requireAuthentication
		{
			get
			{
				return this._requireAuthentication;
			}
			set
			{
				if ((this._requireAuthentication != value))
				{
					this.OnrequireAuthenticationChanging(value);
					this.SendPropertyChanging();
					this._requireAuthentication = value;
					this.SendPropertyChanged("requireAuthentication");
					this.OnrequireAuthenticationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showOnSitemap", DbType="Bit NOT NULL")]
		public bool showOnSitemap
		{
			get
			{
				return this._showOnSitemap;
			}
			set
			{
				if ((this._showOnSitemap != value))
				{
					this.OnshowOnSitemapChanging(value);
					this.SendPropertyChanging();
					this._showOnSitemap = value;
					this.SendPropertyChanged("showOnSitemap");
					this.OnshowOnSitemapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_websiteID", DbType="Int NOT NULL")]
		public int websiteID
		{
			get
			{
				return this._websiteID;
			}
			set
			{
				if ((this._websiteID != value))
				{
					if (this._Website.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnwebsiteIDChanging(value);
					this.SendPropertyChanging();
					this._websiteID = value;
					this.SendPropertyChanged("websiteID");
					this.OnwebsiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_Menu_SiteContent", Storage="_Menu_SiteContents", ThisKey="menuID", OtherKey="menuID")]
		public EntitySet<Menu_SiteContent> Menu_SiteContents
		{
			get
			{
				return this._Menu_SiteContents;
			}
			set
			{
				this._Menu_SiteContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Website_Menu", Storage="_Website", ThisKey="websiteID", OtherKey="ID", IsForeignKey=true)]
		public Website Website
		{
			get
			{
				return this._Website.Entity;
			}
			set
			{
				Website previousValue = this._Website.Entity;
				if (((previousValue != value) 
							|| (this._Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Website.Entity = null;
						previousValue.Menus.Remove(this);
					}
					this._Website.Entity = value;
					if ((value != null))
					{
						value.Menus.Add(this);
						this._websiteID = value.ID;
					}
					else
					{
						this._websiteID = default(int);
					}
					this.SendPropertyChanged("Website");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menu_SiteContents(Menu_SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_Menu_SiteContents(Menu_SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu_SiteContent")]
	public partial class Menu_SiteContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _menuContentID;
		
		private int _menuID;
		
		private System.Nullable<int> _contentID;
		
		private int _menuSort;
		
		private string _menuTitle;
		
		private string _menuLink;
		
		private System.Nullable<int> _parentID;
		
		private bool _linkTarget;
		
		private EntitySet<Menu_SiteContent> _Menu_SiteContents;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Menu_SiteContent> _Menu_SiteContent1;
		
		private EntityRef<SiteContent> _SiteContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmenuContentIDChanging(int value);
    partial void OnmenuContentIDChanged();
    partial void OnmenuIDChanging(int value);
    partial void OnmenuIDChanged();
    partial void OncontentIDChanging(System.Nullable<int> value);
    partial void OncontentIDChanged();
    partial void OnmenuSortChanging(int value);
    partial void OnmenuSortChanged();
    partial void OnmenuTitleChanging(string value);
    partial void OnmenuTitleChanged();
    partial void OnmenuLinkChanging(string value);
    partial void OnmenuLinkChanged();
    partial void OnparentIDChanging(System.Nullable<int> value);
    partial void OnparentIDChanged();
    partial void OnlinkTargetChanging(bool value);
    partial void OnlinkTargetChanged();
    #endregion
		
		public Menu_SiteContent()
		{
			this._Menu_SiteContents = new EntitySet<Menu_SiteContent>(new Action<Menu_SiteContent>(this.attach_Menu_SiteContents), new Action<Menu_SiteContent>(this.detach_Menu_SiteContents));
			this._Menu = default(EntityRef<Menu>);
			this._Menu_SiteContent1 = default(EntityRef<Menu_SiteContent>);
			this._SiteContent = default(EntityRef<SiteContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuContentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int menuContentID
		{
			get
			{
				return this._menuContentID;
			}
			set
			{
				if ((this._menuContentID != value))
				{
					this.OnmenuContentIDChanging(value);
					this.SendPropertyChanging();
					this._menuContentID = value;
					this.SendPropertyChanged("menuContentID");
					this.OnmenuContentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuID", DbType="Int NOT NULL")]
		public int menuID
		{
			get
			{
				return this._menuID;
			}
			set
			{
				if ((this._menuID != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmenuIDChanging(value);
					this.SendPropertyChanging();
					this._menuID = value;
					this.SendPropertyChanged("menuID");
					this.OnmenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", DbType="Int")]
		public System.Nullable<int> contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					if (this._SiteContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuSort", DbType="Int NOT NULL")]
		public int menuSort
		{
			get
			{
				return this._menuSort;
			}
			set
			{
				if ((this._menuSort != value))
				{
					this.OnmenuSortChanging(value);
					this.SendPropertyChanging();
					this._menuSort = value;
					this.SendPropertyChanged("menuSort");
					this.OnmenuSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuTitle", DbType="VarChar(255)")]
		public string menuTitle
		{
			get
			{
				return this._menuTitle;
			}
			set
			{
				if ((this._menuTitle != value))
				{
					this.OnmenuTitleChanging(value);
					this.SendPropertyChanging();
					this._menuTitle = value;
					this.SendPropertyChanged("menuTitle");
					this.OnmenuTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuLink", DbType="VarChar(500)")]
		public string menuLink
		{
			get
			{
				return this._menuLink;
			}
			set
			{
				if ((this._menuLink != value))
				{
					this.OnmenuLinkChanging(value);
					this.SendPropertyChanging();
					this._menuLink = value;
					this.SendPropertyChanged("menuLink");
					this.OnmenuLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int")]
		public System.Nullable<int> parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					if (this._Menu_SiteContent1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_linkTarget", DbType="Bit NOT NULL")]
		public bool linkTarget
		{
			get
			{
				return this._linkTarget;
			}
			set
			{
				if ((this._linkTarget != value))
				{
					this.OnlinkTargetChanging(value);
					this.SendPropertyChanging();
					this._linkTarget = value;
					this.SendPropertyChanged("linkTarget");
					this.OnlinkTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_SiteContent_Menu_SiteContent", Storage="_Menu_SiteContents", ThisKey="menuContentID", OtherKey="parentID")]
		public EntitySet<Menu_SiteContent> Menu_SiteContents
		{
			get
			{
				return this._Menu_SiteContents;
			}
			set
			{
				this._Menu_SiteContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_Menu_SiteContent", Storage="_Menu", ThisKey="menuID", OtherKey="menuID", IsForeignKey=true)]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.Menu_SiteContents.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.Menu_SiteContents.Add(this);
						this._menuID = value.menuID;
					}
					else
					{
						this._menuID = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_SiteContent_Menu_SiteContent", Storage="_Menu_SiteContent1", ThisKey="parentID", OtherKey="menuContentID", IsForeignKey=true)]
		public Menu_SiteContent Menu_SiteContent1
		{
			get
			{
				return this._Menu_SiteContent1.Entity;
			}
			set
			{
				Menu_SiteContent previousValue = this._Menu_SiteContent1.Entity;
				if (((previousValue != value) 
							|| (this._Menu_SiteContent1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu_SiteContent1.Entity = null;
						previousValue.Menu_SiteContents.Remove(this);
					}
					this._Menu_SiteContent1.Entity = value;
					if ((value != null))
					{
						value.Menu_SiteContents.Add(this);
						this._parentID = value.menuContentID;
					}
					else
					{
						this._parentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Menu_SiteContent1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SiteContent_Menu_SiteContent", Storage="_SiteContent", ThisKey="contentID", OtherKey="contentID", IsForeignKey=true)]
		public SiteContent SiteContent
		{
			get
			{
				return this._SiteContent.Entity;
			}
			set
			{
				SiteContent previousValue = this._SiteContent.Entity;
				if (((previousValue != value) 
							|| (this._SiteContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteContent.Entity = null;
						previousValue.Menu_SiteContents.Remove(this);
					}
					this._SiteContent.Entity = value;
					if ((value != null))
					{
						value.Menu_SiteContents.Add(this);
						this._contentID = value.contentID;
					}
					else
					{
						this._contentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SiteContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menu_SiteContents(Menu_SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.Menu_SiteContent1 = this;
		}
		
		private void detach_Menu_SiteContents(Menu_SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.Menu_SiteContent1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteContentRevision")]
	public partial class SiteContentRevision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _revisionID;
		
		private int _contentID;
		
		private string _content_text;
		
		private System.DateTime _createdOn;
		
		private System.Nullable<bool> _active;
		
		private EntityRef<SiteContent> _SiteContent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrevisionIDChanging(int value);
    partial void OnrevisionIDChanged();
    partial void OncontentIDChanging(int value);
    partial void OncontentIDChanged();
    partial void Oncontent_textChanging(string value);
    partial void Oncontent_textChanged();
    partial void OncreatedOnChanging(System.DateTime value);
    partial void OncreatedOnChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public SiteContentRevision()
		{
			this._SiteContent = default(EntityRef<SiteContent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_revisionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int revisionID
		{
			get
			{
				return this._revisionID;
			}
			set
			{
				if ((this._revisionID != value))
				{
					this.OnrevisionIDChanging(value);
					this.SendPropertyChanging();
					this._revisionID = value;
					this.SendPropertyChanged("revisionID");
					this.OnrevisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", DbType="Int NOT NULL")]
		public int contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					if (this._SiteContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content_text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string content_text
		{
			get
			{
				return this._content_text;
			}
			set
			{
				if ((this._content_text != value))
				{
					this.Oncontent_textChanging(value);
					this.SendPropertyChanging();
					this._content_text = value;
					this.SendPropertyChanged("content_text");
					this.Oncontent_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdOn", AutoSync=AutoSync.OnInsert, DbType="DateTime NOT NULL")]
		public System.DateTime createdOn
		{
			get
			{
				return this._createdOn;
			}
			set
			{
				if ((this._createdOn != value))
				{
					this.OncreatedOnChanging(value);
					this.SendPropertyChanging();
					this._createdOn = value;
					this.SendPropertyChanged("createdOn");
					this.OncreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SiteContent_SiteContentRevision", Storage="_SiteContent", ThisKey="contentID", OtherKey="contentID", IsForeignKey=true)]
		public SiteContent SiteContent
		{
			get
			{
				return this._SiteContent.Entity;
			}
			set
			{
				SiteContent previousValue = this._SiteContent.Entity;
				if (((previousValue != value) 
							|| (this._SiteContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteContent.Entity = null;
						previousValue.SiteContentRevisions.Remove(this);
					}
					this._SiteContent.Entity = value;
					if ((value != null))
					{
						value.SiteContentRevisions.Add(this);
						this._contentID = value.contentID;
					}
					else
					{
						this._contentID = default(int);
					}
					this.SendPropertyChanged("SiteContent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactReceiver")]
	public partial class ContactReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contactReceiverID;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _email;
		
		private EntitySet<ContactReceiver_ContactType> _ContactReceiver_ContactTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontactReceiverIDChanging(int value);
    partial void OncontactReceiverIDChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public ContactReceiver()
		{
			this._ContactReceiver_ContactTypes = new EntitySet<ContactReceiver_ContactType>(new Action<ContactReceiver_ContactType>(this.attach_ContactReceiver_ContactTypes), new Action<ContactReceiver_ContactType>(this.detach_ContactReceiver_ContactTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactReceiverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contactReceiverID
		{
			get
			{
				return this._contactReceiverID;
			}
			set
			{
				if ((this._contactReceiverID != value))
				{
					this.OncontactReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._contactReceiverID = value;
					this.SendPropertyChanged("contactReceiverID");
					this.OncontactReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(255)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(255)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactReceiver_ContactReceiver_ContactType", Storage="_ContactReceiver_ContactTypes", ThisKey="contactReceiverID", OtherKey="contactReceiverID")]
		public EntitySet<ContactReceiver_ContactType> ContactReceiver_ContactTypes
		{
			get
			{
				return this._ContactReceiver_ContactTypes;
			}
			set
			{
				this._ContactReceiver_ContactTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactReceiver_ContactTypes(ContactReceiver_ContactType entity)
		{
			this.SendPropertyChanging();
			entity.ContactReceiver = this;
		}
		
		private void detach_ContactReceiver_ContactTypes(ContactReceiver_ContactType entity)
		{
			this.SendPropertyChanging();
			entity.ContactReceiver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FAQ")]
	public partial class FAQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _faqID;
		
		private string _question;
		
		private string _answer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfaqIDChanging(int value);
    partial void OnfaqIDChanged();
    partial void OnquestionChanging(string value);
    partial void OnquestionChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    #endregion
		
		public FAQ()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_faqID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int faqID
		{
			get
			{
				return this._faqID;
			}
			set
			{
				if ((this._faqID != value))
				{
					this.OnfaqIDChanging(value);
					this.SendPropertyChanging();
					this._faqID = value;
					this.SendPropertyChanged("faqID");
					this.OnfaqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question", DbType="VarChar(500)")]
		public string question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsItem")]
	public partial class NewsItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _newsItemID;
		
		private string _title;
		
		private string _lead;
		
		private string _content;
		
		private System.Nullable<System.DateTime> _publishStart;
		
		private System.Nullable<System.DateTime> _publishEnd;
		
		private bool _active;
		
		private string _slug;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnewsItemIDChanging(int value);
    partial void OnnewsItemIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnleadChanging(string value);
    partial void OnleadChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OnpublishStartChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishStartChanged();
    partial void OnpublishEndChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishEndChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnslugChanging(string value);
    partial void OnslugChanged();
    #endregion
		
		public NewsItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newsItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int newsItemID
		{
			get
			{
				return this._newsItemID;
			}
			set
			{
				if ((this._newsItemID != value))
				{
					this.OnnewsItemIDChanging(value);
					this.SendPropertyChanging();
					this._newsItemID = value;
					this.SendPropertyChanged("newsItemID");
					this.OnnewsItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(500)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lead", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string lead
		{
			get
			{
				return this._lead;
			}
			set
			{
				if ((this._lead != value))
				{
					this.OnleadChanging(value);
					this.SendPropertyChanging();
					this._lead = value;
					this.SendPropertyChanged("lead");
					this.OnleadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> publishStart
		{
			get
			{
				return this._publishStart;
			}
			set
			{
				if ((this._publishStart != value))
				{
					this.OnpublishStartChanging(value);
					this.SendPropertyChanging();
					this._publishStart = value;
					this.SendPropertyChanged("publishStart");
					this.OnpublishStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> publishEnd
		{
			get
			{
				return this._publishEnd;
			}
			set
			{
				if ((this._publishEnd != value))
				{
					this.OnpublishEndChanging(value);
					this.SendPropertyChanging();
					this._publishEnd = value;
					this.SendPropertyChanged("publishEnd");
					this.OnpublishEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slug", DbType="VarChar(500)")]
		public string slug
		{
			get
			{
				return this._slug;
			}
			set
			{
				if ((this._slug != value))
				{
					this.OnslugChanging(value);
					this.SendPropertyChanging();
					this._slug = value;
					this.SendPropertyChanged("slug");
					this.OnslugChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPost_BlogCategory")]
	public partial class BlogPost_BlogCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _postCategoryID;
		
		private int _blogPostID;
		
		private int _blogCategoryID;
		
		private EntityRef<BlogPost> _BlogPost;
		
		private EntityRef<BlogCategory> _BlogCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostCategoryIDChanging(int value);
    partial void OnpostCategoryIDChanged();
    partial void OnblogPostIDChanging(int value);
    partial void OnblogPostIDChanged();
    partial void OnblogCategoryIDChanging(int value);
    partial void OnblogCategoryIDChanged();
    #endregion
		
		public BlogPost_BlogCategory()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			this._BlogCategory = default(EntityRef<BlogCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int postCategoryID
		{
			get
			{
				return this._postCategoryID;
			}
			set
			{
				if ((this._postCategoryID != value))
				{
					this.OnpostCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._postCategoryID = value;
					this.SendPropertyChanged("postCategoryID");
					this.OnpostCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogPostID", DbType="Int NOT NULL")]
		public int blogPostID
		{
			get
			{
				return this._blogPostID;
			}
			set
			{
				if ((this._blogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnblogPostIDChanging(value);
					this.SendPropertyChanging();
					this._blogPostID = value;
					this.SendPropertyChanged("blogPostID");
					this.OnblogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogCategoryID", DbType="Int NOT NULL")]
		public int blogCategoryID
		{
			get
			{
				return this._blogCategoryID;
			}
			set
			{
				if ((this._blogCategoryID != value))
				{
					if (this._BlogCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnblogCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._blogCategoryID = value;
					this.SendPropertyChanged("blogCategoryID");
					this.OnblogCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPost_BlogCategory", Storage="_BlogPost", ThisKey="blogPostID", OtherKey="blogPostID", IsForeignKey=true)]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPost_BlogCategories.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPost_BlogCategories.Add(this);
						this._blogPostID = value.blogPostID;
					}
					else
					{
						this._blogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogCategory_BlogPost_BlogCategory", Storage="_BlogCategory", ThisKey="blogCategoryID", OtherKey="blogCategoryID", IsForeignKey=true)]
		public BlogCategory BlogCategory
		{
			get
			{
				return this._BlogCategory.Entity;
			}
			set
			{
				BlogCategory previousValue = this._BlogCategory.Entity;
				if (((previousValue != value) 
							|| (this._BlogCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogCategory.Entity = null;
						previousValue.BlogPost_BlogCategories.Remove(this);
					}
					this._BlogCategory.Entity = value;
					if ((value != null))
					{
						value.BlogPost_BlogCategories.Add(this);
						this._blogCategoryID = value.blogCategoryID;
					}
					else
					{
						this._blogCategoryID = default(int);
					}
					this.SendPropertyChanged("BlogCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _commentID;
		
		private int _blogPostID;
		
		private string _name;
		
		private string _email;
		
		private string _comment_text;
		
		private System.DateTime _createdDate;
		
		private bool _approved;
		
		private bool _active;
		
		private EntityRef<BlogPost> _BlogPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommentIDChanging(int value);
    partial void OncommentIDChanged();
    partial void OnblogPostIDChanging(int value);
    partial void OnblogPostIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Oncomment_textChanging(string value);
    partial void Oncomment_textChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnapprovedChanging(bool value);
    partial void OnapprovedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public Comment()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int commentID
		{
			get
			{
				return this._commentID;
			}
			set
			{
				if ((this._commentID != value))
				{
					this.OncommentIDChanging(value);
					this.SendPropertyChanging();
					this._commentID = value;
					this.SendPropertyChanged("commentID");
					this.OncommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogPostID", DbType="Int NOT NULL")]
		public int blogPostID
		{
			get
			{
				return this._blogPostID;
			}
			set
			{
				if ((this._blogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnblogPostIDChanging(value);
					this.SendPropertyChanging();
					this._blogPostID = value;
					this.SendPropertyChanged("blogPostID");
					this.OnblogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comment_text
		{
			get
			{
				return this._comment_text;
			}
			set
			{
				if ((this._comment_text != value))
				{
					this.Oncomment_textChanging(value);
					this.SendPropertyChanging();
					this._comment_text = value;
					this.SendPropertyChanged("comment_text");
					this.Oncomment_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approved", DbType="Bit NOT NULL")]
		public bool approved
		{
			get
			{
				return this._approved;
			}
			set
			{
				if ((this._approved != value))
				{
					this.OnapprovedChanging(value);
					this.SendPropertyChanging();
					this._approved = value;
					this.SendPropertyChanged("approved");
					this.OnapprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_Comment", Storage="_BlogPost", ThisKey="blogPostID", OtherKey="blogPostID", IsForeignKey=true)]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._blogPostID = value.blogPostID;
					}
					else
					{
						this._blogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPosts")]
	public partial class BlogPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _blogPostID;
		
		private string _post_title;
		
		private string _slug;
		
		private System.Nullable<System.DateTime> _publishedDate;
		
		private System.DateTime _createdDate;
		
		private System.DateTime _lastModified;
		
		private int _userID;
		
		private string _meta_title;
		
		private string _meta_description;
		
		private string _keywords;
		
		private bool _active;
		
		private string _post_text;
		
		private EntitySet<BlogPost_BlogCategory> _BlogPost_BlogCategories;
		
		private EntitySet<Comment> _Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnblogPostIDChanging(int value);
    partial void OnblogPostIDChanged();
    partial void Onpost_titleChanging(string value);
    partial void Onpost_titleChanged();
    partial void OnslugChanging(string value);
    partial void OnslugChanged();
    partial void OnpublishedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishedDateChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnlastModifiedChanging(System.DateTime value);
    partial void OnlastModifiedChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void Onmeta_titleChanging(string value);
    partial void Onmeta_titleChanged();
    partial void Onmeta_descriptionChanging(string value);
    partial void Onmeta_descriptionChanged();
    partial void OnkeywordsChanging(string value);
    partial void OnkeywordsChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onpost_textChanging(string value);
    partial void Onpost_textChanged();
    #endregion
		
		public BlogPost()
		{
			this._BlogPost_BlogCategories = new EntitySet<BlogPost_BlogCategory>(new Action<BlogPost_BlogCategory>(this.attach_BlogPost_BlogCategories), new Action<BlogPost_BlogCategory>(this.detach_BlogPost_BlogCategories));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogPostID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int blogPostID
		{
			get
			{
				return this._blogPostID;
			}
			set
			{
				if ((this._blogPostID != value))
				{
					this.OnblogPostIDChanging(value);
					this.SendPropertyChanging();
					this._blogPostID = value;
					this.SendPropertyChanged("blogPostID");
					this.OnblogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post_title", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string post_title
		{
			get
			{
				return this._post_title;
			}
			set
			{
				if ((this._post_title != value))
				{
					this.Onpost_titleChanging(value);
					this.SendPropertyChanging();
					this._post_title = value;
					this.SendPropertyChanged("post_title");
					this.Onpost_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slug", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string slug
		{
			get
			{
				return this._slug;
			}
			set
			{
				if ((this._slug != value))
				{
					this.OnslugChanging(value);
					this.SendPropertyChanging();
					this._slug = value;
					this.SendPropertyChanged("slug");
					this.OnslugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> publishedDate
		{
			get
			{
				return this._publishedDate;
			}
			set
			{
				if ((this._publishedDate != value))
				{
					this.OnpublishedDateChanging(value);
					this.SendPropertyChanging();
					this._publishedDate = value;
					this.SendPropertyChanged("publishedDate");
					this.OnpublishedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModified", DbType="DateTime NOT NULL")]
		public System.DateTime lastModified
		{
			get
			{
				return this._lastModified;
			}
			set
			{
				if ((this._lastModified != value))
				{
					this.OnlastModifiedChanging(value);
					this.SendPropertyChanging();
					this._lastModified = value;
					this.SendPropertyChanged("lastModified");
					this.OnlastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meta_title", DbType="NVarChar(255)")]
		public string meta_title
		{
			get
			{
				return this._meta_title;
			}
			set
			{
				if ((this._meta_title != value))
				{
					this.Onmeta_titleChanging(value);
					this.SendPropertyChanging();
					this._meta_title = value;
					this.SendPropertyChanged("meta_title");
					this.Onmeta_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meta_description", DbType="NVarChar(255)")]
		public string meta_description
		{
			get
			{
				return this._meta_description;
			}
			set
			{
				if ((this._meta_description != value))
				{
					this.Onmeta_descriptionChanging(value);
					this.SendPropertyChanging();
					this._meta_description = value;
					this.SendPropertyChanged("meta_description");
					this.Onmeta_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keywords", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string keywords
		{
			get
			{
				return this._keywords;
			}
			set
			{
				if ((this._keywords != value))
				{
					this.OnkeywordsChanging(value);
					this.SendPropertyChanging();
					this._keywords = value;
					this.SendPropertyChanged("keywords");
					this.OnkeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post_text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string post_text
		{
			get
			{
				return this._post_text;
			}
			set
			{
				if ((this._post_text != value))
				{
					this.Onpost_textChanging(value);
					this.SendPropertyChanging();
					this._post_text = value;
					this.SendPropertyChanged("post_text");
					this.Onpost_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPost_BlogCategory", Storage="_BlogPost_BlogCategories", ThisKey="blogPostID", OtherKey="blogPostID")]
		public EntitySet<BlogPost_BlogCategory> BlogPost_BlogCategories
		{
			get
			{
				return this._BlogPost_BlogCategories;
			}
			set
			{
				this._BlogPost_BlogCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_Comment", Storage="_Comments", ThisKey="blogPostID", OtherKey="blogPostID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPost_BlogCategories(BlogPost_BlogCategory entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPost_BlogCategories(BlogPost_BlogCategory entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogCategories")]
	public partial class BlogCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _blogCategoryID;
		
		private string _name;
		
		private bool _active;
		
		private string _slug;
		
		private EntitySet<BlogPost_BlogCategory> _BlogPost_BlogCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnblogCategoryIDChanging(int value);
    partial void OnblogCategoryIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnslugChanging(string value);
    partial void OnslugChanged();
    #endregion
		
		public BlogCategory()
		{
			this._BlogPost_BlogCategories = new EntitySet<BlogPost_BlogCategory>(new Action<BlogPost_BlogCategory>(this.attach_BlogPost_BlogCategories), new Action<BlogPost_BlogCategory>(this.detach_BlogPost_BlogCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blogCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int blogCategoryID
		{
			get
			{
				return this._blogCategoryID;
			}
			set
			{
				if ((this._blogCategoryID != value))
				{
					this.OnblogCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._blogCategoryID = value;
					this.SendPropertyChanged("blogCategoryID");
					this.OnblogCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slug", DbType="VarChar(255)")]
		public string slug
		{
			get
			{
				return this._slug;
			}
			set
			{
				if ((this._slug != value))
				{
					this.OnslugChanging(value);
					this.SendPropertyChanging();
					this._slug = value;
					this.SendPropertyChanged("slug");
					this.OnslugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogCategory_BlogPost_BlogCategory", Storage="_BlogPost_BlogCategories", ThisKey="blogCategoryID", OtherKey="blogCategoryID")]
		public EntitySet<BlogPost_BlogCategory> BlogPost_BlogCategories
		{
			get
			{
				return this._BlogPost_BlogCategories;
			}
			set
			{
				this._BlogPost_BlogCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPost_BlogCategories(BlogPost_BlogCategory entity)
		{
			this.SendPropertyChanging();
			entity.BlogCategory = this;
		}
		
		private void detach_BlogPost_BlogCategories(BlogPost_BlogCategory entity)
		{
			this.SendPropertyChanging();
			entity.BlogCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _countryID;
		
		private string _name;
		
		private string _abbr;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncountryIDChanging(int value);
    partial void OncountryIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnabbrChanging(string value);
    partial void OnabbrChanged();
    #endregion
		
		public Country()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int countryID
		{
			get
			{
				return this._countryID;
			}
			set
			{
				if ((this._countryID != value))
				{
					this.OncountryIDChanging(value);
					this.SendPropertyChanging();
					this._countryID = value;
					this.SendPropertyChanged("countryID");
					this.OncountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbr", DbType="VarChar(10)")]
		public string abbr
		{
			get
			{
				return this._abbr;
			}
			set
			{
				if ((this._abbr != value))
				{
					this.OnabbrChanging(value);
					this.SendPropertyChanging();
					this._abbr = value;
					this.SendPropertyChanged("abbr");
					this.OnabbrChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class PartStates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stateID;
		
		private string _state1;
		
		private string _abbr;
		
		private int _countryID;
		
		private EntityRef<CustomerLocation> _CustomerLocation;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void Onstate1Changing(string value);
    partial void Onstate1Changed();
    partial void OnabbrChanging(string value);
    partial void OnabbrChanged();
    partial void OncountryIDChanging(int value);
    partial void OncountryIDChanged();
    #endregion
		
		public PartStates()
		{
			this._CustomerLocation = default(EntityRef<CustomerLocation>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					if ((this._CustomerLocation.HasLoadedOrAssignedValue || this._Customer.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="state", Storage="_state1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string state1
		{
			get
			{
				return this._state1;
			}
			set
			{
				if ((this._state1 != value))
				{
					this.Onstate1Changing(value);
					this.SendPropertyChanging();
					this._state1 = value;
					this.SendPropertyChanged("state1");
					this.Onstate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbr", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string abbr
		{
			get
			{
				return this._abbr;
			}
			set
			{
				if ((this._abbr != value))
				{
					this.OnabbrChanging(value);
					this.SendPropertyChanging();
					this._abbr = value;
					this.SendPropertyChanged("abbr");
					this.OnabbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryID", DbType="Int NOT NULL")]
		public int countryID
		{
			get
			{
				return this._countryID;
			}
			set
			{
				if ((this._countryID != value))
				{
					this.OncountryIDChanging(value);
					this.SendPropertyChanging();
					this._countryID = value;
					this.SendPropertyChanged("countryID");
					this.OncountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLocation_PartStates", Storage="_CustomerLocation", ThisKey="stateID", OtherKey="stateID", IsForeignKey=true)]
		public CustomerLocation CustomerLocation
		{
			get
			{
				return this._CustomerLocation.Entity;
			}
			set
			{
				CustomerLocation previousValue = this._CustomerLocation.Entity;
				if (((previousValue != value) 
							|| (this._CustomerLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerLocation.Entity = null;
						previousValue.PartStates.Remove(this);
					}
					this._CustomerLocation.Entity = value;
					if ((value != null))
					{
						value.PartStates.Add(this);
						this._stateID = value.stateID;
					}
					else
					{
						this._stateID = default(int);
					}
					this.SendPropertyChanged("CustomerLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_PartStates", Storage="_Customer", ThisKey="stateID", OtherKey="stateID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.PartStates.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.PartStates.Add(this);
						this._stateID = value.stateID;
					}
					else
					{
						this._stateID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerLocations")]
	public partial class CustomerLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _locationID;
		
		private string _name;
		
		private string _address;
		
		private string _city;
		
		private int _stateID;
		
		private string _email;
		
		private string _phone;
		
		private string _fax;
		
		private double _latitude;
		
		private double _longitude;
		
		private int _cust_id;
		
		private string _contact_person;
		
		private bool _isprimary;
		
		private string _postalCode;
		
		private EntitySet<PartStates> _PartStates;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlocationIDChanging(int value);
    partial void OnlocationIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    partial void Oncontact_personChanging(string value);
    partial void Oncontact_personChanged();
    partial void OnisprimaryChanging(bool value);
    partial void OnisprimaryChanged();
    partial void OnpostalCodeChanging(string value);
    partial void OnpostalCodeChanged();
    #endregion
		
		public CustomerLocation()
		{
			this._PartStates = new EntitySet<PartStates>(new Action<PartStates>(this.attach_PartStates), new Action<PartStates>(this.detach_PartStates));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int locationID
		{
			get
			{
				return this._locationID;
			}
			set
			{
				if ((this._locationID != value))
				{
					this.OnlocationIDChanging(value);
					this.SendPropertyChanging();
					this._locationID = value;
					this.SendPropertyChanged("locationID");
					this.OnlocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(500)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(500)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", DbType="Int NOT NULL")]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(500)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(20)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="VarChar(20)")]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id", DbType="Int NOT NULL")]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contact_person", DbType="VarChar(300)")]
		public string contact_person
		{
			get
			{
				return this._contact_person;
			}
			set
			{
				if ((this._contact_person != value))
				{
					this.Oncontact_personChanging(value);
					this.SendPropertyChanging();
					this._contact_person = value;
					this.SendPropertyChanged("contact_person");
					this.Oncontact_personChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isprimary", DbType="Bit NOT NULL")]
		public bool isprimary
		{
			get
			{
				return this._isprimary;
			}
			set
			{
				if ((this._isprimary != value))
				{
					this.OnisprimaryChanging(value);
					this.SendPropertyChanging();
					this._isprimary = value;
					this.SendPropertyChanged("isprimary");
					this.OnisprimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalCode", DbType="VarChar(30)")]
		public string postalCode
		{
			get
			{
				return this._postalCode;
			}
			set
			{
				if ((this._postalCode != value))
				{
					this.OnpostalCodeChanging(value);
					this.SendPropertyChanging();
					this._postalCode = value;
					this.SendPropertyChanged("postalCode");
					this.OnpostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLocation_PartStates", Storage="_PartStates", ThisKey="stateID", OtherKey="stateID")]
		public EntitySet<PartStates> PartStates
		{
			get
			{
				return this._PartStates;
			}
			set
			{
				this._PartStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerLocation", Storage="_Customer", ThisKey="cust_id", OtherKey="cust_id", IsForeignKey=true)]
		internal Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerLocations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerLocations.Add(this);
						this._cust_id = value.cust_id;
					}
					else
					{
						this._cust_id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartStates(PartStates entity)
		{
			this.SendPropertyChanging();
			entity.CustomerLocation = this;
		}
		
		private void detach_PartStates(PartStates entity)
		{
			this.SendPropertyChanging();
			entity.CustomerLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteContent")]
	public partial class SiteContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contentID;
		
		private string _content_type;
		
		private string _page_title;
		
		private System.DateTime _createdDate;
		
		private System.DateTime _lastModified;
		
		private string _meta_title;
		
		private string _meta_description;
		
		private string _keywords;
		
		private bool _isPrimary;
		
		private bool _published;
		
		private bool _active;
		
		private string _slug;
		
		private bool _requireAuthentication;
		
		private string _canonical;
		
		private int _websiteID;
		
		private EntitySet<Menu_SiteContent> _Menu_SiteContents;
		
		private EntitySet<SiteContentRevision> _SiteContentRevisions;
		
		private EntityRef<Website> _Website;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontentIDChanging(int value);
    partial void OncontentIDChanged();
    partial void Oncontent_typeChanging(string value);
    partial void Oncontent_typeChanged();
    partial void Onpage_titleChanging(string value);
    partial void Onpage_titleChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnlastModifiedChanging(System.DateTime value);
    partial void OnlastModifiedChanged();
    partial void Onmeta_titleChanging(string value);
    partial void Onmeta_titleChanged();
    partial void Onmeta_descriptionChanging(string value);
    partial void Onmeta_descriptionChanged();
    partial void OnkeywordsChanging(string value);
    partial void OnkeywordsChanged();
    partial void OnisPrimaryChanging(bool value);
    partial void OnisPrimaryChanged();
    partial void OnpublishedChanging(bool value);
    partial void OnpublishedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnslugChanging(string value);
    partial void OnslugChanged();
    partial void OnrequireAuthenticationChanging(bool value);
    partial void OnrequireAuthenticationChanged();
    partial void OncanonicalChanging(string value);
    partial void OncanonicalChanged();
    partial void OnwebsiteIDChanging(int value);
    partial void OnwebsiteIDChanged();
    #endregion
		
		public SiteContent()
		{
			this._Menu_SiteContents = new EntitySet<Menu_SiteContent>(new Action<Menu_SiteContent>(this.attach_Menu_SiteContents), new Action<Menu_SiteContent>(this.detach_Menu_SiteContents));
			this._SiteContentRevisions = new EntitySet<SiteContentRevision>(new Action<SiteContentRevision>(this.attach_SiteContentRevisions), new Action<SiteContentRevision>(this.detach_SiteContentRevisions));
			this._Website = default(EntityRef<Website>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content_type", DbType="VarChar(255)")]
		public string content_type
		{
			get
			{
				return this._content_type;
			}
			set
			{
				if ((this._content_type != value))
				{
					this.Oncontent_typeChanging(value);
					this.SendPropertyChanging();
					this._content_type = value;
					this.SendPropertyChanged("content_type");
					this.Oncontent_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_title", DbType="VarChar(500)")]
		public string page_title
		{
			get
			{
				return this._page_title;
			}
			set
			{
				if ((this._page_title != value))
				{
					this.Onpage_titleChanging(value);
					this.SendPropertyChanging();
					this._page_title = value;
					this.SendPropertyChanged("page_title");
					this.Onpage_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModified", DbType="DateTime NOT NULL")]
		public System.DateTime lastModified
		{
			get
			{
				return this._lastModified;
			}
			set
			{
				if ((this._lastModified != value))
				{
					this.OnlastModifiedChanging(value);
					this.SendPropertyChanging();
					this._lastModified = value;
					this.SendPropertyChanged("lastModified");
					this.OnlastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meta_title", DbType="VarChar(255)")]
		public string meta_title
		{
			get
			{
				return this._meta_title;
			}
			set
			{
				if ((this._meta_title != value))
				{
					this.Onmeta_titleChanging(value);
					this.SendPropertyChanging();
					this._meta_title = value;
					this.SendPropertyChanged("meta_title");
					this.Onmeta_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meta_description", DbType="VarChar(255)")]
		public string meta_description
		{
			get
			{
				return this._meta_description;
			}
			set
			{
				if ((this._meta_description != value))
				{
					this.Onmeta_descriptionChanging(value);
					this.SendPropertyChanging();
					this._meta_description = value;
					this.SendPropertyChanged("meta_description");
					this.Onmeta_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keywords", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string keywords
		{
			get
			{
				return this._keywords;
			}
			set
			{
				if ((this._keywords != value))
				{
					this.OnkeywordsChanging(value);
					this.SendPropertyChanging();
					this._keywords = value;
					this.SendPropertyChanged("keywords");
					this.OnkeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPrimary", DbType="Bit NOT NULL")]
		public bool isPrimary
		{
			get
			{
				return this._isPrimary;
			}
			set
			{
				if ((this._isPrimary != value))
				{
					this.OnisPrimaryChanging(value);
					this.SendPropertyChanging();
					this._isPrimary = value;
					this.SendPropertyChanged("isPrimary");
					this.OnisPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_published", DbType="Bit NOT NULL")]
		public bool published
		{
			get
			{
				return this._published;
			}
			set
			{
				if ((this._published != value))
				{
					this.OnpublishedChanging(value);
					this.SendPropertyChanging();
					this._published = value;
					this.SendPropertyChanged("published");
					this.OnpublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slug", DbType="VarChar(500)")]
		public string slug
		{
			get
			{
				return this._slug;
			}
			set
			{
				if ((this._slug != value))
				{
					this.OnslugChanging(value);
					this.SendPropertyChanging();
					this._slug = value;
					this.SendPropertyChanged("slug");
					this.OnslugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_requireAuthentication", DbType="Bit NOT NULL")]
		public bool requireAuthentication
		{
			get
			{
				return this._requireAuthentication;
			}
			set
			{
				if ((this._requireAuthentication != value))
				{
					this.OnrequireAuthenticationChanging(value);
					this.SendPropertyChanging();
					this._requireAuthentication = value;
					this.SendPropertyChanged("requireAuthentication");
					this.OnrequireAuthenticationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_canonical", DbType="VarChar(255)")]
		public string canonical
		{
			get
			{
				return this._canonical;
			}
			set
			{
				if ((this._canonical != value))
				{
					this.OncanonicalChanging(value);
					this.SendPropertyChanging();
					this._canonical = value;
					this.SendPropertyChanged("canonical");
					this.OncanonicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_websiteID", DbType="Int NOT NULL")]
		public int websiteID
		{
			get
			{
				return this._websiteID;
			}
			set
			{
				if ((this._websiteID != value))
				{
					if (this._Website.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnwebsiteIDChanging(value);
					this.SendPropertyChanging();
					this._websiteID = value;
					this.SendPropertyChanged("websiteID");
					this.OnwebsiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SiteContent_Menu_SiteContent", Storage="_Menu_SiteContents", ThisKey="contentID", OtherKey="contentID")]
		public EntitySet<Menu_SiteContent> Menu_SiteContents
		{
			get
			{
				return this._Menu_SiteContents;
			}
			set
			{
				this._Menu_SiteContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SiteContent_SiteContentRevision", Storage="_SiteContentRevisions", ThisKey="contentID", OtherKey="contentID")]
		public EntitySet<SiteContentRevision> SiteContentRevisions
		{
			get
			{
				return this._SiteContentRevisions;
			}
			set
			{
				this._SiteContentRevisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Website_SiteContent", Storage="_Website", ThisKey="websiteID", OtherKey="ID", IsForeignKey=true)]
		public Website Website
		{
			get
			{
				return this._Website.Entity;
			}
			set
			{
				Website previousValue = this._Website.Entity;
				if (((previousValue != value) 
							|| (this._Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Website.Entity = null;
						previousValue.SiteContents.Remove(this);
					}
					this._Website.Entity = value;
					if ((value != null))
					{
						value.SiteContents.Add(this);
						this._websiteID = value.ID;
					}
					else
					{
						this._websiteID = default(int);
					}
					this.SendPropertyChanged("Website");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menu_SiteContents(Menu_SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.SiteContent = this;
		}
		
		private void detach_Menu_SiteContents(Menu_SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.SiteContent = null;
		}
		
		private void attach_SiteContentRevisions(SiteContentRevision entity)
		{
			this.SendPropertyChanging();
			entity.SiteContent = this;
		}
		
		private void detach_SiteContentRevisions(SiteContentRevision entity)
		{
			this.SendPropertyChanging();
			entity.SiteContent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessClass")]
	public partial class BusinessClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessClassID;
		
		private string _name;
		
		private int _sort;
		
		private bool _showOnWebsite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessClassIDChanging(int value);
    partial void OnBusinessClassIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OnshowOnWebsiteChanging(bool value);
    partial void OnshowOnWebsiteChanged();
    #endregion
		
		public BusinessClass()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessClassID
		{
			get
			{
				return this._BusinessClassID;
			}
			set
			{
				if ((this._BusinessClassID != value))
				{
					this.OnBusinessClassIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessClassID = value;
					this.SendPropertyChanged("BusinessClassID");
					this.OnBusinessClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showOnWebsite", DbType="Bit NOT NULL")]
		public bool showOnWebsite
		{
			get
			{
				return this._showOnWebsite;
			}
			set
			{
				if ((this._showOnWebsite != value))
				{
					this.OnshowOnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._showOnWebsite = value;
					this.SendPropertyChanged("showOnWebsite");
					this.OnshowOnWebsiteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactType")]
	public partial class ContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contactTypeID;
		
		private string _name;
		
		private EntityRef<ContactReceiver_ContactType> _ContactReceiver_ContactType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontactTypeIDChanging(int value);
    partial void OncontactTypeIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ContactType()
		{
			this._ContactReceiver_ContactType = default(EntityRef<ContactReceiver_ContactType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contactTypeID
		{
			get
			{
				return this._contactTypeID;
			}
			set
			{
				if ((this._contactTypeID != value))
				{
					if (this._ContactReceiver_ContactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._contactTypeID = value;
					this.SendPropertyChanged("contactTypeID");
					this.OncontactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactReceiver_ContactType_ContactType", Storage="_ContactReceiver_ContactType", ThisKey="contactTypeID", OtherKey="contactTypeID", IsForeignKey=true)]
		public ContactReceiver_ContactType ContactReceiver_ContactType
		{
			get
			{
				return this._ContactReceiver_ContactType.Entity;
			}
			set
			{
				ContactReceiver_ContactType previousValue = this._ContactReceiver_ContactType.Entity;
				if (((previousValue != value) 
							|| (this._ContactReceiver_ContactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactReceiver_ContactType.Entity = null;
						previousValue.ContactTypes.Remove(this);
					}
					this._ContactReceiver_ContactType.Entity = value;
					if ((value != null))
					{
						value.ContactTypes.Add(this);
						this._contactTypeID = value.contactTypeID;
					}
					else
					{
						this._contactTypeID = default(int);
					}
					this.SendPropertyChanged("ContactReceiver_ContactType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactReceiver_ContactType")]
	public partial class ContactReceiver_ContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _receiverTypeID;
		
		private int _contactReceiverID;
		
		private int _contactTypeID;
		
		private EntitySet<ContactType> _ContactTypes;
		
		private EntityRef<ContactReceiver> _ContactReceiver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreceiverTypeIDChanging(int value);
    partial void OnreceiverTypeIDChanged();
    partial void OncontactReceiverIDChanging(int value);
    partial void OncontactReceiverIDChanged();
    partial void OncontactTypeIDChanging(int value);
    partial void OncontactTypeIDChanged();
    #endregion
		
		public ContactReceiver_ContactType()
		{
			this._ContactTypes = new EntitySet<ContactType>(new Action<ContactType>(this.attach_ContactTypes), new Action<ContactType>(this.detach_ContactTypes));
			this._ContactReceiver = default(EntityRef<ContactReceiver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receiverTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int receiverTypeID
		{
			get
			{
				return this._receiverTypeID;
			}
			set
			{
				if ((this._receiverTypeID != value))
				{
					this.OnreceiverTypeIDChanging(value);
					this.SendPropertyChanging();
					this._receiverTypeID = value;
					this.SendPropertyChanged("receiverTypeID");
					this.OnreceiverTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactReceiverID", DbType="Int NOT NULL")]
		public int contactReceiverID
		{
			get
			{
				return this._contactReceiverID;
			}
			set
			{
				if ((this._contactReceiverID != value))
				{
					if (this._ContactReceiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontactReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._contactReceiverID = value;
					this.SendPropertyChanged("contactReceiverID");
					this.OncontactReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactTypeID", DbType="Int NOT NULL")]
		public int contactTypeID
		{
			get
			{
				return this._contactTypeID;
			}
			set
			{
				if ((this._contactTypeID != value))
				{
					this.OncontactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._contactTypeID = value;
					this.SendPropertyChanged("contactTypeID");
					this.OncontactTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactReceiver_ContactType_ContactType", Storage="_ContactTypes", ThisKey="contactTypeID", OtherKey="contactTypeID")]
		public EntitySet<ContactType> ContactTypes
		{
			get
			{
				return this._ContactTypes;
			}
			set
			{
				this._ContactTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactReceiver_ContactReceiver_ContactType", Storage="_ContactReceiver", ThisKey="contactReceiverID", OtherKey="contactReceiverID", IsForeignKey=true)]
		public ContactReceiver ContactReceiver
		{
			get
			{
				return this._ContactReceiver.Entity;
			}
			set
			{
				ContactReceiver previousValue = this._ContactReceiver.Entity;
				if (((previousValue != value) 
							|| (this._ContactReceiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactReceiver.Entity = null;
						previousValue.ContactReceiver_ContactTypes.Remove(this);
					}
					this._ContactReceiver.Entity = value;
					if ((value != null))
					{
						value.ContactReceiver_ContactTypes.Add(this);
						this._contactReceiverID = value.contactReceiverID;
					}
					else
					{
						this._contactReceiverID = default(int);
					}
					this.SendPropertyChanged("ContactReceiver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactTypes(ContactType entity)
		{
			this.SendPropertyChanging();
			entity.ContactReceiver_ContactType = this;
		}
		
		private void detach_ContactTypes(ContactType entity)
		{
			this.SendPropertyChanging();
			entity.ContactReceiver_ContactType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Testimonial")]
	public partial class Testimonial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _testimonialID;
		
		private double _rating;
		
		private string _title;
		
		private string _testimonial1;
		
		private System.DateTime _dateAdded;
		
		private bool _approved;
		
		private bool _active;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntestimonialIDChanging(int value);
    partial void OntestimonialIDChanged();
    partial void OnratingChanging(double value);
    partial void OnratingChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Ontestimonial1Changing(string value);
    partial void Ontestimonial1Changed();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnapprovedChanging(bool value);
    partial void OnapprovedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Testimonial()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testimonialID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int testimonialID
		{
			get
			{
				return this._testimonialID;
			}
			set
			{
				if ((this._testimonialID != value))
				{
					this.OntestimonialIDChanging(value);
					this.SendPropertyChanging();
					this._testimonialID = value;
					this.SendPropertyChanged("testimonialID");
					this.OntestimonialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Float NOT NULL")]
		public double rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(500)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="testimonial", Storage="_testimonial1", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string testimonial1
		{
			get
			{
				return this._testimonial1;
			}
			set
			{
				if ((this._testimonial1 != value))
				{
					this.Ontestimonial1Changing(value);
					this.SendPropertyChanging();
					this._testimonial1 = value;
					this.SendPropertyChanged("testimonial1");
					this.Ontestimonial1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approved", DbType="Bit NOT NULL")]
		public bool approved
		{
			get
			{
				return this._approved;
			}
			set
			{
				if ((this._approved != value))
				{
					this.OnapprovedChanging(value);
					this.SendPropertyChanging();
					this._approved = value;
					this.SendPropertyChanged("approved");
					this.OnapprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(255)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(255)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(255)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DealerTypes")]
	public partial class DealerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dealer_type;
		
		private string _type;
		
		private bool _online;
		
		private bool _show;
		
		private string _label;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondealer_typeChanging(int value);
    partial void Ondealer_typeChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnonlineChanging(bool value);
    partial void OnonlineChanged();
    partial void OnshowChanging(bool value);
    partial void OnshowChanged();
    partial void OnlabelChanging(string value);
    partial void OnlabelChanged();
    #endregion
		
		public DealerType()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dealer_type", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dealer_type
		{
			get
			{
				return this._dealer_type;
			}
			set
			{
				if ((this._dealer_type != value))
				{
					this.Ondealer_typeChanging(value);
					this.SendPropertyChanging();
					this._dealer_type = value;
					this.SendPropertyChanged("dealer_type");
					this.Ondealer_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(100)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_online", DbType="Bit NOT NULL")]
		public bool online
		{
			get
			{
				return this._online;
			}
			set
			{
				if ((this._online != value))
				{
					this.OnonlineChanging(value);
					this.SendPropertyChanging();
					this._online = value;
					this.SendPropertyChanged("online");
					this.OnonlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_show", DbType="Bit NOT NULL")]
		public bool show
		{
			get
			{
				return this._show;
			}
			set
			{
				if ((this._show != value))
				{
					this.OnshowChanging(value);
					this.SendPropertyChanging();
					this._show = value;
					this.SendPropertyChanged("show");
					this.OnshowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_label", DbType="VarChar(300) NULL", CanBeNull=false)]
		public string label
		{
			get
			{
				return this._label;
			}
			set
			{
				if ((this._label != value))
				{
					this.OnlabelChanging(value);
					this.SendPropertyChanging();
					this._label = value;
					this.SendPropertyChanged("label");
					this.OnlabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DealerType_Customer", Storage="_Customers", ThisKey="dealer_type", OtherKey="dealer_type")]
		internal EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.DealerType = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.DealerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cust_id;
		
		private string _name;
		
		private string _email;
		
		private string _address;
		
		private string _city;
		
		private int _stateID;
		
		private string _phone;
		
		private string _fax;
		
		private string _contact_person;
		
		private int _dealer_type;
		
		private string _latitude;
		
		private string _longitude;
		
		private string _password;
		
		private string _website;
		
		private System.Nullable<int> _customerID;
		
		private bool _isDummy;
		
		private System.Nullable<int> _parentID;
		
		private string _searchURL;
		
		private string _eLocalURL;
		
		private string _logo;
		
		private string _address2;
		
		private string _postal_code;
		
		private int _mCodeID;
		
		private System.Nullable<int> _salesRepID;
		
		private System.Guid _APIKey;
		
		private int _tier;
		
		private bool _showWebsite;
		
		private EntitySet<CustomerPricing> _CustomerPricings;
		
		private EntitySet<PartStates> _PartStates;
		
		private EntitySet<CustomerLocation> _CustomerLocations;
		
		private EntitySet<CustomerUser> _CustomerUsers;
		
		private EntityRef<DealerTier> _DealerTier;
		
		private EntityRef<DealerType> _DealerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void Oncontact_personChanging(string value);
    partial void Oncontact_personChanged();
    partial void Ondealer_typeChanging(int value);
    partial void Ondealer_typeChanged();
    partial void OnlatitudeChanging(string value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(string value);
    partial void OnlongitudeChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OncustomerIDChanging(System.Nullable<int> value);
    partial void OncustomerIDChanged();
    partial void OnisDummyChanging(bool value);
    partial void OnisDummyChanged();
    partial void OnparentIDChanging(System.Nullable<int> value);
    partial void OnparentIDChanged();
    partial void OnsearchURLChanging(string value);
    partial void OnsearchURLChanged();
    partial void OneLocalURLChanging(string value);
    partial void OneLocalURLChanged();
    partial void OnlogoChanging(string value);
    partial void OnlogoChanged();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void Onpostal_codeChanging(string value);
    partial void Onpostal_codeChanged();
    partial void OnmCodeIDChanging(int value);
    partial void OnmCodeIDChanged();
    partial void OnsalesRepIDChanging(System.Nullable<int> value);
    partial void OnsalesRepIDChanged();
    partial void OnAPIKeyChanging(System.Guid value);
    partial void OnAPIKeyChanged();
    partial void OntierChanging(int value);
    partial void OntierChanged();
    partial void OnshowWebsiteChanging(bool value);
    partial void OnshowWebsiteChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerPricings = new EntitySet<CustomerPricing>(new Action<CustomerPricing>(this.attach_CustomerPricings), new Action<CustomerPricing>(this.detach_CustomerPricings));
			this._PartStates = new EntitySet<PartStates>(new Action<PartStates>(this.attach_PartStates), new Action<PartStates>(this.detach_PartStates));
			this._CustomerLocations = new EntitySet<CustomerLocation>(new Action<CustomerLocation>(this.attach_CustomerLocations), new Action<CustomerLocation>(this.detach_CustomerLocations));
			this._CustomerUsers = new EntitySet<CustomerUser>(new Action<CustomerUser>(this.attach_CustomerUsers), new Action<CustomerUser>(this.detach_CustomerUsers));
			this._DealerTier = default(EntityRef<DealerTier>);
			this._DealerType = default(EntityRef<DealerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(500)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(150)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", DbType="Int NOT NULL")]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(50)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="VarChar(50)")]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contact_person", DbType="VarChar(300)")]
		public string contact_person
		{
			get
			{
				return this._contact_person;
			}
			set
			{
				if ((this._contact_person != value))
				{
					this.Oncontact_personChanging(value);
					this.SendPropertyChanging();
					this._contact_person = value;
					this.SendPropertyChanged("contact_person");
					this.Oncontact_personChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dealer_type", DbType="Int NOT NULL")]
		public int dealer_type
		{
			get
			{
				return this._dealer_type;
			}
			set
			{
				if ((this._dealer_type != value))
				{
					if (this._DealerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondealer_typeChanging(value);
					this.SendPropertyChanging();
					this._dealer_type = value;
					this.SendPropertyChanged("dealer_type");
					this.Ondealer_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="VarChar(200)")]
		public string latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="VarChar(200)")]
		public string longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="VarChar(500)")]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int")]
		public System.Nullable<int> customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDummy", DbType="Bit NOT NULL")]
		public bool isDummy
		{
			get
			{
				return this._isDummy;
			}
			set
			{
				if ((this._isDummy != value))
				{
					this.OnisDummyChanging(value);
					this.SendPropertyChanging();
					this._isDummy = value;
					this.SendPropertyChanged("isDummy");
					this.OnisDummyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int")]
		public System.Nullable<int> parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_searchURL", DbType="VarChar(500)")]
		public string searchURL
		{
			get
			{
				return this._searchURL;
			}
			set
			{
				if ((this._searchURL != value))
				{
					this.OnsearchURLChanging(value);
					this.SendPropertyChanging();
					this._searchURL = value;
					this.SendPropertyChanged("searchURL");
					this.OnsearchURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eLocalURL", DbType="VarChar(500)")]
		public string eLocalURL
		{
			get
			{
				return this._eLocalURL;
			}
			set
			{
				if ((this._eLocalURL != value))
				{
					this.OneLocalURLChanging(value);
					this.SendPropertyChanging();
					this._eLocalURL = value;
					this.SendPropertyChanged("eLocalURL");
					this.OneLocalURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logo", DbType="VarChar(500)")]
		public string logo
		{
			get
			{
				return this._logo;
			}
			set
			{
				if ((this._logo != value))
				{
					this.OnlogoChanging(value);
					this.SendPropertyChanging();
					this._logo = value;
					this.SendPropertyChanged("logo");
					this.OnlogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="VarChar(500)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postal_code", DbType="VarChar(25)")]
		public string postal_code
		{
			get
			{
				return this._postal_code;
			}
			set
			{
				if ((this._postal_code != value))
				{
					this.Onpostal_codeChanging(value);
					this.SendPropertyChanging();
					this._postal_code = value;
					this.SendPropertyChanged("postal_code");
					this.Onpostal_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mCodeID", DbType="Int")]
		public int mCodeID
		{
			get
			{
				return this._mCodeID;
			}
			set
			{
				if ((this._mCodeID != value))
				{
					this.OnmCodeIDChanging(value);
					this.SendPropertyChanging();
					this._mCodeID = value;
					this.SendPropertyChanged("mCodeID");
					this.OnmCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salesRepID", DbType="Int")]
		public System.Nullable<int> salesRepID
		{
			get
			{
				return this._salesRepID;
			}
			set
			{
				if ((this._salesRepID != value))
				{
					this.OnsalesRepIDChanging(value);
					this.SendPropertyChanging();
					this._salesRepID = value;
					this.SendPropertyChanged("salesRepID");
					this.OnsalesRepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APIKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid APIKey
		{
			get
			{
				return this._APIKey;
			}
			set
			{
				if ((this._APIKey != value))
				{
					this.OnAPIKeyChanging(value);
					this.SendPropertyChanging();
					this._APIKey = value;
					this.SendPropertyChanged("APIKey");
					this.OnAPIKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tier", DbType="Int NOT NULL")]
		public int tier
		{
			get
			{
				return this._tier;
			}
			set
			{
				if ((this._tier != value))
				{
					if (this._DealerTier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntierChanging(value);
					this.SendPropertyChanging();
					this._tier = value;
					this.SendPropertyChanged("tier");
					this.OntierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showWebsite", DbType="Bit NOT NULL")]
		public bool showWebsite
		{
			get
			{
				return this._showWebsite;
			}
			set
			{
				if ((this._showWebsite != value))
				{
					this.OnshowWebsiteChanging(value);
					this.SendPropertyChanging();
					this._showWebsite = value;
					this.SendPropertyChanged("showWebsite");
					this.OnshowWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerPricing", Storage="_CustomerPricings", ThisKey="cust_id", OtherKey="cust_id")]
		public EntitySet<CustomerPricing> CustomerPricings
		{
			get
			{
				return this._CustomerPricings;
			}
			set
			{
				this._CustomerPricings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_PartStates", Storage="_PartStates", ThisKey="stateID", OtherKey="stateID")]
		public EntitySet<PartStates> PartStates
		{
			get
			{
				return this._PartStates;
			}
			set
			{
				this._PartStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerLocation", Storage="_CustomerLocations", ThisKey="cust_id", OtherKey="cust_id")]
		public EntitySet<CustomerLocation> CustomerLocations
		{
			get
			{
				return this._CustomerLocations;
			}
			set
			{
				this._CustomerLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerUser", Storage="_CustomerUsers", ThisKey="cust_id", OtherKey="cust_id")]
		public EntitySet<CustomerUser> CustomerUsers
		{
			get
			{
				return this._CustomerUsers;
			}
			set
			{
				this._CustomerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DealerTier_Customer", Storage="_DealerTier", ThisKey="tier", OtherKey="ID", IsForeignKey=true)]
		public DealerTier DealerTier
		{
			get
			{
				return this._DealerTier.Entity;
			}
			set
			{
				DealerTier previousValue = this._DealerTier.Entity;
				if (((previousValue != value) 
							|| (this._DealerTier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DealerTier.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._DealerTier.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._tier = value.ID;
					}
					else
					{
						this._tier = default(int);
					}
					this.SendPropertyChanged("DealerTier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DealerType_Customer", Storage="_DealerType", ThisKey="dealer_type", OtherKey="dealer_type", IsForeignKey=true)]
		public DealerType DealerType
		{
			get
			{
				return this._DealerType.Entity;
			}
			set
			{
				DealerType previousValue = this._DealerType.Entity;
				if (((previousValue != value) 
							|| (this._DealerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DealerType.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._DealerType.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._dealer_type = value.dealer_type;
					}
					else
					{
						this._dealer_type = default(int);
					}
					this.SendPropertyChanged("DealerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerPricings(CustomerPricing entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerPricings(CustomerPricing entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_PartStates(PartStates entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_PartStates(PartStates entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerLocations(CustomerLocation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerLocations(CustomerLocation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_CustomerUsers(CustomerUser entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerUsers(CustomerUser entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileGallery")]
	public partial class FileGallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fileGalleryID;
		
		private string _name;
		
		private string _description;
		
		private int _parentID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfileGalleryIDChanging(int value);
    partial void OnfileGalleryIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    #endregion
		
		public FileGallery()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileGalleryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fileGalleryID
		{
			get
			{
				return this._fileGalleryID;
			}
			set
			{
				if ((this._fileGalleryID != value))
				{
					this.OnfileGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._fileGalleryID = value;
					this.SendPropertyChanged("fileGalleryID");
					this.OnfileGalleryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(4000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[File]")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fileID;
		
		private string _name;
		
		private string _path;
		
		private int _height;
		
		private int _width;
		
		private System.DateTime _createdDate;
		
		private int _fileGalleryID;
		
		private int _fileExtID;
		
		private int _size;
		
		private EntityRef<FileExt> _FileExt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfileIDChanging(int value);
    partial void OnfileIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void OnheightChanging(int value);
    partial void OnheightChanged();
    partial void OnwidthChanging(int value);
    partial void OnwidthChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnfileGalleryIDChanging(int value);
    partial void OnfileGalleryIDChanged();
    partial void OnfileExtIDChanging(int value);
    partial void OnfileExtIDChanged();
    partial void OnsizeChanging(int value);
    partial void OnsizeChanged();
    #endregion
		
		public File()
		{
			this._FileExt = default(EntityRef<FileExt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fileID
		{
			get
			{
				return this._fileID;
			}
			set
			{
				if ((this._fileID != value))
				{
					this.OnfileIDChanging(value);
					this.SendPropertyChanging();
					this._fileID = value;
					this.SendPropertyChanged("fileID");
					this.OnfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Int NOT NULL")]
		public int height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int NOT NULL")]
		public int width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileGalleryID", DbType="Int NOT NULL")]
		public int fileGalleryID
		{
			get
			{
				return this._fileGalleryID;
			}
			set
			{
				if ((this._fileGalleryID != value))
				{
					this.OnfileGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._fileGalleryID = value;
					this.SendPropertyChanged("fileGalleryID");
					this.OnfileGalleryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileExtID", DbType="Int NOT NULL")]
		public int fileExtID
		{
			get
			{
				return this._fileExtID;
			}
			set
			{
				if ((this._fileExtID != value))
				{
					if (this._FileExt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfileExtIDChanging(value);
					this.SendPropertyChanging();
					this._fileExtID = value;
					this.SendPropertyChanged("fileExtID");
					this.OnfileExtIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="Int NOT NULL")]
		public int size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileExt_File", Storage="_FileExt", ThisKey="fileExtID", OtherKey="fileExtID", IsForeignKey=true)]
		public FileExt FileExt
		{
			get
			{
				return this._FileExt.Entity;
			}
			set
			{
				FileExt previousValue = this._FileExt.Entity;
				if (((previousValue != value) 
							|| (this._FileExt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileExt.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._FileExt.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._fileExtID = value.fileExtID;
					}
					else
					{
						this._fileExtID = default(int);
					}
					this.SendPropertyChanged("FileExt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileExt")]
	public partial class FileExt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fileExtID;
		
		private string _fileExt1;
		
		private string _fileExtIcon;
		
		private int _fileTypeID;
		
		private EntitySet<File> _Files;
		
		private EntityRef<FileType> _FileType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfileExtIDChanging(int value);
    partial void OnfileExtIDChanged();
    partial void OnfileExt1Changing(string value);
    partial void OnfileExt1Changed();
    partial void OnfileExtIconChanging(string value);
    partial void OnfileExtIconChanged();
    partial void OnfileTypeIDChanging(int value);
    partial void OnfileTypeIDChanged();
    #endregion
		
		public FileExt()
		{
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._FileType = default(EntityRef<FileType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileExtID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fileExtID
		{
			get
			{
				return this._fileExtID;
			}
			set
			{
				if ((this._fileExtID != value))
				{
					this.OnfileExtIDChanging(value);
					this.SendPropertyChanging();
					this._fileExtID = value;
					this.SendPropertyChanged("fileExtID");
					this.OnfileExtIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="fileExt", Storage="_fileExt1", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string fileExt1
		{
			get
			{
				return this._fileExt1;
			}
			set
			{
				if ((this._fileExt1 != value))
				{
					this.OnfileExt1Changing(value);
					this.SendPropertyChanging();
					this._fileExt1 = value;
					this.SendPropertyChanged("fileExt1");
					this.OnfileExt1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileExtIcon", DbType="VarChar(1000)")]
		public string fileExtIcon
		{
			get
			{
				return this._fileExtIcon;
			}
			set
			{
				if ((this._fileExtIcon != value))
				{
					this.OnfileExtIconChanging(value);
					this.SendPropertyChanging();
					this._fileExtIcon = value;
					this.SendPropertyChanged("fileExtIcon");
					this.OnfileExtIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileTypeID", DbType="Int NOT NULL")]
		public int fileTypeID
		{
			get
			{
				return this._fileTypeID;
			}
			set
			{
				if ((this._fileTypeID != value))
				{
					if (this._FileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._fileTypeID = value;
					this.SendPropertyChanged("fileTypeID");
					this.OnfileTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileExt_File", Storage="_Files", ThisKey="fileExtID", OtherKey="fileExtID")]
		internal EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_FileExt", Storage="_FileType", ThisKey="fileTypeID", OtherKey="fileTypeID", IsForeignKey=true)]
		public FileType FileType
		{
			get
			{
				return this._FileType.Entity;
			}
			set
			{
				FileType previousValue = this._FileType.Entity;
				if (((previousValue != value) 
							|| (this._FileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileType.Entity = null;
						previousValue.FileExts.Remove(this);
					}
					this._FileType.Entity = value;
					if ((value != null))
					{
						value.FileExts.Add(this);
						this._fileTypeID = value.fileTypeID;
					}
					else
					{
						this._fileTypeID = default(int);
					}
					this.SendPropertyChanged("FileType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.FileExt = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.FileExt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileType")]
	public partial class FileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fileTypeID;
		
		private string _fileType1;
		
		private EntitySet<FileExt> _FileExts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfileTypeIDChanging(int value);
    partial void OnfileTypeIDChanged();
    partial void OnfileType1Changing(string value);
    partial void OnfileType1Changed();
    #endregion
		
		public FileType()
		{
			this._FileExts = new EntitySet<FileExt>(new Action<FileExt>(this.attach_FileExts), new Action<FileExt>(this.detach_FileExts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fileTypeID
		{
			get
			{
				return this._fileTypeID;
			}
			set
			{
				if ((this._fileTypeID != value))
				{
					this.OnfileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._fileTypeID = value;
					this.SendPropertyChanged("fileTypeID");
					this.OnfileTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="fileType", Storage="_fileType1", DbType="VarChar(500)")]
		public string fileType1
		{
			get
			{
				return this._fileType1;
			}
			set
			{
				if ((this._fileType1 != value))
				{
					this.OnfileType1Changing(value);
					this.SendPropertyChanging();
					this._fileType1 = value;
					this.SendPropertyChanged("fileType1");
					this.OnfileType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_FileExt", Storage="_FileExts", ThisKey="fileTypeID", OtherKey="fileTypeID")]
		internal EntitySet<FileExt> FileExts
		{
			get
			{
				return this._FileExts;
			}
			set
			{
				this._FileExts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileExts(FileExt entity)
		{
			this.SendPropertyChanging();
			entity.FileType = this;
		}
		
		private void detach_FileExts(FileExt entity)
		{
			this.SendPropertyChanging();
			entity.FileType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartImageSizes")]
	public partial class PartImageSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sizeID;
		
		private string _size;
		
		private string _dimensions;
		
		private EntitySet<PartImage> _PartImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsizeIDChanging(int value);
    partial void OnsizeIDChanged();
    partial void OnsizeChanging(string value);
    partial void OnsizeChanged();
    partial void OndimensionsChanging(string value);
    partial void OndimensionsChanged();
    #endregion
		
		public PartImageSize()
		{
			this._PartImages = new EntitySet<PartImage>(new Action<PartImage>(this.attach_PartImages), new Action<PartImage>(this.detach_PartImages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sizeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sizeID
		{
			get
			{
				return this._sizeID;
			}
			set
			{
				if ((this._sizeID != value))
				{
					this.OnsizeIDChanging(value);
					this.SendPropertyChanging();
					this._sizeID = value;
					this.SendPropertyChanged("sizeID");
					this.OnsizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="VarChar(25)")]
		public string size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimensions", DbType="VarChar(20)")]
		public string dimensions
		{
			get
			{
				return this._dimensions;
			}
			set
			{
				if ((this._dimensions != value))
				{
					this.OndimensionsChanging(value);
					this.SendPropertyChanging();
					this._dimensions = value;
					this.SendPropertyChanged("dimensions");
					this.OndimensionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartImageSize_PartImage", Storage="_PartImages", ThisKey="sizeID", OtherKey="sizeID")]
		internal EntitySet<PartImage> PartImages
		{
			get
			{
				return this._PartImages;
			}
			set
			{
				this._PartImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.PartImageSize = this;
		}
		
		private void detach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.PartImageSize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _videoID;
		
		private string _embed_link;
		
		private System.DateTime _dateAdded;
		
		private int _sort;
		
		private string _title;
		
		private string _description;
		
		private string _youtubeID;
		
		private string _watchpage;
		
		private string _screenshot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvideoIDChanging(int value);
    partial void OnvideoIDChanged();
    partial void Onembed_linkChanging(string value);
    partial void Onembed_linkChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnyoutubeIDChanging(string value);
    partial void OnyoutubeIDChanged();
    partial void OnwatchpageChanging(string value);
    partial void OnwatchpageChanged();
    partial void OnscreenshotChanging(string value);
    partial void OnscreenshotChanged();
    #endregion
		
		public Video()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int videoID
		{
			get
			{
				return this._videoID;
			}
			set
			{
				if ((this._videoID != value))
				{
					this.OnvideoIDChanging(value);
					this.SendPropertyChanging();
					this._videoID = value;
					this.SendPropertyChanged("videoID");
					this.OnvideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_embed_link", DbType="VarChar(200)")]
		public string embed_link
		{
			get
			{
				return this._embed_link;
			}
			set
			{
				if ((this._embed_link != value))
				{
					this.Onembed_linkChanging(value);
					this.SendPropertyChanging();
					this._embed_link = value;
					this.SendPropertyChanged("embed_link");
					this.Onembed_linkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255) null")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(max) null")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_youtubeID", DbType="VarChar(255) NULL")]
		public string youtubeID
		{
			get
			{
				return this._youtubeID;
			}
			set
			{
				if ((this._youtubeID != value))
				{
					this.OnyoutubeIDChanging(value);
					this.SendPropertyChanging();
					this._youtubeID = value;
					this.SendPropertyChanged("youtubeID");
					this.OnyoutubeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_watchpage", DbType="VarChar(255) NULL")]
		public string watchpage
		{
			get
			{
				return this._watchpage;
			}
			set
			{
				if ((this._watchpage != value))
				{
					this.OnwatchpageChanging(value);
					this.SendPropertyChanging();
					this._watchpage = value;
					this.SendPropertyChanged("watchpage");
					this.OnwatchpageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_screenshot", DbType="VarChar(255) NULL")]
		public string screenshot
		{
			get
			{
				return this._screenshot;
			}
			set
			{
				if ((this._screenshot != value))
				{
					this.OnscreenshotChanging(value);
					this.SendPropertyChanging();
					this._screenshot = value;
					this.SendPropertyChanged("screenshot");
					this.OnscreenshotChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartIndex")]
	public partial class PartIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _partIndexID;
		
		private int _partID;
		
		private string _partIndex1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpartIndexIDChanging(long value);
    partial void OnpartIndexIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnpartIndex1Changing(string value);
    partial void OnpartIndex1Changed();
    #endregion
		
		public PartIndex()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partIndexID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long partIndexID
		{
			get
			{
				return this._partIndexID;
			}
			set
			{
				if ((this._partIndexID != value))
				{
					this.OnpartIndexIDChanging(value);
					this.SendPropertyChanging();
					this._partIndexID = value;
					this.SendPropertyChanged("partIndexID");
					this.OnpartIndexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="partIndex", Storage="_partIndex1", DbType="VarChar(MAX)")]
		public string partIndex1
		{
			get
			{
				return this._partIndex1;
			}
			set
			{
				if ((this._partIndex1 != value))
				{
					this.OnpartIndex1Changing(value);
					this.SendPropertyChanging();
					this._partIndex1 = value;
					this.SendPropertyChanged("partIndex1");
					this.OnpartIndex1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Part")]
	public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _partID;
		
		private int _status;
		
		private System.DateTime _dateModified;
		
		private System.DateTime _dateAdded;
		
		private string _shortDesc;
		
		private string _oldPartNumber;
		
		private System.Nullable<int> _priceCode;
		
		private int _classID;
		
		private bool _featured;
		
		private System.Nullable<int> _ACESPartTypeID;
		
		private EntitySet<CatParts> _CatParts;
		
		private EntitySet<PartAttribute> _PartAttributes;
		
		private EntitySet<Price> _Prices;
		
		private EntitySet<Review> _Reviews;
		
		private EntitySet<PartImage> _PartImages;
		
		private EntitySet<VehiclePart> _VehicleParts;
		
		private EntitySet<RelatedPart> _RelatedParts;
		
		private EntitySet<PartVideo> _PartVideos;
		
		private EntitySet<ContentBridge> _ContentBridges;
		
		private EntitySet<PartPackage> _PartPackages;
		
		private EntitySet<vcdb_VehiclePart> _vcdb_VehicleParts;
		
		private EntitySet<IncludedPart> _IncludedParts;
		
		private EntitySet<PartGroupPart> _PartGroupParts;
		
		private EntityRef<IncludedPart> _IncludedPart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndateModifiedChanging(System.DateTime value);
    partial void OndateModifiedChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnshortDescChanging(string value);
    partial void OnshortDescChanged();
    partial void OnoldPartNumberChanging(string value);
    partial void OnoldPartNumberChanged();
    partial void OnpriceCodeChanging(System.Nullable<int> value);
    partial void OnpriceCodeChanged();
    partial void OnclassIDChanging(int value);
    partial void OnclassIDChanged();
    partial void OnfeaturedChanging(bool value);
    partial void OnfeaturedChanged();
    partial void OnACESPartTypeIDChanging(System.Nullable<int> value);
    partial void OnACESPartTypeIDChanged();
    #endregion
		
		public Part()
		{
			this._CatParts = new EntitySet<CatParts>(new Action<CatParts>(this.attach_CatParts), new Action<CatParts>(this.detach_CatParts));
			this._PartAttributes = new EntitySet<PartAttribute>(new Action<PartAttribute>(this.attach_PartAttributes), new Action<PartAttribute>(this.detach_PartAttributes));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			this._PartImages = new EntitySet<PartImage>(new Action<PartImage>(this.attach_PartImages), new Action<PartImage>(this.detach_PartImages));
			this._VehicleParts = new EntitySet<VehiclePart>(new Action<VehiclePart>(this.attach_VehicleParts), new Action<VehiclePart>(this.detach_VehicleParts));
			this._RelatedParts = new EntitySet<RelatedPart>(new Action<RelatedPart>(this.attach_RelatedParts), new Action<RelatedPart>(this.detach_RelatedParts));
			this._PartVideos = new EntitySet<PartVideo>(new Action<PartVideo>(this.attach_PartVideos), new Action<PartVideo>(this.detach_PartVideos));
			this._ContentBridges = new EntitySet<ContentBridge>(new Action<ContentBridge>(this.attach_ContentBridges), new Action<ContentBridge>(this.detach_ContentBridges));
			this._PartPackages = new EntitySet<PartPackage>(new Action<PartPackage>(this.attach_PartPackages), new Action<PartPackage>(this.detach_PartPackages));
			this._vcdb_VehicleParts = new EntitySet<vcdb_VehiclePart>(new Action<vcdb_VehiclePart>(this.attach_vcdb_VehicleParts), new Action<vcdb_VehiclePart>(this.detach_vcdb_VehicleParts));
			this._IncludedParts = new EntitySet<IncludedPart>(new Action<IncludedPart>(this.attach_IncludedParts), new Action<IncludedPart>(this.detach_IncludedParts));
			this._PartGroupParts = new EntitySet<PartGroupPart>(new Action<PartGroupPart>(this.attach_PartGroupParts), new Action<PartGroupPart>(this.detach_PartGroupParts));
			this._IncludedPart = default(EntityRef<IncludedPart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._IncludedPart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModified", DbType="DateTime NOT NULL")]
		public System.DateTime dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this.OndateModifiedChanging(value);
					this.SendPropertyChanging();
					this._dateModified = value;
					this.SendPropertyChanged("dateModified");
					this.OndateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortDesc", DbType="VarChar(255)")]
		public string shortDesc
		{
			get
			{
				return this._shortDesc;
			}
			set
			{
				if ((this._shortDesc != value))
				{
					this.OnshortDescChanging(value);
					this.SendPropertyChanging();
					this._shortDesc = value;
					this.SendPropertyChanged("shortDesc");
					this.OnshortDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oldPartNumber", DbType="VarChar(100)")]
		public string oldPartNumber
		{
			get
			{
				return this._oldPartNumber;
			}
			set
			{
				if ((this._oldPartNumber != value))
				{
					this.OnoldPartNumberChanging(value);
					this.SendPropertyChanging();
					this._oldPartNumber = value;
					this.SendPropertyChanged("oldPartNumber");
					this.OnoldPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceCode", DbType="Int")]
		public System.Nullable<int> priceCode
		{
			get
			{
				return this._priceCode;
			}
			set
			{
				if ((this._priceCode != value))
				{
					this.OnpriceCodeChanging(value);
					this.SendPropertyChanging();
					this._priceCode = value;
					this.SendPropertyChanged("priceCode");
					this.OnpriceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", DbType="Int NOT NULL")]
		public int classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featured", DbType="Bit NOT NULL")]
		public bool featured
		{
			get
			{
				return this._featured;
			}
			set
			{
				if ((this._featured != value))
				{
					this.OnfeaturedChanging(value);
					this.SendPropertyChanging();
					this._featured = value;
					this.SendPropertyChanged("featured");
					this.OnfeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACESPartTypeID", DbType="Int")]
		public System.Nullable<int> ACESPartTypeID
		{
			get
			{
				return this._ACESPartTypeID;
			}
			set
			{
				if ((this._ACESPartTypeID != value))
				{
					this.OnACESPartTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ACESPartTypeID = value;
					this.SendPropertyChanged("ACESPartTypeID");
					this.OnACESPartTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_CatParts", Storage="_CatParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<CatParts> CatParts
		{
			get
			{
				return this._CatParts;
			}
			set
			{
				this._CatParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartAttribute", Storage="_PartAttributes", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartAttribute> PartAttributes
		{
			get
			{
				return this._PartAttributes;
			}
			set
			{
				this._PartAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Price", Storage="_Prices", ThisKey="partID", OtherKey="partID")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Review", Storage="_Reviews", ThisKey="partID", OtherKey="partID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartImage", Storage="_PartImages", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartImage> PartImages
		{
			get
			{
				return this._PartImages;
			}
			set
			{
				this._PartImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_VehiclePart", Storage="_VehicleParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<VehiclePart> VehicleParts
		{
			get
			{
				return this._VehicleParts;
			}
			set
			{
				this._VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_RelatedPart", Storage="_RelatedParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<RelatedPart> RelatedParts
		{
			get
			{
				return this._RelatedParts;
			}
			set
			{
				this._RelatedParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartVideo", Storage="_PartVideos", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartVideo> PartVideos
		{
			get
			{
				return this._PartVideos;
			}
			set
			{
				this._PartVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_ContentBridge", Storage="_ContentBridges", ThisKey="partID", OtherKey="partID")]
		public EntitySet<ContentBridge> ContentBridges
		{
			get
			{
				return this._ContentBridges;
			}
			set
			{
				this._ContentBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartPackage", Storage="_PartPackages", ThisKey="partID", OtherKey="partID")]
		public EntitySet<PartPackage> PartPackages
		{
			get
			{
				return this._PartPackages;
			}
			set
			{
				this._PartPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_vcdb_VehiclePart", Storage="_vcdb_VehicleParts", ThisKey="partID", OtherKey="PartNumber")]
		public EntitySet<vcdb_VehiclePart> vcdb_VehicleParts
		{
			get
			{
				return this._vcdb_VehicleParts;
			}
			set
			{
				this._vcdb_VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_IncludedPart", Storage="_IncludedParts", ThisKey="partID", OtherKey="partID")]
		public EntitySet<IncludedPart> IncludedParts
		{
			get
			{
				return this._IncludedParts;
			}
			set
			{
				this._IncludedParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartGroupPart", Storage="_PartGroupParts", ThisKey="partID", OtherKey="partID")]
		internal EntitySet<PartGroupPart> PartGroupParts
		{
			get
			{
				return this._PartGroupParts;
			}
			set
			{
				this._PartGroupParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncludedPart_Part", Storage="_IncludedPart", ThisKey="partID", OtherKey="includedID", IsForeignKey=true)]
		internal IncludedPart IncludedPart
		{
			get
			{
				return this._IncludedPart.Entity;
			}
			set
			{
				IncludedPart previousValue = this._IncludedPart.Entity;
				if (((previousValue != value) 
							|| (this._IncludedPart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncludedPart.Entity = null;
						previousValue.Part = null;
					}
					this._IncludedPart.Entity = value;
					if ((value != null))
					{
						value.Part = this;
						this._partID = value.includedID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("IncludedPart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatParts(CatParts entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_CatParts(CatParts entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartAttributes(PartAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartAttributes(PartAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartImages(PartImage entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_RelatedParts(RelatedPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_RelatedParts(RelatedPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartVideos(PartVideo entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartVideos(PartVideo entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_PartPackages(PartPackage entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartPackages(PartPackage entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_IncludedParts(IncludedPart entity)
		{
			this.SendPropertyChanging();
			entity.ParentPart = this;
		}
		
		private void detach_IncludedParts(IncludedPart entity)
		{
			this.SendPropertyChanging();
			entity.ParentPart = null;
		}
		
		private void attach_PartGroupParts(PartGroupPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_PartGroupParts(PartGroupPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IPBlock")]
	public partial class IPBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _blockID;
		
		private string _IPAddress;
		
		private string _reason;
		
		private System.DateTime _createdDate;
		
		private int _userID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnblockIDChanging(int value);
    partial void OnblockIDChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnreasonChanging(string value);
    partial void OnreasonChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    #endregion
		
		public IPBlock()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int blockID
		{
			get
			{
				return this._blockID;
			}
			set
			{
				if ((this._blockID != value))
				{
					this.OnblockIDChanging(value);
					this.SendPropertyChanging();
					this._blockID = value;
					this.SendPropertyChanged("blockID");
					this.OnblockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reason", DbType="VarChar(255)")]
		public string reason
		{
			get
			{
				return this._reason;
			}
			set
			{
				if ((this._reason != value))
				{
					this.OnreasonChanging(value);
					this.SendPropertyChanging();
					this._reason = value;
					this.SendPropertyChanged("reason");
					this.OnreasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumGroup")]
	public partial class ForumGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _forumGroupID;
		
		private string _name;
		
		private string _description;
		
		private System.DateTime _createdDate;
		
		private EntitySet<ForumTopic> _ForumTopics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnforumGroupIDChanging(int value);
    partial void OnforumGroupIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    #endregion
		
		public ForumGroup()
		{
			this._ForumTopics = new EntitySet<ForumTopic>(new Action<ForumTopic>(this.attach_ForumTopics), new Action<ForumTopic>(this.detach_ForumTopics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forumGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int forumGroupID
		{
			get
			{
				return this._forumGroupID;
			}
			set
			{
				if ((this._forumGroupID != value))
				{
					this.OnforumGroupIDChanging(value);
					this.SendPropertyChanging();
					this._forumGroupID = value;
					this.SendPropertyChanged("forumGroupID");
					this.OnforumGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumGroup_ForumTopic", Storage="_ForumTopics", ThisKey="forumGroupID", OtherKey="TopicGroupID")]
		public EntitySet<ForumTopic> ForumTopics
		{
			get
			{
				return this._ForumTopics;
			}
			set
			{
				this._ForumTopics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumTopics(ForumTopic entity)
		{
			this.SendPropertyChanging();
			entity.ForumGroup = this;
		}
		
		private void detach_ForumTopics(ForumTopic entity)
		{
			this.SendPropertyChanging();
			entity.ForumGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumTopic")]
	public partial class ForumTopic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _topicID;
		
		private int _TopicGroupID;
		
		private string _name;
		
		private string _description;
		
		private System.DateTime _createdDate;
		
		private bool _active;
		
		private bool _closed;
		
		private string _image;
		
		private EntitySet<ForumThread> _ForumThreads;
		
		private EntityRef<ForumGroup> _ForumGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntopicIDChanging(int value);
    partial void OntopicIDChanged();
    partial void OnTopicGroupIDChanging(int value);
    partial void OnTopicGroupIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnclosedChanging(bool value);
    partial void OnclosedChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    #endregion
		
		public ForumTopic()
		{
			this._ForumThreads = new EntitySet<ForumThread>(new Action<ForumThread>(this.attach_ForumThreads), new Action<ForumThread>(this.detach_ForumThreads));
			this._ForumGroup = default(EntityRef<ForumGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_topicID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int topicID
		{
			get
			{
				return this._topicID;
			}
			set
			{
				if ((this._topicID != value))
				{
					this.OntopicIDChanging(value);
					this.SendPropertyChanging();
					this._topicID = value;
					this.SendPropertyChanged("topicID");
					this.OntopicIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicGroupID", DbType="Int NOT NULL")]
		public int TopicGroupID
		{
			get
			{
				return this._TopicGroupID;
			}
			set
			{
				if ((this._TopicGroupID != value))
				{
					if (this._ForumGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicGroupIDChanging(value);
					this.SendPropertyChanging();
					this._TopicGroupID = value;
					this.SendPropertyChanged("TopicGroupID");
					this.OnTopicGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_closed", DbType="Bit NOT NULL")]
		public bool closed
		{
			get
			{
				return this._closed;
			}
			set
			{
				if ((this._closed != value))
				{
					this.OnclosedChanging(value);
					this.SendPropertyChanging();
					this._closed = value;
					this.SendPropertyChanged("closed");
					this.OnclosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(255)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumTopic_ForumThread", Storage="_ForumThreads", ThisKey="topicID", OtherKey="topicID")]
		public EntitySet<ForumThread> ForumThreads
		{
			get
			{
				return this._ForumThreads;
			}
			set
			{
				this._ForumThreads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumGroup_ForumTopic", Storage="_ForumGroup", ThisKey="TopicGroupID", OtherKey="forumGroupID", IsForeignKey=true)]
		public ForumGroup ForumGroup
		{
			get
			{
				return this._ForumGroup.Entity;
			}
			set
			{
				ForumGroup previousValue = this._ForumGroup.Entity;
				if (((previousValue != value) 
							|| (this._ForumGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumGroup.Entity = null;
						previousValue.ForumTopics.Remove(this);
					}
					this._ForumGroup.Entity = value;
					if ((value != null))
					{
						value.ForumTopics.Add(this);
						this._TopicGroupID = value.forumGroupID;
					}
					else
					{
						this._TopicGroupID = default(int);
					}
					this.SendPropertyChanged("ForumGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumThreads(ForumThread entity)
		{
			this.SendPropertyChanging();
			entity.ForumTopic = this;
		}
		
		private void detach_ForumThreads(ForumThread entity)
		{
			this.SendPropertyChanging();
			entity.ForumTopic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumPost")]
	public partial class ForumPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _postID;
		
		private int _parentID;
		
		private int _threadID;
		
		private System.DateTime _createdDate;
		
		private string _title;
		
		private string _post;
		
		private string _name;
		
		private string _email;
		
		private bool _notify;
		
		private bool _approved;
		
		private bool _active;
		
		private string _IPAddress;
		
		private bool _flag;
		
		private string _company;
		
		private bool _sticky;
		
		private EntityRef<ForumThread> _ForumThread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpostIDChanging(int value);
    partial void OnpostIDChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OnthreadIDChanging(int value);
    partial void OnthreadIDChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnpostChanging(string value);
    partial void OnpostChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnnotifyChanging(bool value);
    partial void OnnotifyChanged();
    partial void OnapprovedChanging(bool value);
    partial void OnapprovedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnflagChanging(bool value);
    partial void OnflagChanged();
    partial void OncompanyChanging(string value);
    partial void OncompanyChanged();
    partial void OnstickyChanging(bool value);
    partial void OnstickyChanged();
    #endregion
		
		public ForumPost()
		{
			this._ForumThread = default(EntityRef<ForumThread>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int postID
		{
			get
			{
				return this._postID;
			}
			set
			{
				if ((this._postID != value))
				{
					this.OnpostIDChanging(value);
					this.SendPropertyChanging();
					this._postID = value;
					this.SendPropertyChanged("postID");
					this.OnpostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_threadID", DbType="Int NOT NULL")]
		public int threadID
		{
			get
			{
				return this._threadID;
			}
			set
			{
				if ((this._threadID != value))
				{
					if (this._ForumThread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnthreadIDChanging(value);
					this.SendPropertyChanging();
					this._threadID = value;
					this.SendPropertyChanged("threadID");
					this.OnthreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_post", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string post
		{
			get
			{
				return this._post;
			}
			set
			{
				if ((this._post != value))
				{
					this.OnpostChanging(value);
					this.SendPropertyChanging();
					this._post = value;
					this.SendPropertyChanged("post");
					this.OnpostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notify", DbType="Bit NOT NULL")]
		public bool notify
		{
			get
			{
				return this._notify;
			}
			set
			{
				if ((this._notify != value))
				{
					this.OnnotifyChanging(value);
					this.SendPropertyChanging();
					this._notify = value;
					this.SendPropertyChanged("notify");
					this.OnnotifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approved", DbType="Bit NOT NULL")]
		public bool approved
		{
			get
			{
				return this._approved;
			}
			set
			{
				if ((this._approved != value))
				{
					this.OnapprovedChanging(value);
					this.SendPropertyChanging();
					this._approved = value;
					this.SendPropertyChanged("approved");
					this.OnapprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flag", DbType="Bit NOT NULL")]
		public bool flag
		{
			get
			{
				return this._flag;
			}
			set
			{
				if ((this._flag != value))
				{
					this.OnflagChanging(value);
					this.SendPropertyChanging();
					this._flag = value;
					this.SendPropertyChanged("flag");
					this.OnflagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company", DbType="VarChar(255)")]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					this.OncompanyChanging(value);
					this.SendPropertyChanging();
					this._company = value;
					this.SendPropertyChanged("company");
					this.OncompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sticky", DbType="Bit NOT NULL")]
		public bool sticky
		{
			get
			{
				return this._sticky;
			}
			set
			{
				if ((this._sticky != value))
				{
					this.OnstickyChanging(value);
					this.SendPropertyChanging();
					this._sticky = value;
					this.SendPropertyChanged("sticky");
					this.OnstickyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumThread_ForumPost", Storage="_ForumThread", ThisKey="threadID", OtherKey="threadID", IsForeignKey=true)]
		public ForumThread ForumThread
		{
			get
			{
				return this._ForumThread.Entity;
			}
			set
			{
				ForumThread previousValue = this._ForumThread.Entity;
				if (((previousValue != value) 
							|| (this._ForumThread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumThread.Entity = null;
						previousValue.ForumPosts.Remove(this);
					}
					this._ForumThread.Entity = value;
					if ((value != null))
					{
						value.ForumPosts.Add(this);
						this._threadID = value.threadID;
					}
					else
					{
						this._threadID = default(int);
					}
					this.SendPropertyChanged("ForumThread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumThread")]
	public partial class ForumThread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _threadID;
		
		private int _topicID;
		
		private System.DateTime _createdDate;
		
		private bool _active;
		
		private bool _closed;
		
		private EntitySet<ForumPost> _ForumPosts;
		
		private EntityRef<ForumTopic> _ForumTopic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnthreadIDChanging(int value);
    partial void OnthreadIDChanged();
    partial void OntopicIDChanging(int value);
    partial void OntopicIDChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnclosedChanging(bool value);
    partial void OnclosedChanged();
    #endregion
		
		public ForumThread()
		{
			this._ForumPosts = new EntitySet<ForumPost>(new Action<ForumPost>(this.attach_ForumPosts), new Action<ForumPost>(this.detach_ForumPosts));
			this._ForumTopic = default(EntityRef<ForumTopic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_threadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int threadID
		{
			get
			{
				return this._threadID;
			}
			set
			{
				if ((this._threadID != value))
				{
					this.OnthreadIDChanging(value);
					this.SendPropertyChanging();
					this._threadID = value;
					this.SendPropertyChanged("threadID");
					this.OnthreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_topicID", DbType="Int NOT NULL")]
		public int topicID
		{
			get
			{
				return this._topicID;
			}
			set
			{
				if ((this._topicID != value))
				{
					if (this._ForumTopic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntopicIDChanging(value);
					this.SendPropertyChanging();
					this._topicID = value;
					this.SendPropertyChanged("topicID");
					this.OntopicIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_closed", DbType="Bit NOT NULL")]
		public bool closed
		{
			get
			{
				return this._closed;
			}
			set
			{
				if ((this._closed != value))
				{
					this.OnclosedChanging(value);
					this.SendPropertyChanging();
					this._closed = value;
					this.SendPropertyChanged("closed");
					this.OnclosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumThread_ForumPost", Storage="_ForumPosts", ThisKey="threadID", OtherKey="threadID")]
		public EntitySet<ForumPost> ForumPosts
		{
			get
			{
				return this._ForumPosts;
			}
			set
			{
				this._ForumPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumTopic_ForumThread", Storage="_ForumTopic", ThisKey="topicID", OtherKey="topicID", IsForeignKey=true)]
		public ForumTopic ForumTopic
		{
			get
			{
				return this._ForumTopic.Entity;
			}
			set
			{
				ForumTopic previousValue = this._ForumTopic.Entity;
				if (((previousValue != value) 
							|| (this._ForumTopic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumTopic.Entity = null;
						previousValue.ForumThreads.Remove(this);
					}
					this._ForumTopic.Entity = value;
					if ((value != null))
					{
						value.ForumThreads.Add(this);
						this._topicID = value.topicID;
					}
					else
					{
						this._topicID = default(int);
					}
					this.SendPropertyChanged("ForumTopic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.ForumThread = this;
		}
		
		private void detach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.ForumThread = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapixCode")]
	public partial class MapixCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mCodeID;
		
		private string _code;
		
		private string _description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmCodeIDChanging(int value);
    partial void OnmCodeIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public MapixCode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mCodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mCodeID
		{
			get
			{
				return this._mCodeID;
			}
			set
			{
				if ((this._mCodeID != value))
				{
					this.OnmCodeIDChanging(value);
					this.SendPropertyChanging();
					this._mCodeID = value;
					this.SendPropertyChanged("mCodeID");
					this.OnmCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(255)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(200)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesRepresentative")]
	public partial class SalesRepresentative : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _salesRepID;
		
		private string _name;
		
		private string _code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsalesRepIDChanging(int value);
    partial void OnsalesRepIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SalesRepresentative()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salesRepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int salesRepID
		{
			get
			{
				return this._salesRepID;
			}
			set
			{
				if ((this._salesRepID != value))
				{
					this.OnsalesRepIDChanging(value);
					this.SendPropertyChanging();
					this._salesRepID = value;
					this.SendPropertyChanged("salesRepID");
					this.OnsalesRepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(10)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contactID;
		
		private string _first_name;
		
		private string _last_name;
		
		private string _email;
		
		private string _phone;
		
		private string _subject;
		
		private string _message;
		
		private System.DateTime _createdDate;
		
		private string _type;
		
		private string _address1;
		
		private string _address2;
		
		private string _city;
		
		private string _state;
		
		private string _postalcode;
		
		private string _country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontactIDChanging(int value);
    partial void OncontactIDChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnpostalcodeChanging(string value);
    partial void OnpostalcodeChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    #endregion
		
		public Contact()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contactID
		{
			get
			{
				return this._contactID;
			}
			set
			{
				if ((this._contactID != value))
				{
					this.OncontactIDChanging(value);
					this.SendPropertyChanging();
					this._contactID = value;
					this.SendPropertyChanged("contactID");
					this.OncontactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(255)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(255)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(30)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(500)")]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address1", DbType="VarChar(500)")]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="VarChar(500)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(255)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(10)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalcode", DbType="VarChar(20)")]
		public string postalcode
		{
			get
			{
				return this._postalcode;
			}
			set
			{
				if ((this._postalcode != value))
				{
					this.OnpostalcodeChanging(value);
					this.SendPropertyChanging();
					this._postalcode = value;
					this.SendPropertyChanged("postalcode");
					this.OnpostalcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="VarChar(255)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatPart")]
	public partial class CatParts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catPartID;
		
		private int _catID;
		
		private int _partID;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Categories> _Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatPartIDChanging(int value);
    partial void OncatPartIDChanged();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    #endregion
		
		public CatParts()
		{
			this._Part = default(EntityRef<Part>);
			this._Categories = default(EntityRef<Categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catPartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int catPartID
		{
			get
			{
				return this._catPartID;
			}
			set
			{
				if ((this._catPartID != value))
				{
					this.OncatPartIDChanging(value);
					this.SendPropertyChanging();
					this._catPartID = value;
					this.SendPropertyChanged("catPartID");
					this.OncatPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int NOT NULL")]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_CatParts", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.CatParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.CatParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_CatParts", Storage="_Categories", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		internal Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.CatParts.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.CatParts.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catID;
		
		private System.Nullable<System.DateTime> _dateAdded;
		
		private int _parentID;
		
		private string _catTitle;
		
		private string _shortDesc;
		
		private string _longDesc;
		
		private string _image;
		
		private int _isLifestyle;
		
		private int _codeID;
		
		private int _sort;
		
		private bool _vehicleSpecific;
		
		private EntitySet<CatParts> _CatParts;
		
		private EntitySet<Lifestyle_Trailer> _Lifestyle_Trailers;
		
		private EntitySet<ContentBridge> _ContentBridges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OndateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OndateAddedChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OncatTitleChanging(string value);
    partial void OncatTitleChanged();
    partial void OnshortDescChanging(string value);
    partial void OnshortDescChanged();
    partial void OnlongDescChanging(string value);
    partial void OnlongDescChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnisLifestyleChanging(int value);
    partial void OnisLifestyleChanged();
    partial void OncodeIDChanging(int value);
    partial void OncodeIDChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OnvehicleSpecificChanging(bool value);
    partial void OnvehicleSpecificChanged();
    #endregion
		
		public Categories()
		{
			this._CatParts = new EntitySet<CatParts>(new Action<CatParts>(this.attach_CatParts), new Action<CatParts>(this.detach_CatParts));
			this._Lifestyle_Trailers = new EntitySet<Lifestyle_Trailer>(new Action<Lifestyle_Trailer>(this.attach_Lifestyle_Trailers), new Action<Lifestyle_Trailer>(this.detach_Lifestyle_Trailers));
			this._ContentBridges = new EntitySet<ContentBridge>(new Action<ContentBridge>(this.attach_ContentBridges), new Action<ContentBridge>(this.detach_ContentBridges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catTitle", DbType="VarChar(100)")]
		public string catTitle
		{
			get
			{
				return this._catTitle;
			}
			set
			{
				if ((this._catTitle != value))
				{
					this.OncatTitleChanging(value);
					this.SendPropertyChanging();
					this._catTitle = value;
					this.SendPropertyChanged("catTitle");
					this.OncatTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortDesc", DbType="VarChar(255)")]
		public string shortDesc
		{
			get
			{
				return this._shortDesc;
			}
			set
			{
				if ((this._shortDesc != value))
				{
					this.OnshortDescChanging(value);
					this.SendPropertyChanging();
					this._shortDesc = value;
					this.SendPropertyChanged("shortDesc");
					this.OnshortDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longDesc", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string longDesc
		{
			get
			{
				return this._longDesc;
			}
			set
			{
				if ((this._longDesc != value))
				{
					this.OnlongDescChanging(value);
					this.SendPropertyChanging();
					this._longDesc = value;
					this.SendPropertyChanged("longDesc");
					this.OnlongDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(255)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLifestyle", DbType="Int NOT NULL")]
		public int isLifestyle
		{
			get
			{
				return this._isLifestyle;
			}
			set
			{
				if ((this._isLifestyle != value))
				{
					this.OnisLifestyleChanging(value);
					this.SendPropertyChanging();
					this._isLifestyle = value;
					this.SendPropertyChanged("isLifestyle");
					this.OnisLifestyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codeID", DbType="Int NOT NULL")]
		public int codeID
		{
			get
			{
				return this._codeID;
			}
			set
			{
				if ((this._codeID != value))
				{
					this.OncodeIDChanging(value);
					this.SendPropertyChanging();
					this._codeID = value;
					this.SendPropertyChanged("codeID");
					this.OncodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleSpecific", DbType="Bit NOT NULL")]
		public bool vehicleSpecific
		{
			get
			{
				return this._vehicleSpecific;
			}
			set
			{
				if ((this._vehicleSpecific != value))
				{
					this.OnvehicleSpecificChanging(value);
					this.SendPropertyChanging();
					this._vehicleSpecific = value;
					this.SendPropertyChanged("vehicleSpecific");
					this.OnvehicleSpecificChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_CatParts", Storage="_CatParts", ThisKey="catID", OtherKey="catID")]
		public EntitySet<CatParts> CatParts
		{
			get
			{
				return this._CatParts;
			}
			set
			{
				this._CatParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Lifestyle_Trailer", Storage="_Lifestyle_Trailers", ThisKey="catID", OtherKey="catID")]
		public EntitySet<Lifestyle_Trailer> Lifestyle_Trailers
		{
			get
			{
				return this._Lifestyle_Trailers;
			}
			set
			{
				this._Lifestyle_Trailers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_ContentBridge", Storage="_ContentBridges", ThisKey="catID", OtherKey="catID")]
		internal EntitySet<ContentBridge> ContentBridges
		{
			get
			{
				return this._ContentBridges;
			}
			set
			{
				this._ContentBridges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CatParts(CatParts entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_CatParts(CatParts entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
		
		private void attach_Lifestyle_Trailers(Lifestyle_Trailer entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Lifestyle_Trailers(Lifestyle_Trailer entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
		
		private void attach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_ContentBridges(ContentBridge entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.YearMake")]
	public partial class YearMake : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ymID;
		
		private System.Nullable<int> _yearID;
		
		private int _makeID;
		
		private EntityRef<Make> _Make;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnymIDChanging(int value);
    partial void OnymIDChanged();
    partial void OnyearIDChanging(System.Nullable<int> value);
    partial void OnyearIDChanged();
    partial void OnmakeIDChanging(int value);
    partial void OnmakeIDChanged();
    #endregion
		
		public YearMake()
		{
			this._Make = default(EntityRef<Make>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ymID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ymID
		{
			get
			{
				return this._ymID;
			}
			set
			{
				if ((this._ymID != value))
				{
					this.OnymIDChanging(value);
					this.SendPropertyChanging();
					this._ymID = value;
					this.SendPropertyChanged("ymID");
					this.OnymIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearID", DbType="Int")]
		public System.Nullable<int> yearID
		{
			get
			{
				return this._yearID;
			}
			set
			{
				if ((this._yearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnyearIDChanging(value);
					this.SendPropertyChanging();
					this._yearID = value;
					this.SendPropertyChanged("yearID");
					this.OnyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeID", DbType="Int NOT NULL")]
		public int makeID
		{
			get
			{
				return this._makeID;
			}
			set
			{
				if ((this._makeID != value))
				{
					if (this._Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmakeIDChanging(value);
					this.SendPropertyChanging();
					this._makeID = value;
					this.SendPropertyChanged("makeID");
					this.OnmakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_YearMake", Storage="_Make", ThisKey="makeID", OtherKey="makeID", IsForeignKey=true)]
		public Make Make
		{
			get
			{
				return this._Make.Entity;
			}
			set
			{
				Make previousValue = this._Make.Entity;
				if (((previousValue != value) 
							|| (this._Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Make.Entity = null;
						previousValue.YearMakes.Remove(this);
					}
					this._Make.Entity = value;
					if ((value != null))
					{
						value.YearMakes.Add(this);
						this._makeID = value.makeID;
					}
					else
					{
						this._makeID = default(int);
					}
					this.SendPropertyChanged("Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_YearMake", Storage="_Year", ThisKey="yearID", OtherKey="yearID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.YearMakes.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.YearMakes.Add(this);
						this._yearID = value.yearID;
					}
					else
					{
						this._yearID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MakeModel")]
	public partial class MakeModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mmID;
		
		private int _makeID;
		
		private int _modelID;
		
		private EntityRef<Make> _Make;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmmIDChanging(int value);
    partial void OnmmIDChanged();
    partial void OnmakeIDChanging(int value);
    partial void OnmakeIDChanged();
    partial void OnmodelIDChanging(int value);
    partial void OnmodelIDChanged();
    #endregion
		
		public MakeModel()
		{
			this._Make = default(EntityRef<Make>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mmID
		{
			get
			{
				return this._mmID;
			}
			set
			{
				if ((this._mmID != value))
				{
					this.OnmmIDChanging(value);
					this.SendPropertyChanging();
					this._mmID = value;
					this.SendPropertyChanged("mmID");
					this.OnmmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeID", DbType="Int NOT NULL")]
		public int makeID
		{
			get
			{
				return this._makeID;
			}
			set
			{
				if ((this._makeID != value))
				{
					if (this._Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmakeIDChanging(value);
					this.SendPropertyChanging();
					this._makeID = value;
					this.SendPropertyChanged("makeID");
					this.OnmakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelID", DbType="Int NOT NULL")]
		public int modelID
		{
			get
			{
				return this._modelID;
			}
			set
			{
				if ((this._modelID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodelIDChanging(value);
					this.SendPropertyChanging();
					this._modelID = value;
					this.SendPropertyChanged("modelID");
					this.OnmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_MakeModel", Storage="_Make", ThisKey="makeID", OtherKey="makeID", IsForeignKey=true)]
		public Make Make
		{
			get
			{
				return this._Make.Entity;
			}
			set
			{
				Make previousValue = this._Make.Entity;
				if (((previousValue != value) 
							|| (this._Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Make.Entity = null;
						previousValue.MakeModels.Remove(this);
					}
					this._Make.Entity = value;
					if ((value != null))
					{
						value.MakeModels.Add(this);
						this._makeID = value.makeID;
					}
					else
					{
						this._makeID = default(int);
					}
					this.SendPropertyChanged("Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_MakeModel", Storage="_Model", ThisKey="modelID", OtherKey="modelID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.MakeModels.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.MakeModels.Add(this);
						this._modelID = value.modelID;
					}
					else
					{
						this._modelID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelStyle")]
	public partial class ModelStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _msID;
		
		private int _modelID;
		
		private int _styleID;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<Style> _Style;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmsIDChanging(int value);
    partial void OnmsIDChanged();
    partial void OnmodelIDChanging(int value);
    partial void OnmodelIDChanged();
    partial void OnstyleIDChanging(int value);
    partial void OnstyleIDChanged();
    #endregion
		
		public ModelStyle()
		{
			this._Model = default(EntityRef<Model>);
			this._Style = default(EntityRef<Style>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int msID
		{
			get
			{
				return this._msID;
			}
			set
			{
				if ((this._msID != value))
				{
					this.OnmsIDChanging(value);
					this.SendPropertyChanging();
					this._msID = value;
					this.SendPropertyChanged("msID");
					this.OnmsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelID", DbType="Int NOT NULL")]
		public int modelID
		{
			get
			{
				return this._modelID;
			}
			set
			{
				if ((this._modelID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodelIDChanging(value);
					this.SendPropertyChanging();
					this._modelID = value;
					this.SendPropertyChanged("modelID");
					this.OnmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_styleID", DbType="Int NOT NULL")]
		public int styleID
		{
			get
			{
				return this._styleID;
			}
			set
			{
				if ((this._styleID != value))
				{
					if (this._Style.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstyleIDChanging(value);
					this.SendPropertyChanging();
					this._styleID = value;
					this.SendPropertyChanged("styleID");
					this.OnstyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModelStyle", Storage="_Model", ThisKey="modelID", OtherKey="modelID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModelStyles.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModelStyles.Add(this);
						this._modelID = value.modelID;
					}
					else
					{
						this._modelID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Style_ModelStyle", Storage="_Style", ThisKey="styleID", OtherKey="styleID", IsForeignKey=true)]
		public Style Style
		{
			get
			{
				return this._Style.Entity;
			}
			set
			{
				Style previousValue = this._Style.Entity;
				if (((previousValue != value) 
							|| (this._Style.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Style.Entity = null;
						previousValue.ModelStyles.Remove(this);
					}
					this._Style.Entity = value;
					if ((value != null))
					{
						value.ModelStyles.Add(this);
						this._styleID = value.styleID;
					}
					else
					{
						this._styleID = default(int);
					}
					this.SendPropertyChanged("Style");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartAttribute")]
	public partial class PartAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pAttrID;
		
		private int _partID;
		
		private string _value;
		
		private string _field;
		
		private int _sort;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpAttrIDChanging(int value);
    partial void OnpAttrIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnfieldChanging(string value);
    partial void OnfieldChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public PartAttribute()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pAttrID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pAttrID
		{
			get
			{
				return this._pAttrID;
			}
			set
			{
				if ((this._pAttrID != value))
				{
					this.OnpAttrIDChanging(value);
					this.SendPropertyChanging();
					this._pAttrID = value;
					this.SendPropertyChanged("pAttrID");
					this.OnpAttrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(255)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_field", DbType="VarChar(255)")]
		public string field
		{
			get
			{
				return this._field;
			}
			set
			{
				if ((this._field != value))
				{
					this.OnfieldChanging(value);
					this.SendPropertyChanging();
					this._field = value;
					this.SendPropertyChanged("field");
					this.OnfieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartAttribute", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartAttributes.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartAttributes.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehiclePartAttribute")]
	public partial class VehiclePartAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vpAttrID;
		
		private int _vPartID;
		
		private string _value;
		
		private string _field;
		
		private int _sort;
		
		private EntityRef<VehiclePart> _VehiclePart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvpAttrIDChanging(int value);
    partial void OnvpAttrIDChanged();
    partial void OnvPartIDChanging(int value);
    partial void OnvPartIDChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnfieldChanging(string value);
    partial void OnfieldChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public VehiclePartAttribute()
		{
			this._VehiclePart = default(EntityRef<VehiclePart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vpAttrID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vpAttrID
		{
			get
			{
				return this._vpAttrID;
			}
			set
			{
				if ((this._vpAttrID != value))
				{
					this.OnvpAttrIDChanging(value);
					this.SendPropertyChanging();
					this._vpAttrID = value;
					this.SendPropertyChanged("vpAttrID");
					this.OnvpAttrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vPartID", DbType="Int NOT NULL")]
		public int vPartID
		{
			get
			{
				return this._vPartID;
			}
			set
			{
				if ((this._vPartID != value))
				{
					if (this._VehiclePart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvPartIDChanging(value);
					this.SendPropertyChanging();
					this._vPartID = value;
					this.SendPropertyChanged("vPartID");
					this.OnvPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(255)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_field", DbType="VarChar(255)")]
		public string field
		{
			get
			{
				return this._field;
			}
			set
			{
				if ((this._field != value))
				{
					this.OnfieldChanging(value);
					this.SendPropertyChanging();
					this._field = value;
					this.SendPropertyChanged("field");
					this.OnfieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehiclePart_VehiclePartAttribute", Storage="_VehiclePart", ThisKey="vPartID", OtherKey="vPartID", IsForeignKey=true)]
		internal VehiclePart VehiclePart
		{
			get
			{
				return this._VehiclePart.Entity;
			}
			set
			{
				VehiclePart previousValue = this._VehiclePart.Entity;
				if (((previousValue != value) 
							|| (this._VehiclePart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehiclePart.Entity = null;
						previousValue.VehiclePartAttributes.Remove(this);
					}
					this._VehiclePart.Entity = value;
					if ((value != null))
					{
						value.VehiclePartAttributes.Add(this);
						this._vPartID = value.vPartID;
					}
					else
					{
						this._vPartID = default(int);
					}
					this.SendPropertyChanged("VehiclePart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trailer")]
	public partial class Trailer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _trailerID;
		
		private string _image;
		
		private string _name;
		
		private System.Nullable<int> _TW;
		
		private System.Nullable<int> _GTW;
		
		private string _hitchClass;
		
		private string _shortDesc;
		
		private string _message;
		
		private EntitySet<Lifestyle_Trailer> _Lifestyle_Trailers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrailerIDChanging(int value);
    partial void OntrailerIDChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnTWChanging(System.Nullable<int> value);
    partial void OnTWChanged();
    partial void OnGTWChanging(System.Nullable<int> value);
    partial void OnGTWChanged();
    partial void OnhitchClassChanging(string value);
    partial void OnhitchClassChanged();
    partial void OnshortDescChanging(string value);
    partial void OnshortDescChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public Trailer()
		{
			this._Lifestyle_Trailers = new EntitySet<Lifestyle_Trailer>(new Action<Lifestyle_Trailer>(this.attach_Lifestyle_Trailers), new Action<Lifestyle_Trailer>(this.detach_Lifestyle_Trailers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trailerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int trailerID
		{
			get
			{
				return this._trailerID;
			}
			set
			{
				if ((this._trailerID != value))
				{
					this.OntrailerIDChanging(value);
					this.SendPropertyChanging();
					this._trailerID = value;
					this.SendPropertyChanged("trailerID");
					this.OntrailerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(255)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TW", DbType="Int")]
		public System.Nullable<int> TW
		{
			get
			{
				return this._TW;
			}
			set
			{
				if ((this._TW != value))
				{
					this.OnTWChanging(value);
					this.SendPropertyChanging();
					this._TW = value;
					this.SendPropertyChanged("TW");
					this.OnTWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GTW", DbType="Int")]
		public System.Nullable<int> GTW
		{
			get
			{
				return this._GTW;
			}
			set
			{
				if ((this._GTW != value))
				{
					this.OnGTWChanging(value);
					this.SendPropertyChanging();
					this._GTW = value;
					this.SendPropertyChanged("GTW");
					this.OnGTWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hitchClass", DbType="VarChar(255)")]
		public string hitchClass
		{
			get
			{
				return this._hitchClass;
			}
			set
			{
				if ((this._hitchClass != value))
				{
					this.OnhitchClassChanging(value);
					this.SendPropertyChanging();
					this._hitchClass = value;
					this.SendPropertyChanged("hitchClass");
					this.OnhitchClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortDesc", DbType="VarChar(1000)")]
		public string shortDesc
		{
			get
			{
				return this._shortDesc;
			}
			set
			{
				if ((this._shortDesc != value))
				{
					this.OnshortDescChanging(value);
					this.SendPropertyChanging();
					this._shortDesc = value;
					this.SendPropertyChanged("shortDesc");
					this.OnshortDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(1000)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trailer_Lifestyle_Trailer", Storage="_Lifestyle_Trailers", ThisKey="trailerID", OtherKey="trailerID")]
		internal EntitySet<Lifestyle_Trailer> Lifestyle_Trailers
		{
			get
			{
				return this._Lifestyle_Trailers;
			}
			set
			{
				this._Lifestyle_Trailers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lifestyle_Trailers(Lifestyle_Trailer entity)
		{
			this.SendPropertyChanging();
			entity.Trailer = this;
		}
		
		private void detach_Lifestyle_Trailers(Lifestyle_Trailer entity)
		{
			this.SendPropertyChanging();
			entity.Trailer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lifestyle_Trailer")]
	public partial class Lifestyle_Trailer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _lifestyleTrailerID;
		
		private int _catID;
		
		private int _trailerID;
		
		private EntityRef<Categories> _Categories;
		
		private EntityRef<Trailer> _Trailer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlifestyleTrailerIDChanging(int value);
    partial void OnlifestyleTrailerIDChanged();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OntrailerIDChanging(int value);
    partial void OntrailerIDChanged();
    #endregion
		
		public Lifestyle_Trailer()
		{
			this._Categories = default(EntityRef<Categories>);
			this._Trailer = default(EntityRef<Trailer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lifestyleTrailerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int lifestyleTrailerID
		{
			get
			{
				return this._lifestyleTrailerID;
			}
			set
			{
				if ((this._lifestyleTrailerID != value))
				{
					this.OnlifestyleTrailerIDChanging(value);
					this.SendPropertyChanging();
					this._lifestyleTrailerID = value;
					this.SendPropertyChanged("lifestyleTrailerID");
					this.OnlifestyleTrailerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int NOT NULL")]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trailerID", DbType="Int NOT NULL")]
		public int trailerID
		{
			get
			{
				return this._trailerID;
			}
			set
			{
				if ((this._trailerID != value))
				{
					if (this._Trailer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntrailerIDChanging(value);
					this.SendPropertyChanging();
					this._trailerID = value;
					this.SendPropertyChanged("trailerID");
					this.OntrailerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Lifestyle_Trailer", Storage="_Categories", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Lifestyle_Trailers.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Lifestyle_Trailers.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trailer_Lifestyle_Trailer", Storage="_Trailer", ThisKey="trailerID", OtherKey="trailerID", IsForeignKey=true)]
		public Trailer Trailer
		{
			get
			{
				return this._Trailer.Entity;
			}
			set
			{
				Trailer previousValue = this._Trailer.Entity;
				if (((previousValue != value) 
							|| (this._Trailer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trailer.Entity = null;
						previousValue.Lifestyle_Trailers.Remove(this);
					}
					this._Trailer.Entity = value;
					if ((value != null))
					{
						value.Lifestyle_Trailers.Add(this);
						this._trailerID = value.trailerID;
					}
					else
					{
						this._trailerID = default(int);
					}
					this.SendPropertyChanged("Trailer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _priceID;
		
		private int _partID;
		
		private string _priceType;
		
		private decimal _price1;
		
		private bool _enforced;
		
		private System.DateTime _dateModified;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpriceIDChanging(int value);
    partial void OnpriceIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnpriceTypeChanging(string value);
    partial void OnpriceTypeChanged();
    partial void Onprice1Changing(decimal value);
    partial void Onprice1Changed();
    partial void OnenforcedChanging(bool value);
    partial void OnenforcedChanged();
    partial void OndateModifiedChanging(System.DateTime value);
    partial void OndateModifiedChanged();
    #endregion
		
		public Price()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int priceID
		{
			get
			{
				return this._priceID;
			}
			set
			{
				if ((this._priceID != value))
				{
					this.OnpriceIDChanging(value);
					this.SendPropertyChanging();
					this._priceID = value;
					this.SendPropertyChanged("priceID");
					this.OnpriceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceType", DbType="VarChar(255)")]
		public string priceType
		{
			get
			{
				return this._priceType;
			}
			set
			{
				if ((this._priceType != value))
				{
					this.OnpriceTypeChanging(value);
					this.SendPropertyChanging();
					this._priceType = value;
					this.SendPropertyChanged("priceType");
					this.OnpriceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="price", Storage="_price1", DbType="Money NOT NULL")]
		public decimal price1
		{
			get
			{
				return this._price1;
			}
			set
			{
				if ((this._price1 != value))
				{
					this.Onprice1Changing(value);
					this.SendPropertyChanging();
					this._price1 = value;
					this.SendPropertyChanged("price1");
					this.Onprice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enforced")]
		public bool enforced
		{
			get
			{
				return this._enforced;
			}
			set
			{
				if ((this._enforced != value))
				{
					this.OnenforcedChanging(value);
					this.SendPropertyChanging();
					this._enforced = value;
					this.SendPropertyChanged("enforced");
					this.OnenforcedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModified", DbType="datetime")]
		public System.DateTime dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this.OndateModifiedChanging(value);
					this.SendPropertyChanging();
					this._dateModified = value;
					this.SendPropertyChanged("dateModified");
					this.OndateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Price", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reviewID;
		
		private System.Nullable<int> _partID;
		
		private int _rating;
		
		private string _subject;
		
		private string _review_text;
		
		private string _name;
		
		private string _email;
		
		private bool _active;
		
		private bool _approved;
		
		private System.DateTime _createdDate;
		
		private int _cust_id;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreviewIDChanging(int value);
    partial void OnreviewIDChanged();
    partial void OnpartIDChanging(System.Nullable<int> value);
    partial void OnpartIDChanged();
    partial void OnratingChanging(int value);
    partial void OnratingChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void Onreview_textChanging(string value);
    partial void Onreview_textChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnapprovedChanging(bool value);
    partial void OnapprovedChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    #endregion
		
		public Review()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reviewID
		{
			get
			{
				return this._reviewID;
			}
			set
			{
				if ((this._reviewID != value))
				{
					this.OnreviewIDChanging(value);
					this.SendPropertyChanging();
					this._reviewID = value;
					this.SendPropertyChanged("reviewID");
					this.OnreviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int")]
		public System.Nullable<int> partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int NOT NULL")]
		public int rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(255)")]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_review_text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string review_text
		{
			get
			{
				return this._review_text;
			}
			set
			{
				if ((this._review_text != value))
				{
					this.Onreview_textChanging(value);
					this.SendPropertyChanging();
					this._review_text = value;
					this.SendPropertyChanged("review_text");
					this.Onreview_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(500)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approved", DbType="Bit NOT NULL")]
		public bool approved
		{
			get
			{
				return this._approved;
			}
			set
			{
				if ((this._approved != value))
				{
					this.OnapprovedChanging(value);
					this.SendPropertyChanging();
					this._approved = value;
					this.SendPropertyChanged("approved");
					this.OnapprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id", DbType="Int NOT NULL")]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Review", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentType")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cTypeID;
		
		private string _type;
		
		private bool _allowHTML;
		
		private EntitySet<Content> _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncTypeIDChanging(int value);
    partial void OncTypeIDChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnallowHTMLChanging(bool value);
    partial void OnallowHTMLChanged();
    #endregion
		
		public ContentType()
		{
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cTypeID
		{
			get
			{
				return this._cTypeID;
			}
			set
			{
				if ((this._cTypeID != value))
				{
					this.OncTypeIDChanging(value);
					this.SendPropertyChanging();
					this._cTypeID = value;
					this.SendPropertyChanged("cTypeID");
					this.OncTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowHTML", DbType="Bit NOT NULL")]
		public bool allowHTML
		{
			get
			{
				return this._allowHTML;
			}
			set
			{
				if ((this._allowHTML != value))
				{
					this.OnallowHTMLChanging(value);
					this.SendPropertyChanging();
					this._allowHTML = value;
					this.SendPropertyChanged("allowHTML");
					this.OnallowHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Content", Storage="_Contents", ThisKey="cTypeID", OtherKey="cTypeID")]
		internal EntitySet<Content> Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartImages")]
	public partial class PartImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _imageID;
		
		private int _sizeID;
		
		private char _sort;
		
		private string _path;
		
		private int _height;
		
		private int _width;
		
		private int _partID;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<PartImageSize> _PartImageSize;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnimageIDChanging(int value);
    partial void OnimageIDChanged();
    partial void OnsizeIDChanging(int value);
    partial void OnsizeIDChanged();
    partial void OnsortChanging(char value);
    partial void OnsortChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void OnheightChanging(int value);
    partial void OnheightChanged();
    partial void OnwidthChanging(int value);
    partial void OnwidthChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    #endregion
		
		public PartImage()
		{
			this._Part = default(EntityRef<Part>);
			this._PartImageSize = default(EntityRef<PartImageSize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int imageID
		{
			get
			{
				return this._imageID;
			}
			set
			{
				if ((this._imageID != value))
				{
					this.OnimageIDChanging(value);
					this.SendPropertyChanging();
					this._imageID = value;
					this.SendPropertyChanged("imageID");
					this.OnimageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sizeID", DbType="Int NOT NULL")]
		public int sizeID
		{
			get
			{
				return this._sizeID;
			}
			set
			{
				if ((this._sizeID != value))
				{
					if (this._PartImageSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsizeIDChanging(value);
					this.SendPropertyChanging();
					this._sizeID = value;
					this.SendPropertyChanged("sizeID");
					this.OnsizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="NChar(1) NOT NULL")]
		public char sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Int NOT NULL")]
		public int height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int NOT NULL")]
		public int width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartImage", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartImages.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartImages.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartImageSize_PartImage", Storage="_PartImageSize", ThisKey="sizeID", OtherKey="sizeID", IsForeignKey=true)]
		public PartImageSize PartImageSize
		{
			get
			{
				return this._PartImageSize.Entity;
			}
			set
			{
				PartImageSize previousValue = this._PartImageSize.Entity;
				if (((previousValue != value) 
							|| (this._PartImageSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartImageSize.Entity = null;
						previousValue.PartImages.Remove(this);
					}
					this._PartImageSize.Entity = value;
					if ((value != null))
					{
						value.PartImages.Add(this);
						this._sizeID = value.sizeID;
					}
					else
					{
						this._sizeID = default(int);
					}
					this.SendPropertyChanged("PartImageSize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicle")]
	public partial class Vehicles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicleID;
		
		private int _yearID;
		
		private int _makeID;
		
		private int _modelID;
		
		private int _styleID;
		
		private System.DateTime _dateAdded;
		
		private EntitySet<VehiclePart> _VehicleParts;
		
		private EntityRef<Make> _Make;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<Style> _Style;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleIDChanging(int value);
    partial void OnvehicleIDChanged();
    partial void OnyearIDChanging(int value);
    partial void OnyearIDChanged();
    partial void OnmakeIDChanging(int value);
    partial void OnmakeIDChanged();
    partial void OnmodelIDChanging(int value);
    partial void OnmodelIDChanged();
    partial void OnstyleIDChanging(int value);
    partial void OnstyleIDChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    #endregion
		
		public Vehicles()
		{
			this._VehicleParts = new EntitySet<VehiclePart>(new Action<VehiclePart>(this.attach_VehicleParts), new Action<VehiclePart>(this.detach_VehicleParts));
			this._Make = default(EntityRef<Make>);
			this._Model = default(EntityRef<Model>);
			this._Style = default(EntityRef<Style>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vehicleID
		{
			get
			{
				return this._vehicleID;
			}
			set
			{
				if ((this._vehicleID != value))
				{
					this.OnvehicleIDChanging(value);
					this.SendPropertyChanging();
					this._vehicleID = value;
					this.SendPropertyChanged("vehicleID");
					this.OnvehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearID", DbType="Int NOT NULL")]
		public int yearID
		{
			get
			{
				return this._yearID;
			}
			set
			{
				if ((this._yearID != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnyearIDChanging(value);
					this.SendPropertyChanging();
					this._yearID = value;
					this.SendPropertyChanged("yearID");
					this.OnyearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeID", DbType="Int NOT NULL")]
		public int makeID
		{
			get
			{
				return this._makeID;
			}
			set
			{
				if ((this._makeID != value))
				{
					if (this._Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmakeIDChanging(value);
					this.SendPropertyChanging();
					this._makeID = value;
					this.SendPropertyChanged("makeID");
					this.OnmakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelID", DbType="Int NOT NULL")]
		public int modelID
		{
			get
			{
				return this._modelID;
			}
			set
			{
				if ((this._modelID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmodelIDChanging(value);
					this.SendPropertyChanging();
					this._modelID = value;
					this.SendPropertyChanged("modelID");
					this.OnmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_styleID", DbType="Int NOT NULL")]
		public int styleID
		{
			get
			{
				return this._styleID;
			}
			set
			{
				if ((this._styleID != value))
				{
					if (this._Style.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstyleIDChanging(value);
					this.SendPropertyChanging();
					this._styleID = value;
					this.SendPropertyChanged("styleID");
					this.OnstyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicles_VehiclePart", Storage="_VehicleParts", ThisKey="vehicleID", OtherKey="vehicleID")]
		internal EntitySet<VehiclePart> VehicleParts
		{
			get
			{
				return this._VehicleParts;
			}
			set
			{
				this._VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_Vehicles", Storage="_Make", ThisKey="makeID", OtherKey="makeID", IsForeignKey=true)]
		public Make Make
		{
			get
			{
				return this._Make.Entity;
			}
			set
			{
				Make previousValue = this._Make.Entity;
				if (((previousValue != value) 
							|| (this._Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Make.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Make.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._makeID = value.makeID;
					}
					else
					{
						this._makeID = default(int);
					}
					this.SendPropertyChanged("Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Vehicles", Storage="_Model", ThisKey="modelID", OtherKey="modelID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._modelID = value.modelID;
					}
					else
					{
						this._modelID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Style_Vehicles", Storage="_Style", ThisKey="styleID", OtherKey="styleID", IsForeignKey=true)]
		public Style Style
		{
			get
			{
				return this._Style.Entity;
			}
			set
			{
				Style previousValue = this._Style.Entity;
				if (((previousValue != value) 
							|| (this._Style.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Style.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Style.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._styleID = value.styleID;
					}
					else
					{
						this._styleID = default(int);
					}
					this.SendPropertyChanged("Style");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_Vehicles", Storage="_Year", ThisKey="yearID", OtherKey="yearID", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.Vehicles.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.Vehicles.Add(this);
						this._yearID = value.yearID;
					}
					else
					{
						this._yearID = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Vehicles = this;
		}
		
		private void detach_VehicleParts(VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.Vehicles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehiclePart")]
	public partial class VehiclePart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vPartID;
		
		private int _vehicleID;
		
		private int _partID;
		
		private string _drilling;
		
		private string _exposed;
		
		private System.Nullable<int> _installTime;
		
		private EntitySet<VehiclePartAttribute> _VehiclePartAttributes;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Vehicles> _Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvPartIDChanging(int value);
    partial void OnvPartIDChanged();
    partial void OnvehicleIDChanging(int value);
    partial void OnvehicleIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OndrillingChanging(string value);
    partial void OndrillingChanged();
    partial void OnexposedChanging(string value);
    partial void OnexposedChanged();
    partial void OninstallTimeChanging(System.Nullable<int> value);
    partial void OninstallTimeChanged();
    #endregion
		
		public VehiclePart()
		{
			this._VehiclePartAttributes = new EntitySet<VehiclePartAttribute>(new Action<VehiclePartAttribute>(this.attach_VehiclePartAttributes), new Action<VehiclePartAttribute>(this.detach_VehiclePartAttributes));
			this._Part = default(EntityRef<Part>);
			this._Vehicle = default(EntityRef<Vehicles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vPartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vPartID
		{
			get
			{
				return this._vPartID;
			}
			set
			{
				if ((this._vPartID != value))
				{
					this.OnvPartIDChanging(value);
					this.SendPropertyChanging();
					this._vPartID = value;
					this.SendPropertyChanged("vPartID");
					this.OnvPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleID", DbType="Int NOT NULL")]
		public int vehicleID
		{
			get
			{
				return this._vehicleID;
			}
			set
			{
				if ((this._vehicleID != value))
				{
					if (this._Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehicleIDChanging(value);
					this.SendPropertyChanging();
					this._vehicleID = value;
					this.SendPropertyChanged("vehicleID");
					this.OnvehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_drilling", DbType="VarChar(100)")]
		public string drilling
		{
			get
			{
				return this._drilling;
			}
			set
			{
				if ((this._drilling != value))
				{
					this.OndrillingChanging(value);
					this.SendPropertyChanging();
					this._drilling = value;
					this.SendPropertyChanged("drilling");
					this.OndrillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exposed", DbType="VarChar(100)")]
		public string exposed
		{
			get
			{
				return this._exposed;
			}
			set
			{
				if ((this._exposed != value))
				{
					this.OnexposedChanging(value);
					this.SendPropertyChanging();
					this._exposed = value;
					this.SendPropertyChanged("exposed");
					this.OnexposedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_installTime", DbType="Int")]
		public System.Nullable<int> installTime
		{
			get
			{
				return this._installTime;
			}
			set
			{
				if ((this._installTime != value))
				{
					this.OninstallTimeChanging(value);
					this.SendPropertyChanging();
					this._installTime = value;
					this.SendPropertyChanged("installTime");
					this.OninstallTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehiclePart_VehiclePartAttribute", Storage="_VehiclePartAttributes", ThisKey="vPartID", OtherKey="vPartID")]
		public EntitySet<VehiclePartAttribute> VehiclePartAttributes
		{
			get
			{
				return this._VehiclePartAttributes;
			}
			set
			{
				this._VehiclePartAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_VehiclePart", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.VehicleParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.VehicleParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicles_VehiclePart", Storage="_Vehicle", ThisKey="vehicleID", OtherKey="vehicleID", IsForeignKey=true)]
		public Vehicles Vehicles
		{
			get
			{
				return this._Vehicle.Entity;
			}
			set
			{
				Vehicles previousValue = this._Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicle.Entity = null;
						previousValue.VehicleParts.Remove(this);
					}
					this._Vehicle.Entity = value;
					if ((value != null))
					{
						value.VehicleParts.Add(this);
						this._vehicleID = value.vehicleID;
					}
					else
					{
						this._vehicleID = default(int);
					}
					this.SendPropertyChanged("Vehicles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehiclePartAttributes(VehiclePartAttribute entity)
		{
			this.SendPropertyChanging();
			entity.VehiclePart = this;
		}
		
		private void detach_VehiclePartAttributes(VehiclePartAttribute entity)
		{
			this.SendPropertyChanging();
			entity.VehiclePart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelatedPart")]
	public partial class RelatedPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _relPartID;
		
		private int _partID;
		
		private long _relatedID;
		
		private int _rTypeID;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrelPartIDChanging(int value);
    partial void OnrelPartIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnrelatedIDChanging(long value);
    partial void OnrelatedIDChanged();
    partial void OnrTypeIDChanging(int value);
    partial void OnrTypeIDChanged();
    #endregion
		
		public RelatedPart()
		{
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relPartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int relPartID
		{
			get
			{
				return this._relPartID;
			}
			set
			{
				if ((this._relPartID != value))
				{
					this.OnrelPartIDChanging(value);
					this.SendPropertyChanging();
					this._relPartID = value;
					this.SendPropertyChanged("relPartID");
					this.OnrelPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relatedID", DbType="BigInt NOT NULL")]
		public long relatedID
		{
			get
			{
				return this._relatedID;
			}
			set
			{
				if ((this._relatedID != value))
				{
					this.OnrelatedIDChanging(value);
					this.SendPropertyChanging();
					this._relatedID = value;
					this.SendPropertyChanged("relatedID");
					this.OnrelatedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rTypeID", DbType="Int NOT NULL")]
		public int rTypeID
		{
			get
			{
				return this._rTypeID;
			}
			set
			{
				if ((this._rTypeID != value))
				{
					this.OnrTypeIDChanging(value);
					this.SendPropertyChanging();
					this._rTypeID = value;
					this.SendPropertyChanged("rTypeID");
					this.OnrTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_RelatedPart", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.RelatedParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.RelatedParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.videoType")]
	public partial class videoType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vTypeID;
		
		private string _name;
		
		private string _icon;
		
		private EntitySet<PartVideo> _PartVideos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvTypeIDChanging(int value);
    partial void OnvTypeIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OniconChanging(string value);
    partial void OniconChanged();
    #endregion
		
		public videoType()
		{
			this._PartVideos = new EntitySet<PartVideo>(new Action<PartVideo>(this.attach_PartVideos), new Action<PartVideo>(this.detach_PartVideos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vTypeID
		{
			get
			{
				return this._vTypeID;
			}
			set
			{
				if ((this._vTypeID != value))
				{
					this.OnvTypeIDChanging(value);
					this.SendPropertyChanging();
					this._vTypeID = value;
					this.SendPropertyChanged("vTypeID");
					this.OnvTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icon", DbType="VarChar(255)")]
		public string icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="videoType_PartVideo", Storage="_PartVideos", ThisKey="vTypeID", OtherKey="vTypeID")]
		internal EntitySet<PartVideo> PartVideos
		{
			get
			{
				return this._PartVideos;
			}
			set
			{
				this._PartVideos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartVideos(PartVideo entity)
		{
			this.SendPropertyChanging();
			entity.videoType = this;
		}
		
		private void detach_PartVideos(PartVideo entity)
		{
			this.SendPropertyChanging();
			entity.videoType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartVideo")]
	public partial class PartVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pVideoID;
		
		private int _partID;
		
		private string _video;
		
		private int _vTypeID;
		
		private bool _isPrimary;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<videoType> _videoType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpVideoIDChanging(int value);
    partial void OnpVideoIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnvideoChanging(string value);
    partial void OnvideoChanged();
    partial void OnvTypeIDChanging(int value);
    partial void OnvTypeIDChanged();
    partial void OnisPrimaryChanging(bool value);
    partial void OnisPrimaryChanged();
    #endregion
		
		public PartVideo()
		{
			this._Part = default(EntityRef<Part>);
			this._videoType = default(EntityRef<videoType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pVideoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pVideoID
		{
			get
			{
				return this._pVideoID;
			}
			set
			{
				if ((this._pVideoID != value))
				{
					this.OnpVideoIDChanging(value);
					this.SendPropertyChanging();
					this._pVideoID = value;
					this.SendPropertyChanged("pVideoID");
					this.OnpVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_video", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string video
		{
			get
			{
				return this._video;
			}
			set
			{
				if ((this._video != value))
				{
					this.OnvideoChanging(value);
					this.SendPropertyChanging();
					this._video = value;
					this.SendPropertyChanged("video");
					this.OnvideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vTypeID", DbType="Int NOT NULL")]
		public int vTypeID
		{
			get
			{
				return this._vTypeID;
			}
			set
			{
				if ((this._vTypeID != value))
				{
					if (this._videoType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvTypeIDChanging(value);
					this.SendPropertyChanging();
					this._vTypeID = value;
					this.SendPropertyChanged("vTypeID");
					this.OnvTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPrimary", DbType="Bit NOT NULL")]
		public bool isPrimary
		{
			get
			{
				return this._isPrimary;
			}
			set
			{
				if ((this._isPrimary != value))
				{
					this.OnisPrimaryChanging(value);
					this.SendPropertyChanging();
					this._isPrimary = value;
					this.SendPropertyChanged("isPrimary");
					this.OnisPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartVideo", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartVideos.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartVideos.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="videoType_PartVideo", Storage="_videoType", ThisKey="vTypeID", OtherKey="vTypeID", IsForeignKey=true)]
		public videoType videoType
		{
			get
			{
				return this._videoType.Entity;
			}
			set
			{
				videoType previousValue = this._videoType.Entity;
				if (((previousValue != value) 
							|| (this._videoType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._videoType.Entity = null;
						previousValue.PartVideos.Remove(this);
					}
					this._videoType.Entity = value;
					if ((value != null))
					{
						value.PartVideos.Add(this);
						this._vTypeID = value.vTypeID;
					}
					else
					{
						this._vTypeID = default(int);
					}
					this.SendPropertyChanged("videoType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentBridge")]
	public partial class ContentBridge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cBridgeID;
		
		private System.Nullable<int> _catID;
		
		private System.Nullable<int> _partID;
		
		private int _contentID;
		
		private EntityRef<Categories> _Categories;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncBridgeIDChanging(int value);
    partial void OncBridgeIDChanged();
    partial void OncatIDChanging(System.Nullable<int> value);
    partial void OncatIDChanged();
    partial void OnpartIDChanging(System.Nullable<int> value);
    partial void OnpartIDChanged();
    partial void OncontentIDChanging(int value);
    partial void OncontentIDChanged();
    #endregion
		
		public ContentBridge()
		{
			this._Categories = default(EntityRef<Categories>);
			this._Content = default(EntityRef<Content>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cBridgeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cBridgeID
		{
			get
			{
				return this._cBridgeID;
			}
			set
			{
				if ((this._cBridgeID != value))
				{
					this.OncBridgeIDChanging(value);
					this.SendPropertyChanging();
					this._cBridgeID = value;
					this.SendPropertyChanged("cBridgeID");
					this.OncBridgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int")]
		public System.Nullable<int> catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int")]
		public System.Nullable<int> partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contentID", DbType="Int NOT NULL")]
		public int contentID
		{
			get
			{
				return this._contentID;
			}
			set
			{
				if ((this._contentID != value))
				{
					if (this._Content.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontentIDChanging(value);
					this.SendPropertyChanging();
					this._contentID = value;
					this.SendPropertyChanged("contentID");
					this.OncontentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_ContentBridge", Storage="_Categories", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.ContentBridges.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.ContentBridges.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Content_ContentBridge", Storage="_Content", ThisKey="contentID", OtherKey="contentID", IsForeignKey=true)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.ContentBridges.Remove(this);
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.ContentBridges.Add(this);
						this._contentID = value.contentID;
					}
					else
					{
						this._contentID = default(int);
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_ContentBridge", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.ContentBridges.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.ContentBridges.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DealerTiers")]
	public partial class DealerTier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _tier;
		
		private int _sort;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OntierChanging(string value);
    partial void OntierChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public DealerTier()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tier", DbType="VarChar(255)")]
		public string tier
		{
			get
			{
				return this._tier;
			}
			set
			{
				if ((this._tier != value))
				{
					this.OntierChanging(value);
					this.SendPropertyChanging();
					this._tier = value;
					this.SendPropertyChanged("tier");
					this.OntierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DealerTier_Customer", Storage="_Customers", ThisKey="ID", OtherKey="tier")]
		internal EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.DealerTier = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.DealerTier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapIcons")]
	public partial class MapIcon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _tier;
		
		private int _dealer_type;
		
		private string _mapicon1;
		
		private string _mapiconshadow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OntierChanging(int value);
    partial void OntierChanged();
    partial void Ondealer_typeChanging(int value);
    partial void Ondealer_typeChanged();
    partial void Onmapicon1Changing(string value);
    partial void Onmapicon1Changed();
    partial void OnmapiconshadowChanging(string value);
    partial void OnmapiconshadowChanged();
    #endregion
		
		public MapIcon()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tier", DbType="Int NOT NULL")]
		public int tier
		{
			get
			{
				return this._tier;
			}
			set
			{
				if ((this._tier != value))
				{
					this.OntierChanging(value);
					this.SendPropertyChanging();
					this._tier = value;
					this.SendPropertyChanged("tier");
					this.OntierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dealer_type", DbType="Int NOT NULL")]
		public int dealer_type
		{
			get
			{
				return this._dealer_type;
			}
			set
			{
				if ((this._dealer_type != value))
				{
					this.Ondealer_typeChanging(value);
					this.SendPropertyChanging();
					this._dealer_type = value;
					this.SendPropertyChanged("dealer_type");
					this.Ondealer_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="mapicon", Storage="_mapicon1", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string mapicon1
		{
			get
			{
				return this._mapicon1;
			}
			set
			{
				if ((this._mapicon1 != value))
				{
					this.Onmapicon1Changing(value);
					this.SendPropertyChanging();
					this._mapicon1 = value;
					this.SendPropertyChanged("mapicon1");
					this.Onmapicon1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mapiconshadow", DbType="VarChar(300) NULL", CanBeNull=false)]
		public string mapiconshadow
		{
			get
			{
				return this._mapiconshadow;
			}
			set
			{
				if ((this._mapiconshadow != value))
				{
					this.OnmapiconshadowChanging(value);
					this.SendPropertyChanging();
					this._mapiconshadow = value;
					this.SendPropertyChanged("mapiconshadow");
					this.OnmapiconshadowChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImportProcess")]
	public partial class ImportProcess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _startTime;
		
		private System.Nullable<System.DateTime> _endTime;
		
		private int _partCount;
		
		private int _currentCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnstartTimeChanging(System.DateTime value);
    partial void OnstartTimeChanged();
    partial void OnendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendTimeChanged();
    partial void OnpartCountChanging(int value);
    partial void OnpartCountChanged();
    partial void OncurrentCountChanging(int value);
    partial void OncurrentCountChanged();
    #endregion
		
		public ImportProcess()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="DateTime NOT NULL")]
		public System.DateTime startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> endTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if ((this._endTime != value))
				{
					this.OnendTimeChanging(value);
					this.SendPropertyChanging();
					this._endTime = value;
					this.SendPropertyChanged("endTime");
					this.OnendTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="partcount", Storage="_partCount", DbType="int NOT NULL")]
		public int partCount
		{
			get
			{
				return this._partCount;
			}
			set
			{
				if ((this._partCount != value))
				{
					this.OnpartCountChanging(value);
					this.SendPropertyChanging();
					this._partCount = value;
					this.SendPropertyChanged("partCount");
					this.OnpartCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentCount", DbType="Int NOT NULL")]
		public int currentCount
		{
			get
			{
				return this._currentCount;
			}
			set
			{
				if ((this._currentCount != value))
				{
					this.OncurrentCountChanging(value);
					this.SendPropertyChanging();
					this._currentCount = value;
					this.SendPropertyChanged("currentCount");
					this.OncurrentCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerUser")]
	public partial class CustomerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private System.Nullable<int> _customerID;
		
		private System.DateTime _date_added;
		
		private bool _active;
		
		private int _locationID;
		
		private bool _isSudo;
		
		private int _cust_id;
		
		private bool _notCustomer;
		
		private EntitySet<CustUserWebProperty> _CustUserWebProperties;
		
		private EntitySet<ApiKey> _ApiKeys;
		
		private EntitySet<AuthAccess> _AuthAccesses;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OncustomerIDChanging(System.Nullable<int> value);
    partial void OncustomerIDChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnlocationIDChanging(int value);
    partial void OnlocationIDChanged();
    partial void OnisSudoChanging(bool value);
    partial void OnisSudoChanged();
    partial void Oncust_idChanging(int value);
    partial void Oncust_idChanged();
    partial void OnnotCustomerChanging(bool value);
    partial void OnnotCustomerChanged();
    #endregion
		
		public CustomerUser()
		{
			this._CustUserWebProperties = new EntitySet<CustUserWebProperty>(new Action<CustUserWebProperty>(this.attach_CustUserWebProperties), new Action<CustUserWebProperty>(this.detach_CustUserWebProperties));
			this._ApiKeys = new EntitySet<ApiKey>(new Action<ApiKey>(this.attach_ApiKeys), new Action<ApiKey>(this.detach_ApiKeys));
			this._AuthAccesses = new EntitySet<AuthAccess>(new Action<AuthAccess>(this.attach_AuthAccesses), new Action<AuthAccess>(this.detach_AuthAccesses));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int")]
		public System.Nullable<int> customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationID")]
		public int locationID
		{
			get
			{
				return this._locationID;
			}
			set
			{
				if ((this._locationID != value))
				{
					this.OnlocationIDChanging(value);
					this.SendPropertyChanging();
					this._locationID = value;
					this.SendPropertyChanged("locationID");
					this.OnlocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSudo")]
		public bool isSudo
		{
			get
			{
				return this._isSudo;
			}
			set
			{
				if ((this._isSudo != value))
				{
					this.OnisSudoChanging(value);
					this.SendPropertyChanging();
					this._isSudo = value;
					this.SendPropertyChanged("isSudo");
					this.OnisSudoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_id")]
		public int cust_id
		{
			get
			{
				return this._cust_id;
			}
			set
			{
				if ((this._cust_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncust_idChanging(value);
					this.SendPropertyChanging();
					this._cust_id = value;
					this.SendPropertyChanged("cust_id");
					this.Oncust_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notCustomer")]
		public bool notCustomer
		{
			get
			{
				return this._notCustomer;
			}
			set
			{
				if ((this._notCustomer != value))
				{
					this.OnnotCustomerChanging(value);
					this.SendPropertyChanging();
					this._notCustomer = value;
					this.SendPropertyChanged("notCustomer");
					this.OnnotCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerUser_CustUserWebProperty", Storage="_CustUserWebProperties", ThisKey="id", OtherKey="userID")]
		public EntitySet<CustUserWebProperty> CustUserWebProperties
		{
			get
			{
				return this._CustUserWebProperties;
			}
			set
			{
				this._CustUserWebProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerUser_ApiKey", Storage="_ApiKeys", ThisKey="id", OtherKey="user_id")]
		public EntitySet<ApiKey> ApiKeys
		{
			get
			{
				return this._ApiKeys;
			}
			set
			{
				this._ApiKeys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerUser_AuthAccess", Storage="_AuthAccesses", ThisKey="id", OtherKey="userID")]
		public EntitySet<AuthAccess> AuthAccesses
		{
			get
			{
				return this._AuthAccesses;
			}
			set
			{
				this._AuthAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerUser", Storage="_Customer", ThisKey="cust_id", OtherKey="cust_id", IsForeignKey=true)]
		internal Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerUsers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerUsers.Add(this);
						this._cust_id = value.cust_id;
					}
					else
					{
						this._cust_id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustUserWebProperties(CustUserWebProperty entity)
		{
			this.SendPropertyChanging();
			entity.CustomerUser = this;
		}
		
		private void detach_CustUserWebProperties(CustUserWebProperty entity)
		{
			this.SendPropertyChanging();
			entity.CustomerUser = null;
		}
		
		private void attach_ApiKeys(ApiKey entity)
		{
			this.SendPropertyChanging();
			entity.CustomerUser = this;
		}
		
		private void detach_ApiKeys(ApiKey entity)
		{
			this.SendPropertyChanging();
			entity.CustomerUser = null;
		}
		
		private void attach_AuthAccesses(AuthAccess entity)
		{
			this.SendPropertyChanging();
			entity.CustomerUser = this;
		}
		
		private void detach_AuthAccesses(AuthAccess entity)
		{
			this.SendPropertyChanging();
			entity.CustomerUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapPolygon")]
	public partial class MapPolygon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _stateID;
		
		private EntitySet<MapPolygonCoordinate> _MapPolygonCoordinates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    #endregion
		
		public MapPolygon()
		{
			this._MapPolygonCoordinates = new EntitySet<MapPolygonCoordinate>(new Action<MapPolygonCoordinate>(this.attach_MapPolygonCoordinates), new Action<MapPolygonCoordinate>(this.detach_MapPolygonCoordinates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", DbType="Int NOT NULL")]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapPolygon_MapPolygonCoordinate", Storage="_MapPolygonCoordinates", ThisKey="ID", OtherKey="MapPolygonID")]
		public EntitySet<MapPolygonCoordinate> MapPolygonCoordinates
		{
			get
			{
				return this._MapPolygonCoordinates;
			}
			set
			{
				this._MapPolygonCoordinates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MapPolygonCoordinates(MapPolygonCoordinate entity)
		{
			this.SendPropertyChanging();
			entity.MapPolygon = this;
		}
		
		private void detach_MapPolygonCoordinates(MapPolygonCoordinate entity)
		{
			this.SendPropertyChanging();
			entity.MapPolygon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapPolygonCoordinates")]
	public partial class MapPolygonCoordinate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MapPolygonID;
		
		private double _latitude;
		
		private double _longitude;
		
		private EntityRef<MapPolygon> _MapPolygon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMapPolygonIDChanging(int value);
    partial void OnMapPolygonIDChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    #endregion
		
		public MapPolygonCoordinate()
		{
			this._MapPolygon = default(EntityRef<MapPolygon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapPolygonID", DbType="Int NOT NULL")]
		public int MapPolygonID
		{
			get
			{
				return this._MapPolygonID;
			}
			set
			{
				if ((this._MapPolygonID != value))
				{
					if (this._MapPolygon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMapPolygonIDChanging(value);
					this.SendPropertyChanging();
					this._MapPolygonID = value;
					this.SendPropertyChanged("MapPolygonID");
					this.OnMapPolygonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MapPolygon_MapPolygonCoordinate", Storage="_MapPolygon", ThisKey="MapPolygonID", OtherKey="ID", IsForeignKey=true)]
		internal MapPolygon MapPolygon
		{
			get
			{
				return this._MapPolygon.Entity;
			}
			set
			{
				MapPolygon previousValue = this._MapPolygon.Entity;
				if (((previousValue != value) 
							|| (this._MapPolygon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MapPolygon.Entity = null;
						previousValue.MapPolygonCoordinates.Remove(this);
					}
					this._MapPolygon.Entity = value;
					if ((value != null))
					{
						value.MapPolygonCoordinates.Add(this);
						this._MapPolygonID = value.ID;
					}
					else
					{
						this._MapPolygonID = default(int);
					}
					this.SendPropertyChanged("MapPolygon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private string _code;
		
		private EntityRef<PartPackage> _PartPackage;
		
		private EntityRef<PartPackage> _PartPackage1;
		
		private EntityRef<PartPackage> _PartPackage2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public UnitOfMeasure()
		{
			this._PartPackage = default(EntityRef<PartPackage>);
			this._PartPackage1 = default(EntityRef<PartPackage>);
			this._PartPackage2 = default(EntityRef<PartPackage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (((this._PartPackage.HasLoadedOrAssignedValue || this._PartPackage1.HasLoadedOrAssignedValue) 
								|| this._PartPackage2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure", Storage="_PartPackage", ThisKey="ID", OtherKey="dimensionUOM", IsForeignKey=true)]
		internal PartPackage PartPackage
		{
			get
			{
				return this._PartPackage.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage.Entity = null;
						previousValue.dimensionUnit = null;
					}
					this._PartPackage.Entity = value;
					if ((value != null))
					{
						value.dimensionUnit = this;
						this._ID = value.dimensionUOM;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure1", Storage="_PartPackage1", ThisKey="ID", OtherKey="weightUOM", IsForeignKey=true)]
		internal PartPackage PartPackage1
		{
			get
			{
				return this._PartPackage1.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage1.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage1.Entity = null;
						previousValue.weightUnit = null;
					}
					this._PartPackage1.Entity = value;
					if ((value != null))
					{
						value.weightUnit = this;
						this._ID = value.weightUOM;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure2", Storage="_PartPackage2", ThisKey="ID", OtherKey="packageUOM", IsForeignKey=true)]
		internal PartPackage PartPackage2
		{
			get
			{
				return this._PartPackage2.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage2.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage2.Entity = null;
						previousValue.packageUnit = null;
					}
					this._PartPackage2.Entity = value;
					if ((value != null))
					{
						value.packageUnit = this;
						this._ID = value.packageUOM;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartPackage")]
	public partial class PartPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _partID;
		
		private System.Nullable<double> _height;
		
		private System.Nullable<double> _width;
		
		private System.Nullable<double> _length;
		
		private System.Nullable<double> _weight;
		
		private int _dimensionUOM;
		
		private int _weightUOM;
		
		private int _packageUOM;
		
		private int _quantity;
		
		private int _typeID;
		
		private EntityRef<UnitOfMeasure> _dimensionUnit;
		
		private EntityRef<UnitOfMeasure> _weightUnit;
		
		private EntityRef<UnitOfMeasure> _packageUnit;
		
		private EntityRef<PackageType> _PackageType;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnheightChanging(System.Nullable<double> value);
    partial void OnheightChanged();
    partial void OnwidthChanging(System.Nullable<double> value);
    partial void OnwidthChanged();
    partial void OnlengthChanging(System.Nullable<double> value);
    partial void OnlengthChanged();
    partial void OnweightChanging(System.Nullable<double> value);
    partial void OnweightChanged();
    partial void OndimensionUOMChanging(int value);
    partial void OndimensionUOMChanged();
    partial void OnweightUOMChanging(int value);
    partial void OnweightUOMChanged();
    partial void OnpackageUOMChanging(int value);
    partial void OnpackageUOMChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    #endregion
		
		public PartPackage()
		{
			this._dimensionUnit = default(EntityRef<UnitOfMeasure>);
			this._weightUnit = default(EntityRef<UnitOfMeasure>);
			this._packageUnit = default(EntityRef<UnitOfMeasure>);
			this._PackageType = default(EntityRef<PackageType>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Float")]
		public System.Nullable<double> height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Float")]
		public System.Nullable<double> width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_length", DbType="Float")]
		public System.Nullable<double> length
		{
			get
			{
				return this._length;
			}
			set
			{
				if ((this._length != value))
				{
					this.OnlengthChanging(value);
					this.SendPropertyChanging();
					this._length = value;
					this.SendPropertyChanged("length");
					this.OnlengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float")]
		public System.Nullable<double> weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimensionUOM", DbType="Int NOT NULL")]
		public int dimensionUOM
		{
			get
			{
				return this._dimensionUOM;
			}
			set
			{
				if ((this._dimensionUOM != value))
				{
					this.OndimensionUOMChanging(value);
					this.SendPropertyChanging();
					this._dimensionUOM = value;
					this.SendPropertyChanged("dimensionUOM");
					this.OndimensionUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weightUOM", DbType="Int NOT NULL")]
		public int weightUOM
		{
			get
			{
				return this._weightUOM;
			}
			set
			{
				if ((this._weightUOM != value))
				{
					this.OnweightUOMChanging(value);
					this.SendPropertyChanging();
					this._weightUOM = value;
					this.SendPropertyChanged("weightUOM");
					this.OnweightUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_packageUOM", DbType="Int NOT NULL")]
		public int packageUOM
		{
			get
			{
				return this._packageUOM;
			}
			set
			{
				if ((this._packageUOM != value))
				{
					this.OnpackageUOMChanging(value);
					this.SendPropertyChanging();
					this._packageUOM = value;
					this.SendPropertyChanged("packageUOM");
					this.OnpackageUOMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure", Storage="_dimensionUnit", ThisKey="dimensionUOM", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public UnitOfMeasure dimensionUnit
		{
			get
			{
				return this._dimensionUnit.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._dimensionUnit.Entity;
				if (((previousValue != value) 
							|| (this._dimensionUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dimensionUnit.Entity = null;
						previousValue.PartPackage = null;
					}
					this._dimensionUnit.Entity = value;
					if ((value != null))
					{
						value.PartPackage = this;
					}
					this.SendPropertyChanged("dimensionUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure1", Storage="_weightUnit", ThisKey="weightUOM", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public UnitOfMeasure weightUnit
		{
			get
			{
				return this._weightUnit.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._weightUnit.Entity;
				if (((previousValue != value) 
							|| (this._weightUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._weightUnit.Entity = null;
						previousValue.PartPackage1 = null;
					}
					this._weightUnit.Entity = value;
					if ((value != null))
					{
						value.PartPackage1 = this;
					}
					this.SendPropertyChanged("weightUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_UnitOfMeasure2", Storage="_packageUnit", ThisKey="packageUOM", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public UnitOfMeasure packageUnit
		{
			get
			{
				return this._packageUnit.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._packageUnit.Entity;
				if (((previousValue != value) 
							|| (this._packageUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._packageUnit.Entity = null;
						previousValue.PartPackage2 = null;
					}
					this._packageUnit.Entity = value;
					if ((value != null))
					{
						value.PartPackage2 = this;
					}
					this.SendPropertyChanged("packageUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_PackageType", Storage="_PackageType", ThisKey="typeID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public PackageType PackageType
		{
			get
			{
				return this._PackageType.Entity;
			}
			set
			{
				PackageType previousValue = this._PackageType.Entity;
				if (((previousValue != value) 
							|| (this._PackageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageType.Entity = null;
						previousValue.PartPackage = null;
					}
					this._PackageType.Entity = value;
					if ((value != null))
					{
						value.PartPackage = this;
					}
					this.SendPropertyChanged("PackageType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartPackage", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartPackages.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartPackages.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Make")]
	public partial class vcdb_Make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIAMakeID;
		
		private string _MakeName;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIAMakeIDChanging(System.Nullable<int> value);
    partial void OnAAIAMakeIDChanged();
    partial void OnMakeNameChanging(string value);
    partial void OnMakeNameChanged();
    #endregion
		
		public vcdb_Make()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIAMakeID", DbType="Int")]
		public System.Nullable<int> AAIAMakeID
		{
			get
			{
				return this._AAIAMakeID;
			}
			set
			{
				if ((this._AAIAMakeID != value))
				{
					this.OnAAIAMakeIDChanging(value);
					this.SendPropertyChanging();
					this._AAIAMakeID = value;
					this.SendPropertyChanged("AAIAMakeID");
					this.OnAAIAMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MakeName
		{
			get
			{
				return this._MakeName;
			}
			set
			{
				if ((this._MakeName != value))
				{
					this.OnMakeNameChanging(value);
					this.SendPropertyChanging();
					this._MakeName = value;
					this.SendPropertyChanged("MakeName");
					this.OnMakeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Make_BaseVehicle", Storage="_BaseVehicles", ThisKey="ID", OtherKey="MakeID")]
		internal EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Make = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Model")]
	public partial class vcdb_Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIAModelID;
		
		private string _ModelName;
		
		private int _VehicleTypeID;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIAModelIDChanging(System.Nullable<int> value);
    partial void OnAAIAModelIDChanged();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    partial void OnVehicleTypeIDChanging(int value);
    partial void OnVehicleTypeIDChanged();
    #endregion
		
		public vcdb_Model()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIAModelID", DbType="Int")]
		public System.Nullable<int> AAIAModelID
		{
			get
			{
				return this._AAIAModelID;
			}
			set
			{
				if ((this._AAIAModelID != value))
				{
					this.OnAAIAModelIDChanging(value);
					this.SendPropertyChanging();
					this._AAIAModelID = value;
					this.SendPropertyChanged("AAIAModelID");
					this.OnAAIAModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelName", DbType="VarChar(100)")]
		public string ModelName
		{
			get
			{
				return this._ModelName;
			}
			set
			{
				if ((this._ModelName != value))
				{
					this.OnModelNameChanging(value);
					this.SendPropertyChanging();
					this._ModelName = value;
					this.SendPropertyChanged("ModelName");
					this.OnModelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", DbType="Int NOT NULL")]
		public int VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Model_BaseVehicle", Storage="_BaseVehicles", ThisKey="ID", OtherKey="ModelID")]
		internal EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Model = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Vehicle")]
	public partial class vcdb_Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BaseVehicleID;
		
		private System.Nullable<int> _SubModelID;
		
		private System.Nullable<int> _ConfigID;
		
		private EntitySet<vcdb_VehiclePart> _vcdb_VehicleParts;
		
		private EntityRef<Submodel> _Submodel;
		
		private EntityRef<BaseVehicle> _BaseVehicle;
		
		private EntityRef<VehicleConfig> _VehicleConfig;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBaseVehicleIDChanging(int value);
    partial void OnBaseVehicleIDChanged();
    partial void OnSubModelIDChanging(System.Nullable<int> value);
    partial void OnSubModelIDChanged();
    partial void OnConfigIDChanging(System.Nullable<int> value);
    partial void OnConfigIDChanged();
    #endregion
		
		public vcdb_Vehicle()
		{
			this._vcdb_VehicleParts = new EntitySet<vcdb_VehiclePart>(new Action<vcdb_VehiclePart>(this.attach_vcdb_VehicleParts), new Action<vcdb_VehiclePart>(this.detach_vcdb_VehicleParts));
			this._Submodel = default(EntityRef<Submodel>);
			this._BaseVehicle = default(EntityRef<BaseVehicle>);
			this._VehicleConfig = default(EntityRef<VehicleConfig>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseVehicleID", DbType="Int NOT NULL")]
		public int BaseVehicleID
		{
			get
			{
				return this._BaseVehicleID;
			}
			set
			{
				if ((this._BaseVehicleID != value))
				{
					if (this._BaseVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._BaseVehicleID = value;
					this.SendPropertyChanged("BaseVehicleID");
					this.OnBaseVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubModelID", DbType="Int")]
		public System.Nullable<int> SubModelID
		{
			get
			{
				return this._SubModelID;
			}
			set
			{
				if ((this._SubModelID != value))
				{
					if (this._Submodel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubModelIDChanging(value);
					this.SendPropertyChanging();
					this._SubModelID = value;
					this.SendPropertyChanged("SubModelID");
					this.OnSubModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigID", DbType="Int")]
		public System.Nullable<int> ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					if (this._VehicleConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Vehicle_vcdb_VehiclePart", Storage="_vcdb_VehicleParts", ThisKey="ID", OtherKey="VehicleID")]
		public EntitySet<vcdb_VehiclePart> vcdb_VehicleParts
		{
			get
			{
				return this._vcdb_VehicleParts;
			}
			set
			{
				this._vcdb_VehicleParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submodel_vcdb_Vehicle", Storage="_Submodel", ThisKey="SubModelID", OtherKey="ID", IsForeignKey=true)]
		public Submodel Submodel
		{
			get
			{
				return this._Submodel.Entity;
			}
			set
			{
				Submodel previousValue = this._Submodel.Entity;
				if (((previousValue != value) 
							|| (this._Submodel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submodel.Entity = null;
						previousValue.vcdb_Vehicles.Remove(this);
					}
					this._Submodel.Entity = value;
					if ((value != null))
					{
						value.vcdb_Vehicles.Add(this);
						this._SubModelID = value.ID;
					}
					else
					{
						this._SubModelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Submodel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVehicle_vcdb_Vehicle", Storage="_BaseVehicle", ThisKey="BaseVehicleID", OtherKey="ID", IsForeignKey=true)]
		internal BaseVehicle BaseVehicle
		{
			get
			{
				return this._BaseVehicle.Entity;
			}
			set
			{
				BaseVehicle previousValue = this._BaseVehicle.Entity;
				if (((previousValue != value) 
							|| (this._BaseVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseVehicle.Entity = null;
						previousValue.vcdb_Vehicles.Remove(this);
					}
					this._BaseVehicle.Entity = value;
					if ((value != null))
					{
						value.vcdb_Vehicles.Add(this);
						this._BaseVehicleID = value.ID;
					}
					else
					{
						this._BaseVehicleID = default(int);
					}
					this.SendPropertyChanged("BaseVehicle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_vcdb_Vehicle", Storage="_VehicleConfig", ThisKey="ConfigID", OtherKey="ID", IsForeignKey=true)]
		public VehicleConfig VehicleConfig
		{
			get
			{
				return this._VehicleConfig.Entity;
			}
			set
			{
				VehicleConfig previousValue = this._VehicleConfig.Entity;
				if (((previousValue != value) 
							|| (this._VehicleConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleConfig.Entity = null;
						previousValue.vcdb_Vehicles.Remove(this);
					}
					this._VehicleConfig.Entity = value;
					if ((value != null))
					{
						value.vcdb_Vehicles.Add(this);
						this._ConfigID = value.ID;
					}
					else
					{
						this._ConfigID = default(Nullable<int>);
					}
					this.SendPropertyChanged("VehicleConfig");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Vehicle = this;
		}
		
		private void detach_vcdb_VehicleParts(vcdb_VehiclePart entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Vehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_VehiclePart")]
	public partial class vcdb_VehiclePart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VehicleID;
		
		private int _PartNumber;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<vcdb_Vehicle> _vcdb_Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVehicleIDChanging(int value);
    partial void OnVehicleIDChanged();
    partial void OnPartNumberChanging(int value);
    partial void OnPartNumberChanged();
    #endregion
		
		public vcdb_VehiclePart()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._Part = default(EntityRef<Part>);
			this._vcdb_Vehicle = default(EntityRef<vcdb_Vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="Int NOT NULL")]
		public int VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					if (this._vcdb_Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleID = value;
					this.SendPropertyChanged("VehicleID");
					this.OnVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="Int NOT NULL")]
		public int PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_VehiclePart_Note", Storage="_Notes", ThisKey="ID", OtherKey="vehiclePartID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_vcdb_VehiclePart", Storage="_Part", ThisKey="PartNumber", OtherKey="partID", IsForeignKey=true)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.vcdb_VehicleParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.vcdb_VehicleParts.Add(this);
						this._PartNumber = value.partID;
					}
					else
					{
						this._PartNumber = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Vehicle_vcdb_VehiclePart", Storage="_vcdb_Vehicle", ThisKey="VehicleID", OtherKey="ID", IsForeignKey=true)]
		internal vcdb_Vehicle vcdb_Vehicle
		{
			get
			{
				return this._vcdb_Vehicle.Entity;
			}
			set
			{
				vcdb_Vehicle previousValue = this._vcdb_Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Vehicle.Entity = null;
						previousValue.vcdb_VehicleParts.Remove(this);
					}
					this._vcdb_Vehicle.Entity = value;
					if ((value != null))
					{
						value.vcdb_VehicleParts.Add(this);
						this._VehicleID = value.ID;
					}
					else
					{
						this._VehicleID = default(int);
					}
					this.SendPropertyChanged("vcdb_Vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_VehiclePart = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_VehiclePart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vcdb_Year")]
	public partial class vcdb_Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearID;
		
		private EntitySet<BaseVehicle> _BaseVehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public vcdb_Year()
		{
			this._BaseVehicles = new EntitySet<BaseVehicle>(new Action<BaseVehicle>(this.attach_BaseVehicles), new Action<BaseVehicle>(this.detach_BaseVehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true)]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Year_BaseVehicle", Storage="_BaseVehicles", ThisKey="YearID", OtherKey="YearID")]
		internal EntitySet<BaseVehicle> BaseVehicles
		{
			get
			{
				return this._BaseVehicles;
			}
			set
			{
				this._BaseVehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Year = this;
		}
		
		private void detach_BaseVehicles(BaseVehicle entity)
		{
			this.SendPropertyChanging();
			entity.vcdb_Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submodel")]
	public partial class Submodel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIASubmodelID;
		
		private string _SubmodelName;
		
		private EntitySet<vcdb_Vehicle> _vcdb_Vehicles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIASubmodelIDChanging(System.Nullable<int> value);
    partial void OnAAIASubmodelIDChanged();
    partial void OnSubmodelNameChanging(string value);
    partial void OnSubmodelNameChanged();
    #endregion
		
		public Submodel()
		{
			this._vcdb_Vehicles = new EntitySet<vcdb_Vehicle>(new Action<vcdb_Vehicle>(this.attach_vcdb_Vehicles), new Action<vcdb_Vehicle>(this.detach_vcdb_Vehicles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIASubmodelID", DbType="Int")]
		public System.Nullable<int> AAIASubmodelID
		{
			get
			{
				return this._AAIASubmodelID;
			}
			set
			{
				if ((this._AAIASubmodelID != value))
				{
					this.OnAAIASubmodelIDChanging(value);
					this.SendPropertyChanging();
					this._AAIASubmodelID = value;
					this.SendPropertyChanged("AAIASubmodelID");
					this.OnAAIASubmodelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmodelName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubmodelName
		{
			get
			{
				return this._SubmodelName;
			}
			set
			{
				if ((this._SubmodelName != value))
				{
					this.OnSubmodelNameChanging(value);
					this.SendPropertyChanging();
					this._SubmodelName = value;
					this.SendPropertyChanged("SubmodelName");
					this.OnSubmodelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submodel_vcdb_Vehicle", Storage="_vcdb_Vehicles", ThisKey="ID", OtherKey="SubModelID")]
		internal EntitySet<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this._vcdb_Vehicles;
			}
			set
			{
				this._vcdb_Vehicles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Submodel = this;
		}
		
		private void detach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.Submodel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleType")]
	public partial class VehicleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleTypeID;
		
		private string _VehicleTypeName;
		
		private System.Nullable<int> _VehicleTypeGroupID;
		
		private EntityRef<VehicleTypeGroup> _VehicleTypeGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleTypeIDChanging(int value);
    partial void OnVehicleTypeIDChanged();
    partial void OnVehicleTypeNameChanging(string value);
    partial void OnVehicleTypeNameChanged();
    partial void OnVehicleTypeGroupIDChanging(System.Nullable<int> value);
    partial void OnVehicleTypeGroupIDChanged();
    #endregion
		
		public VehicleType()
		{
			this._VehicleTypeGroup = default(EntityRef<VehicleTypeGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleTypeName
		{
			get
			{
				return this._VehicleTypeName;
			}
			set
			{
				if ((this._VehicleTypeName != value))
				{
					this.OnVehicleTypeNameChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeName = value;
					this.SendPropertyChanged("VehicleTypeName");
					this.OnVehicleTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeGroupID", DbType="Int")]
		public System.Nullable<int> VehicleTypeGroupID
		{
			get
			{
				return this._VehicleTypeGroupID;
			}
			set
			{
				if ((this._VehicleTypeGroupID != value))
				{
					if (this._VehicleTypeGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleTypeGroupIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeGroupID = value;
					this.SendPropertyChanged("VehicleTypeGroupID");
					this.OnVehicleTypeGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleTypeGroup_VehicleType", Storage="_VehicleTypeGroup", ThisKey="VehicleTypeGroupID", OtherKey="VehicleTypeGroupID", IsForeignKey=true)]
		public VehicleTypeGroup VehicleTypeGroup
		{
			get
			{
				return this._VehicleTypeGroup.Entity;
			}
			set
			{
				VehicleTypeGroup previousValue = this._VehicleTypeGroup.Entity;
				if (((previousValue != value) 
							|| (this._VehicleTypeGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleTypeGroup.Entity = null;
						previousValue.VehicleTypes.Remove(this);
					}
					this._VehicleTypeGroup.Entity = value;
					if ((value != null))
					{
						value.VehicleTypes.Add(this);
						this._VehicleTypeGroupID = value.VehicleTypeGroupID;
					}
					else
					{
						this._VehicleTypeGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("VehicleTypeGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleTypeGroup")]
	public partial class VehicleTypeGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VehicleTypeGroupID;
		
		private string _VehicleTypeGroupName;
		
		private EntitySet<VehicleType> _VehicleTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleTypeGroupIDChanging(int value);
    partial void OnVehicleTypeGroupIDChanged();
    partial void OnVehicleTypeGroupNameChanging(string value);
    partial void OnVehicleTypeGroupNameChanged();
    #endregion
		
		public VehicleTypeGroup()
		{
			this._VehicleTypes = new EntitySet<VehicleType>(new Action<VehicleType>(this.attach_VehicleTypes), new Action<VehicleType>(this.detach_VehicleTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VehicleTypeGroupID
		{
			get
			{
				return this._VehicleTypeGroupID;
			}
			set
			{
				if ((this._VehicleTypeGroupID != value))
				{
					this.OnVehicleTypeGroupIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeGroupID = value;
					this.SendPropertyChanged("VehicleTypeGroupID");
					this.OnVehicleTypeGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeGroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleTypeGroupName
		{
			get
			{
				return this._VehicleTypeGroupName;
			}
			set
			{
				if ((this._VehicleTypeGroupName != value))
				{
					this.OnVehicleTypeGroupNameChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeGroupName = value;
					this.SendPropertyChanged("VehicleTypeGroupName");
					this.OnVehicleTypeGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleTypeGroup_VehicleType", Storage="_VehicleTypes", ThisKey="VehicleTypeGroupID", OtherKey="VehicleTypeGroupID")]
		public EntitySet<VehicleType> VehicleTypes
		{
			get
			{
				return this._VehicleTypes;
			}
			set
			{
				this._VehicleTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehicleTypes(VehicleType entity)
		{
			this.SendPropertyChanging();
			entity.VehicleTypeGroup = this;
		}
		
		private void detach_VehicleTypes(VehicleType entity)
		{
			this.SendPropertyChanging();
			entity.VehicleTypeGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BaseVehicle")]
	public partial class BaseVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIABaseVehicleID;
		
		private int _YearID;
		
		private int _MakeID;
		
		private int _ModelID;
		
		private EntitySet<vcdb_Vehicle> _vcdb_Vehicles;
		
		private EntityRef<vcdb_Make> _vcdb_Make;
		
		private EntityRef<vcdb_Model> _vcdb_Model;
		
		private EntityRef<vcdb_Year> _vcdb_Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIABaseVehicleIDChanging(System.Nullable<int> value);
    partial void OnAAIABaseVehicleIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnMakeIDChanging(int value);
    partial void OnMakeIDChanged();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    #endregion
		
		public BaseVehicle()
		{
			this._vcdb_Vehicles = new EntitySet<vcdb_Vehicle>(new Action<vcdb_Vehicle>(this.attach_vcdb_Vehicles), new Action<vcdb_Vehicle>(this.detach_vcdb_Vehicles));
			this._vcdb_Make = default(EntityRef<vcdb_Make>);
			this._vcdb_Model = default(EntityRef<vcdb_Model>);
			this._vcdb_Year = default(EntityRef<vcdb_Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIABaseVehicleID", DbType="Int")]
		public System.Nullable<int> AAIABaseVehicleID
		{
			get
			{
				return this._AAIABaseVehicleID;
			}
			set
			{
				if ((this._AAIABaseVehicleID != value))
				{
					this.OnAAIABaseVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._AAIABaseVehicleID = value;
					this.SendPropertyChanged("AAIABaseVehicleID");
					this.OnAAIABaseVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					if (this._vcdb_Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MakeID", DbType="Int NOT NULL")]
		public int MakeID
		{
			get
			{
				return this._MakeID;
			}
			set
			{
				if ((this._MakeID != value))
				{
					if (this._vcdb_Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMakeIDChanging(value);
					this.SendPropertyChanging();
					this._MakeID = value;
					this.SendPropertyChanged("MakeID");
					this.OnMakeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int NOT NULL")]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					if (this._vcdb_Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseVehicle_vcdb_Vehicle", Storage="_vcdb_Vehicles", ThisKey="ID", OtherKey="BaseVehicleID")]
		public EntitySet<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this._vcdb_Vehicles;
			}
			set
			{
				this._vcdb_Vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Make_BaseVehicle", Storage="_vcdb_Make", ThisKey="MakeID", OtherKey="ID", IsForeignKey=true)]
		public vcdb_Make vcdb_Make
		{
			get
			{
				return this._vcdb_Make.Entity;
			}
			set
			{
				vcdb_Make previousValue = this._vcdb_Make.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Make.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._vcdb_Make.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._MakeID = value.ID;
					}
					else
					{
						this._MakeID = default(int);
					}
					this.SendPropertyChanged("vcdb_Make");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Model_BaseVehicle", Storage="_vcdb_Model", ThisKey="ModelID", OtherKey="ID", IsForeignKey=true)]
		public vcdb_Model vcdb_Model
		{
			get
			{
				return this._vcdb_Model.Entity;
			}
			set
			{
				vcdb_Model previousValue = this._vcdb_Model.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Model.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._vcdb_Model.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._ModelID = value.ID;
					}
					else
					{
						this._ModelID = default(int);
					}
					this.SendPropertyChanged("vcdb_Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_Year_BaseVehicle", Storage="_vcdb_Year", ThisKey="YearID", OtherKey="YearID", IsForeignKey=true)]
		public vcdb_Year vcdb_Year
		{
			get
			{
				return this._vcdb_Year.Entity;
			}
			set
			{
				vcdb_Year previousValue = this._vcdb_Year.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_Year.Entity = null;
						previousValue.BaseVehicles.Remove(this);
					}
					this._vcdb_Year.Entity = value;
					if ((value != null))
					{
						value.BaseVehicles.Add(this);
						this._YearID = value.YearID;
					}
					else
					{
						this._YearID = default(int);
					}
					this.SendPropertyChanged("vcdb_Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.BaseVehicle = this;
		}
		
		private void detach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.BaseVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcesType")]
	public partial class AcesType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private EntitySet<ConfigAttributeType> _ConfigAttributeTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public AcesType()
		{
			this._ConfigAttributeTypes = new EntitySet<ConfigAttributeType>(new Action<ConfigAttributeType>(this.attach_ConfigAttributeTypes), new Action<ConfigAttributeType>(this.detach_ConfigAttributeTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcesType_ConfigAttributeType", Storage="_ConfigAttributeTypes", ThisKey="ID", OtherKey="AcesTypeID")]
		internal EntitySet<ConfigAttributeType> ConfigAttributeTypes
		{
			get
			{
				return this._ConfigAttributeTypes;
			}
			set
			{
				this._ConfigAttributeTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfigAttributeTypes(ConfigAttributeType entity)
		{
			this.SendPropertyChanging();
			entity.AcesType = this;
		}
		
		private void detach_ConfigAttributeTypes(ConfigAttributeType entity)
		{
			this.SendPropertyChanging();
			entity.AcesType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigAttributeType")]
	public partial class ConfigAttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private System.Nullable<int> _AcesTypeID;
		
		private int _sort;
		
		private EntitySet<ConfigAttribute> _ConfigAttributes;
		
		private EntityRef<AcesType> _AcesType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnAcesTypeIDChanging(System.Nullable<int> value);
    partial void OnAcesTypeIDChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public ConfigAttributeType()
		{
			this._ConfigAttributes = new EntitySet<ConfigAttribute>(new Action<ConfigAttribute>(this.attach_ConfigAttributes), new Action<ConfigAttribute>(this.detach_ConfigAttributes));
			this._AcesType = default(EntityRef<AcesType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcesTypeID", DbType="Int")]
		public System.Nullable<int> AcesTypeID
		{
			get
			{
				return this._AcesTypeID;
			}
			set
			{
				if ((this._AcesTypeID != value))
				{
					if (this._AcesType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcesTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AcesTypeID = value;
					this.SendPropertyChanged("AcesTypeID");
					this.OnAcesTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttributeType_ConfigAttribute", Storage="_ConfigAttributes", ThisKey="ID", OtherKey="ConfigAttributeTypeID")]
		internal EntitySet<ConfigAttribute> ConfigAttributes
		{
			get
			{
				return this._ConfigAttributes;
			}
			set
			{
				this._ConfigAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcesType_ConfigAttributeType", Storage="_AcesType", ThisKey="AcesTypeID", OtherKey="ID", IsForeignKey=true)]
		public AcesType AcesType
		{
			get
			{
				return this._AcesType.Entity;
			}
			set
			{
				AcesType previousValue = this._AcesType.Entity;
				if (((previousValue != value) 
							|| (this._AcesType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcesType.Entity = null;
						previousValue.ConfigAttributeTypes.Remove(this);
					}
					this._AcesType.Entity = value;
					if ((value != null))
					{
						value.ConfigAttributeTypes.Add(this);
						this._AcesTypeID = value.ID;
					}
					else
					{
						this._AcesTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AcesType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfigAttributes(ConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttributeType = this;
		}
		
		private void detach_ConfigAttributes(ConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttributeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigAttribute")]
	public partial class ConfigAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ConfigAttributeTypeID;
		
		private int _parentID;
		
		private System.Nullable<int> _vcdbID;
		
		private string _value;
		
		private EntitySet<VehicleConfigAttribute> _VehicleConfigAttributes;
		
		private EntityRef<ConfigAttributeType> _ConfigAttributeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConfigAttributeTypeIDChanging(int value);
    partial void OnConfigAttributeTypeIDChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OnvcdbIDChanging(System.Nullable<int> value);
    partial void OnvcdbIDChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public ConfigAttribute()
		{
			this._VehicleConfigAttributes = new EntitySet<VehicleConfigAttribute>(new Action<VehicleConfigAttribute>(this.attach_VehicleConfigAttributes), new Action<VehicleConfigAttribute>(this.detach_VehicleConfigAttributes));
			this._ConfigAttributeType = default(EntityRef<ConfigAttributeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigAttributeTypeID", DbType="Int NOT NULL")]
		public int ConfigAttributeTypeID
		{
			get
			{
				return this._ConfigAttributeTypeID;
			}
			set
			{
				if ((this._ConfigAttributeTypeID != value))
				{
					if (this._ConfigAttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigAttributeTypeID = value;
					this.SendPropertyChanged("ConfigAttributeTypeID");
					this.OnConfigAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcdbID", DbType="Int")]
		public System.Nullable<int> vcdbID
		{
			get
			{
				return this._vcdbID;
			}
			set
			{
				if ((this._vcdbID != value))
				{
					this.OnvcdbIDChanging(value);
					this.SendPropertyChanging();
					this._vcdbID = value;
					this.SendPropertyChanged("vcdbID");
					this.OnvcdbIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttribute_VehicleConfigAttribute", Storage="_VehicleConfigAttributes", ThisKey="ID", OtherKey="AttributeID")]
		internal EntitySet<VehicleConfigAttribute> VehicleConfigAttributes
		{
			get
			{
				return this._VehicleConfigAttributes;
			}
			set
			{
				this._VehicleConfigAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttributeType_ConfigAttribute", Storage="_ConfigAttributeType", ThisKey="ConfigAttributeTypeID", OtherKey="ID", IsForeignKey=true)]
		public ConfigAttributeType ConfigAttributeType
		{
			get
			{
				return this._ConfigAttributeType.Entity;
			}
			set
			{
				ConfigAttributeType previousValue = this._ConfigAttributeType.Entity;
				if (((previousValue != value) 
							|| (this._ConfigAttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigAttributeType.Entity = null;
						previousValue.ConfigAttributes.Remove(this);
					}
					this._ConfigAttributeType.Entity = value;
					if ((value != null))
					{
						value.ConfigAttributes.Add(this);
						this._ConfigAttributeTypeID = value.ID;
					}
					else
					{
						this._ConfigAttributeTypeID = default(int);
					}
					this.SendPropertyChanged("ConfigAttributeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttribute = this;
		}
		
		private void detach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.ConfigAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleConfig")]
	public partial class VehicleConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AAIAVehicleConfigID;
		
		private EntitySet<vcdb_Vehicle> _vcdb_Vehicles;
		
		private EntitySet<VehicleConfigAttribute> _VehicleConfigAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAAIAVehicleConfigIDChanging(System.Nullable<int> value);
    partial void OnAAIAVehicleConfigIDChanged();
    #endregion
		
		public VehicleConfig()
		{
			this._vcdb_Vehicles = new EntitySet<vcdb_Vehicle>(new Action<vcdb_Vehicle>(this.attach_vcdb_Vehicles), new Action<vcdb_Vehicle>(this.detach_vcdb_Vehicles));
			this._VehicleConfigAttributes = new EntitySet<VehicleConfigAttribute>(new Action<VehicleConfigAttribute>(this.attach_VehicleConfigAttributes), new Action<VehicleConfigAttribute>(this.detach_VehicleConfigAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AAIAVehicleConfigID", DbType="Int")]
		public System.Nullable<int> AAIAVehicleConfigID
		{
			get
			{
				return this._AAIAVehicleConfigID;
			}
			set
			{
				if ((this._AAIAVehicleConfigID != value))
				{
					this.OnAAIAVehicleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._AAIAVehicleConfigID = value;
					this.SendPropertyChanged("AAIAVehicleConfigID");
					this.OnAAIAVehicleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_vcdb_Vehicle", Storage="_vcdb_Vehicles", ThisKey="ID", OtherKey="ConfigID")]
		internal EntitySet<vcdb_Vehicle> vcdb_Vehicles
		{
			get
			{
				return this._vcdb_Vehicles;
			}
			set
			{
				this._vcdb_Vehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_VehicleConfigAttribute", Storage="_VehicleConfigAttributes", ThisKey="ID", OtherKey="VehicleConfigID")]
		public EntitySet<VehicleConfigAttribute> VehicleConfigAttributes
		{
			get
			{
				return this._VehicleConfigAttributes;
			}
			set
			{
				this._VehicleConfigAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = this;
		}
		
		private void detach_vcdb_Vehicles(vcdb_Vehicle entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = null;
		}
		
		private void attach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = this;
		}
		
		private void detach_VehicleConfigAttributes(VehicleConfigAttribute entity)
		{
			this.SendPropertyChanging();
			entity.VehicleConfig = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleConfigAttribute")]
	public partial class VehicleConfigAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AttributeID;
		
		private int _VehicleConfigID;
		
		private EntityRef<ConfigAttribute> _ConfigAttribute;
		
		private EntityRef<VehicleConfig> _VehicleConfig;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttributeIDChanging(int value);
    partial void OnAttributeIDChanged();
    partial void OnVehicleConfigIDChanging(int value);
    partial void OnVehicleConfigIDChanged();
    #endregion
		
		public VehicleConfigAttribute()
		{
			this._ConfigAttribute = default(EntityRef<ConfigAttribute>);
			this._VehicleConfig = default(EntityRef<VehicleConfig>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="Int NOT NULL")]
		public int AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._ConfigAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleConfigID", DbType="Int NOT NULL")]
		public int VehicleConfigID
		{
			get
			{
				return this._VehicleConfigID;
			}
			set
			{
				if ((this._VehicleConfigID != value))
				{
					if (this._VehicleConfig.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleConfigIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleConfigID = value;
					this.SendPropertyChanged("VehicleConfigID");
					this.OnVehicleConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigAttribute_VehicleConfigAttribute", Storage="_ConfigAttribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true)]
		public ConfigAttribute ConfigAttribute
		{
			get
			{
				return this._ConfigAttribute.Entity;
			}
			set
			{
				ConfigAttribute previousValue = this._ConfigAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ConfigAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigAttribute.Entity = null;
						previousValue.VehicleConfigAttributes.Remove(this);
					}
					this._ConfigAttribute.Entity = value;
					if ((value != null))
					{
						value.VehicleConfigAttributes.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(int);
					}
					this.SendPropertyChanged("ConfigAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleConfig_VehicleConfigAttribute", Storage="_VehicleConfig", ThisKey="VehicleConfigID", OtherKey="ID", IsForeignKey=true)]
		internal VehicleConfig VehicleConfig
		{
			get
			{
				return this._VehicleConfig.Entity;
			}
			set
			{
				VehicleConfig previousValue = this._VehicleConfig.Entity;
				if (((previousValue != value) 
							|| (this._VehicleConfig.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleConfig.Entity = null;
						previousValue.VehicleConfigAttributes.Remove(this);
					}
					this._VehicleConfig.Entity = value;
					if ((value != null))
					{
						value.VehicleConfigAttributes.Add(this);
						this._VehicleConfigID = value.ID;
					}
					else
					{
						this._VehicleConfigID = default(int);
					}
					this.SendPropertyChanged("VehicleConfig");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Note")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _vehiclePartID;
		
		private string _note1;
		
		private EntityRef<vcdb_VehiclePart> _vcdb_VehiclePart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnvehiclePartIDChanging(int value);
    partial void OnvehiclePartIDChanged();
    partial void Onnote1Changing(string value);
    partial void Onnote1Changed();
    #endregion
		
		public Note()
		{
			this._vcdb_VehiclePart = default(EntityRef<vcdb_VehiclePart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehiclePartID", DbType="Int NOT NULL")]
		public int vehiclePartID
		{
			get
			{
				return this._vehiclePartID;
			}
			set
			{
				if ((this._vehiclePartID != value))
				{
					if (this._vcdb_VehiclePart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehiclePartIDChanging(value);
					this.SendPropertyChanging();
					this._vehiclePartID = value;
					this.SendPropertyChanged("vehiclePartID");
					this.OnvehiclePartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="note", Storage="_note1", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string note1
		{
			get
			{
				return this._note1;
			}
			set
			{
				if ((this._note1 != value))
				{
					this.Onnote1Changing(value);
					this.SendPropertyChanging();
					this._note1 = value;
					this.SendPropertyChanged("note1");
					this.Onnote1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vcdb_VehiclePart_Note", Storage="_vcdb_VehiclePart", ThisKey="vehiclePartID", OtherKey="ID", IsForeignKey=true)]
		internal vcdb_VehiclePart vcdb_VehiclePart
		{
			get
			{
				return this._vcdb_VehiclePart.Entity;
			}
			set
			{
				vcdb_VehiclePart previousValue = this._vcdb_VehiclePart.Entity;
				if (((previousValue != value) 
							|| (this._vcdb_VehiclePart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vcdb_VehiclePart.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._vcdb_VehiclePart.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._vehiclePartID = value.ID;
					}
					else
					{
						this._vehiclePartID = default(int);
					}
					this.SendPropertyChanged("vcdb_VehiclePart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportType")]
	public partial class ReportType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private EntitySet<CustomerReport> _CustomerReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ReportType()
		{
			this._CustomerReports = new EntitySet<CustomerReport>(new Action<CustomerReport>(this.attach_CustomerReports), new Action<CustomerReport>(this.detach_CustomerReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportType_CustomerReport", Storage="_CustomerReports", ThisKey="ID", OtherKey="ReportTypeID")]
		public EntitySet<CustomerReport> CustomerReports
		{
			get
			{
				return this._CustomerReports;
			}
			set
			{
				this._CustomerReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerReports(CustomerReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportType = this;
		}
		
		private void detach_CustomerReports(CustomerReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerReport")]
	public partial class CustomerReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _customerID;
		
		private System.DateTime _created;
		
		private int _ReportTypeID;
		
		private EntityRef<ReportType> _ReportType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncustomerIDChanging(int value);
    partial void OncustomerIDChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnReportTypeIDChanging(int value);
    partial void OnReportTypeIDChanged();
    #endregion
		
		public CustomerReport()
		{
			this._ReportType = default(EntityRef<ReportType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int NOT NULL")]
		public int customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTypeID", DbType="Int NOT NULL")]
		public int ReportTypeID
		{
			get
			{
				return this._ReportTypeID;
			}
			set
			{
				if ((this._ReportTypeID != value))
				{
					if (this._ReportType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ReportTypeID = value;
					this.SendPropertyChanged("ReportTypeID");
					this.OnReportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportType_CustomerReport", Storage="_ReportType", ThisKey="ReportTypeID", OtherKey="ID", IsForeignKey=true)]
		public ReportType ReportType
		{
			get
			{
				return this._ReportType.Entity;
			}
			set
			{
				ReportType previousValue = this._ReportType.Entity;
				if (((previousValue != value) 
							|| (this._ReportType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportType.Entity = null;
						previousValue.CustomerReports.Remove(this);
					}
					this._ReportType.Entity = value;
					if ((value != null))
					{
						value.CustomerReports.Add(this);
						this._ReportTypeID = value.ID;
					}
					else
					{
						this._ReportTypeID = default(int);
					}
					this.SendPropertyChanged("ReportType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerReportPart")]
	public partial class CustomerReportPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _customerID;
		
		private int _partID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncustomerIDChanging(int value);
    partial void OncustomerIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    #endregion
		
		public CustomerReportPart()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int NOT NULL")]
		public int customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Website")]
	public partial class Website : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _url;
		
		private string _description;
		
		private EntitySet<Menu> _Menus;
		
		private EntitySet<SiteContent> _SiteContents;
		
		private EntitySet<LandingPage> _LandingPages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Website()
		{
			this._Menus = new EntitySet<Menu>(new Action<Menu>(this.attach_Menus), new Action<Menu>(this.detach_Menus));
			this._SiteContents = new EntitySet<SiteContent>(new Action<SiteContent>(this.attach_SiteContents), new Action<SiteContent>(this.detach_SiteContents));
			this._LandingPages = new EntitySet<LandingPage>(new Action<LandingPage>(this.attach_LandingPages), new Action<LandingPage>(this.detach_LandingPages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255)")]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(255)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Website_Menu", Storage="_Menus", ThisKey="ID", OtherKey="websiteID")]
		public EntitySet<Menu> Menus
		{
			get
			{
				return this._Menus;
			}
			set
			{
				this._Menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Website_SiteContent", Storage="_SiteContents", ThisKey="ID", OtherKey="websiteID")]
		public EntitySet<SiteContent> SiteContents
		{
			get
			{
				return this._SiteContents;
			}
			set
			{
				this._SiteContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Website_LandingPage", Storage="_LandingPages", ThisKey="ID", OtherKey="websiteID")]
		public EntitySet<LandingPage> LandingPages
		{
			get
			{
				return this._LandingPages;
			}
			set
			{
				this._LandingPages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Website = this;
		}
		
		private void detach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Website = null;
		}
		
		private void attach_SiteContents(SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.Website = this;
		}
		
		private void detach_SiteContents(SiteContent entity)
		{
			this.SendPropertyChanging();
			entity.Website = null;
		}
		
		private void attach_LandingPages(LandingPage entity)
		{
			this.SendPropertyChanging();
			entity.Website = this;
		}
		
		private void detach_LandingPages(LandingPage entity)
		{
			this.SendPropertyChanging();
			entity.Website = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustUserWebProperties")]
	public partial class CustUserWebProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Guid _userID;
		
		private int _webPropID;
		
		private EntitySet<WebProperty> _WebProperties;
		
		private EntityRef<CustomerUser> _CustomerUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIDChanging(System.Guid value);
    partial void OnuserIDChanged();
    partial void OnwebPropIDChanging(int value);
    partial void OnwebPropIDChanged();
    #endregion
		
		public CustUserWebProperty()
		{
			this._WebProperties = new EntitySet<WebProperty>(new Action<WebProperty>(this.attach_WebProperties), new Action<WebProperty>(this.detach_WebProperties));
			this._CustomerUser = default(EntityRef<CustomerUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._CustomerUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_webPropID", DbType="Int NOT NULL")]
		public int webPropID
		{
			get
			{
				return this._webPropID;
			}
			set
			{
				if ((this._webPropID != value))
				{
					this.OnwebPropIDChanging(value);
					this.SendPropertyChanging();
					this._webPropID = value;
					this.SendPropertyChanged("webPropID");
					this.OnwebPropIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustUserWebProperty_WebProperty", Storage="_WebProperties", ThisKey="webPropID", OtherKey="id")]
		public EntitySet<WebProperty> WebProperties
		{
			get
			{
				return this._WebProperties;
			}
			set
			{
				this._WebProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerUser_CustUserWebProperty", Storage="_CustomerUser", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
		public CustomerUser CustomerUser
		{
			get
			{
				return this._CustomerUser.Entity;
			}
			set
			{
				CustomerUser previousValue = this._CustomerUser.Entity;
				if (((previousValue != value) 
							|| (this._CustomerUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerUser.Entity = null;
						previousValue.CustUserWebProperties.Remove(this);
					}
					this._CustomerUser.Entity = value;
					if ((value != null))
					{
						value.CustUserWebProperties.Add(this);
						this._userID = value.id;
					}
					else
					{
						this._userID = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WebProperties(WebProperty entity)
		{
			this.SendPropertyChanging();
			entity.CustUserWebProperty = this;
		}
		
		private void detach_WebProperties(WebProperty entity)
		{
			this.SendPropertyChanging();
			entity.CustUserWebProperty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebProperties")]
	public partial class WebProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _customerID;
		
		private System.Guid _badgeID;
		
		private string _url;
		
		private bool _isEnabled;
		
		private string _sellerID;
		
		private int _typeID;
		
		private bool _isFinalApproved;
		
		private System.Nullable<System.DateTime> _isEnabledDate;
		
		private bool _isDenied;
		
		private System.Nullable<System.DateTime> _requestedDate;
		
		private System.DateTime _addedDate;
		
		private EntityRef<WebPropertyType> _WebPropertyTypes;
		
		private EntitySet<WebPropNote> _WebPropNotes;
		
		private EntitySet<WebPropRequirementCheck> _WebPropRequirementChecks;
		
		private EntityRef<CustUserWebProperty> _CustUserWebProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncust_IDChanging(int value);
    partial void Oncust_IDChanged();
    partial void OnbadgeIDChanging(System.Guid value);
    partial void OnbadgeIDChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnisEnabledChanging(bool value);
    partial void OnisEnabledChanged();
    partial void OnsellerIDChanging(string value);
    partial void OnsellerIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnisFinalApprovedChanging(bool value);
    partial void OnisFinalApprovedChanged();
    partial void OnisEnabledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnisEnabledDateChanged();
    partial void OnisDeniedChanging(bool value);
    partial void OnisDeniedChanged();
    partial void OnrequestedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnrequestedDateChanged();
    partial void OnaddedDateChanging(System.DateTime value);
    partial void OnaddedDateChanged();
    #endregion
		
		public WebProperty()
		{
			this._WebPropertyTypes = default(EntityRef<WebPropertyType>);
			this._WebPropNotes = new EntitySet<WebPropNote>(new Action<WebPropNote>(this.attach_WebPropNotes), new Action<WebPropNote>(this.detach_WebPropNotes));
			this._WebPropRequirementChecks = new EntitySet<WebPropRequirementCheck>(new Action<WebPropRequirementCheck>(this.attach_WebPropRequirementChecks), new Action<WebPropRequirementCheck>(this.detach_WebPropRequirementChecks));
			this._CustUserWebProperty = default(EntityRef<CustUserWebProperty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._CustUserWebProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int")]
		public int cust_ID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.Oncust_IDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("cust_ID");
					this.Oncust_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_badgeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid badgeID
		{
			get
			{
				return this._badgeID;
			}
			set
			{
				if ((this._badgeID != value))
				{
					this.OnbadgeIDChanging(value);
					this.SendPropertyChanging();
					this._badgeID = value;
					this.SendPropertyChanged("badgeID");
					this.OnbadgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isEnabled", DbType="Bit NOT NULL")]
		public bool isEnabled
		{
			get
			{
				return this._isEnabled;
			}
			set
			{
				if ((this._isEnabled != value))
				{
					this.OnisEnabledChanging(value);
					this.SendPropertyChanging();
					this._isEnabled = value;
					this.SendPropertyChanged("isEnabled");
					this.OnisEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sellerID", DbType="VarChar(50)")]
		public string sellerID
		{
			get
			{
				return this._sellerID;
			}
			set
			{
				if ((this._sellerID != value))
				{
					this.OnsellerIDChanging(value);
					this.SendPropertyChanging();
					this._sellerID = value;
					this.SendPropertyChanged("sellerID");
					this.OnsellerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFinalApproved")]
		public bool isFinalApproved
		{
			get
			{
				return this._isFinalApproved;
			}
			set
			{
				if ((this._isFinalApproved != value))
				{
					this.OnisFinalApprovedChanging(value);
					this.SendPropertyChanging();
					this._isFinalApproved = value;
					this.SendPropertyChanged("isFinalApproved");
					this.OnisFinalApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isEnabledDate")]
		public System.Nullable<System.DateTime> isEnabledDate
		{
			get
			{
				return this._isEnabledDate;
			}
			set
			{
				if ((this._isEnabledDate != value))
				{
					this.OnisEnabledDateChanging(value);
					this.SendPropertyChanging();
					this._isEnabledDate = value;
					this.SendPropertyChanged("isEnabledDate");
					this.OnisEnabledDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDenied")]
		public bool isDenied
		{
			get
			{
				return this._isDenied;
			}
			set
			{
				if ((this._isDenied != value))
				{
					this.OnisDeniedChanging(value);
					this.SendPropertyChanging();
					this._isDenied = value;
					this.SendPropertyChanged("isDenied");
					this.OnisDeniedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_requestedDate")]
		public System.Nullable<System.DateTime> requestedDate
		{
			get
			{
				return this._requestedDate;
			}
			set
			{
				if ((this._requestedDate != value))
				{
					this.OnrequestedDateChanging(value);
					this.SendPropertyChanging();
					this._requestedDate = value;
					this.SendPropertyChanged("requestedDate");
					this.OnrequestedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedDate")]
		public System.DateTime addedDate
		{
			get
			{
				return this._addedDate;
			}
			set
			{
				if ((this._addedDate != value))
				{
					this.OnaddedDateChanging(value);
					this.SendPropertyChanging();
					this._addedDate = value;
					this.SendPropertyChanged("addedDate");
					this.OnaddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebProperty_WebPropertyType", Storage="_WebPropertyTypes", ThisKey="typeID", OtherKey="typeID", IsUnique=true, IsForeignKey=false)]
		public WebPropertyType WebPropertyTypes
		{
			get
			{
				return this._WebPropertyTypes.Entity;
			}
			set
			{
				WebPropertyType previousValue = this._WebPropertyTypes.Entity;
				if (((previousValue != value) 
							|| (this._WebPropertyTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebPropertyTypes.Entity = null;
						previousValue.WebProperty = null;
					}
					this._WebPropertyTypes.Entity = value;
					if ((value != null))
					{
						value.WebProperty = this;
					}
					this.SendPropertyChanged("WebPropertyTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebProperty_WebPropNote", Storage="_WebPropNotes", ThisKey="id", OtherKey="webPropID")]
		public EntitySet<WebPropNote> WebPropNotes
		{
			get
			{
				return this._WebPropNotes;
			}
			set
			{
				this._WebPropNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebProperty_WebPropRequirementCheck", Storage="_WebPropRequirementChecks", ThisKey="id", OtherKey="WebPropertiesID")]
		public EntitySet<WebPropRequirementCheck> WebPropRequirementChecks
		{
			get
			{
				return this._WebPropRequirementChecks;
			}
			set
			{
				this._WebPropRequirementChecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustUserWebProperty_WebProperty", Storage="_CustUserWebProperty", ThisKey="id", OtherKey="webPropID", IsForeignKey=true)]
		public CustUserWebProperty CustUserWebProperty
		{
			get
			{
				return this._CustUserWebProperty.Entity;
			}
			set
			{
				CustUserWebProperty previousValue = this._CustUserWebProperty.Entity;
				if (((previousValue != value) 
							|| (this._CustUserWebProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustUserWebProperty.Entity = null;
						previousValue.WebProperties.Remove(this);
					}
					this._CustUserWebProperty.Entity = value;
					if ((value != null))
					{
						value.WebProperties.Add(this);
						this._id = value.webPropID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("CustUserWebProperty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WebPropNotes(WebPropNote entity)
		{
			this.SendPropertyChanging();
			entity.WebProperty = this;
		}
		
		private void detach_WebPropNotes(WebPropNote entity)
		{
			this.SendPropertyChanging();
			entity.WebProperty = null;
		}
		
		private void attach_WebPropRequirementChecks(WebPropRequirementCheck entity)
		{
			this.SendPropertyChanging();
			entity.WebProperty = this;
		}
		
		private void detach_WebPropRequirementChecks(WebPropRequirementCheck entity)
		{
			this.SendPropertyChanging();
			entity.WebProperty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebPropertyTypes")]
	public partial class WebPropertyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _typeID;
		
		private string _type;
		
		private EntityRef<WebProperty> _WebProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public WebPropertyType()
		{
			this._WebProperty = default(EntityRef<WebProperty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._WebProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebProperty_WebPropertyType", Storage="_WebProperty", ThisKey="typeID", OtherKey="typeID", IsForeignKey=true)]
		public WebProperty WebProperty
		{
			get
			{
				return this._WebProperty.Entity;
			}
			set
			{
				WebProperty previousValue = this._WebProperty.Entity;
				if (((previousValue != value) 
							|| (this._WebProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebProperty.Entity = null;
						previousValue.WebPropertyTypes = null;
					}
					this._WebProperty.Entity = value;
					if ((value != null))
					{
						value.WebPropertyTypes = this;
						this._typeID = value.typeID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("WebProperty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfiles")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _customerID;
		
		private System.Nullable<int> _custID;
		
		private string _email;
		
		private string _IP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncustomerIDChanging(System.Nullable<int> value);
    partial void OncustomerIDChanged();
    partial void OncustIDChanging(System.Nullable<int> value);
    partial void OncustIDChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
		
		public UserProfile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerID", DbType="Int")]
		public System.Nullable<int> customerID
		{
			get
			{
				return this._customerID;
			}
			set
			{
				if ((this._customerID != value))
				{
					this.OncustomerIDChanging(value);
					this.SendPropertyChanging();
					this._customerID = value;
					this.SendPropertyChanged("customerID");
					this.OncustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custID", DbType="Int")]
		public System.Nullable<int> custID
		{
			get
			{
				return this._custID;
			}
			set
			{
				if ((this._custID != value))
				{
					this.OncustIDChanging(value);
					this.SendPropertyChanging();
					this._custID = value;
					this.SendPropertyChanged("custID");
					this.OncustIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(25)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LandingPage")]
	public partial class LandingPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _websiteID;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private string _url;
		
		private string _pageContent;
		
		private string _name;
		
		private string _linkClasses;
		
		private bool _newWindow;
		
		private string _conversionID;
		
		private string _conversionLabel;
		
		private string _menuPosition;
		
		private EntitySet<LandingPageData> _LandingPageDatas;
		
		private EntitySet<LandingPageImage> _LandingPageImages;
		
		private EntityRef<Website> _Website;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnwebsiteIDChanging(int value);
    partial void OnwebsiteIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnpageContentChanging(string value);
    partial void OnpageContentChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlinkClassesChanging(string value);
    partial void OnlinkClassesChanged();
    partial void OnnewWindowChanging(bool value);
    partial void OnnewWindowChanged();
    partial void OnconversionIDChanging(string value);
    partial void OnconversionIDChanged();
    partial void OnconversionLabelChanging(string value);
    partial void OnconversionLabelChanged();
    partial void OnmenuPositionChanging(string value);
    partial void OnmenuPositionChanged();
    #endregion
		
		public LandingPage()
		{
			this._LandingPageDatas = new EntitySet<LandingPageData>(new Action<LandingPageData>(this.attach_LandingPageDatas), new Action<LandingPageData>(this.detach_LandingPageDatas));
			this._LandingPageImages = new EntitySet<LandingPageImage>(new Action<LandingPageImage>(this.attach_LandingPageImages), new Action<LandingPageImage>(this.detach_LandingPageImages));
			this._Website = default(EntityRef<Website>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_websiteID", DbType="Int NOT NULL")]
		public int websiteID
		{
			get
			{
				return this._websiteID;
			}
			set
			{
				if ((this._websiteID != value))
				{
					if (this._Website.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnwebsiteIDChanging(value);
					this.SendPropertyChanging();
					this._websiteID = value;
					this.SendPropertyChanged("websiteID");
					this.OnwebsiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pageContent", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string pageContent
		{
			get
			{
				return this._pageContent;
			}
			set
			{
				if ((this._pageContent != value))
				{
					this.OnpageContentChanging(value);
					this.SendPropertyChanging();
					this._pageContent = value;
					this.SendPropertyChanged("pageContent");
					this.OnpageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_linkClasses", DbType="VarChar(255) NULL")]
		public string linkClasses
		{
			get
			{
				return this._linkClasses;
			}
			set
			{
				if ((this._linkClasses != value))
				{
					this.OnlinkClassesChanging(value);
					this.SendPropertyChanging();
					this._linkClasses = value;
					this.SendPropertyChanged("linkClasses");
					this.OnlinkClassesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newWindow", DbType="Bit NOT NULL")]
		public bool newWindow
		{
			get
			{
				return this._newWindow;
			}
			set
			{
				if ((this._newWindow != value))
				{
					this.OnnewWindowChanging(value);
					this.SendPropertyChanging();
					this._newWindow = value;
					this.SendPropertyChanged("newWindow");
					this.OnnewWindowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_conversionID", DbType="VarChar(150) NULL")]
		public string conversionID
		{
			get
			{
				return this._conversionID;
			}
			set
			{
				if ((this._conversionID != value))
				{
					this.OnconversionIDChanging(value);
					this.SendPropertyChanging();
					this._conversionID = value;
					this.SendPropertyChanged("conversionID");
					this.OnconversionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_conversionLabel", DbType="VarChar(150) NULL")]
		public string conversionLabel
		{
			get
			{
				return this._conversionLabel;
			}
			set
			{
				if ((this._conversionLabel != value))
				{
					this.OnconversionLabelChanging(value);
					this.SendPropertyChanging();
					this._conversionLabel = value;
					this.SendPropertyChanged("conversionLabel");
					this.OnconversionLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuPosition", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string menuPosition
		{
			get
			{
				return this._menuPosition;
			}
			set
			{
				if ((this._menuPosition != value))
				{
					this.OnmenuPositionChanging(value);
					this.SendPropertyChanging();
					this._menuPosition = value;
					this.SendPropertyChanged("menuPosition");
					this.OnmenuPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandingPage_LandingPageData", Storage="_LandingPageDatas", ThisKey="id", OtherKey="landingPageID")]
		public EntitySet<LandingPageData> LandingPageDatas
		{
			get
			{
				return this._LandingPageDatas;
			}
			set
			{
				this._LandingPageDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandingPage_LandingPageImage", Storage="_LandingPageImages", ThisKey="id", OtherKey="landingPageID")]
		public EntitySet<LandingPageImage> LandingPageImages
		{
			get
			{
				return this._LandingPageImages;
			}
			set
			{
				this._LandingPageImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Website_LandingPage", Storage="_Website", ThisKey="websiteID", OtherKey="ID", IsForeignKey=true)]
		public Website Website
		{
			get
			{
				return this._Website.Entity;
			}
			set
			{
				Website previousValue = this._Website.Entity;
				if (((previousValue != value) 
							|| (this._Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Website.Entity = null;
						previousValue.LandingPages.Remove(this);
					}
					this._Website.Entity = value;
					if ((value != null))
					{
						value.LandingPages.Add(this);
						this._websiteID = value.ID;
					}
					else
					{
						this._websiteID = default(int);
					}
					this.SendPropertyChanged("Website");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LandingPageDatas(LandingPageData entity)
		{
			this.SendPropertyChanging();
			entity.LandingPage = this;
		}
		
		private void detach_LandingPageDatas(LandingPageData entity)
		{
			this.SendPropertyChanging();
			entity.LandingPage = null;
		}
		
		private void attach_LandingPageImages(LandingPageImage entity)
		{
			this.SendPropertyChanging();
			entity.LandingPage = this;
		}
		
		private void detach_LandingPageImages(LandingPageImage entity)
		{
			this.SendPropertyChanging();
			entity.LandingPage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LandingPageData")]
	public partial class LandingPageData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _landingPageID;
		
		private string _dataKey;
		
		private string _dataValue;
		
		private EntityRef<LandingPage> _LandingPage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlandingPageIDChanging(int value);
    partial void OnlandingPageIDChanged();
    partial void OndataKeyChanging(string value);
    partial void OndataKeyChanged();
    partial void OndataValueChanging(string value);
    partial void OndataValueChanged();
    #endregion
		
		public LandingPageData()
		{
			this._LandingPage = default(EntityRef<LandingPage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_landingPageID", DbType="Int NOT NULL")]
		public int landingPageID
		{
			get
			{
				return this._landingPageID;
			}
			set
			{
				if ((this._landingPageID != value))
				{
					if (this._LandingPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlandingPageIDChanging(value);
					this.SendPropertyChanging();
					this._landingPageID = value;
					this.SendPropertyChanged("landingPageID");
					this.OnlandingPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataKey", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string dataKey
		{
			get
			{
				return this._dataKey;
			}
			set
			{
				if ((this._dataKey != value))
				{
					this.OndataKeyChanging(value);
					this.SendPropertyChanging();
					this._dataKey = value;
					this.SendPropertyChanged("dataKey");
					this.OndataKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataValue", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string dataValue
		{
			get
			{
				return this._dataValue;
			}
			set
			{
				if ((this._dataValue != value))
				{
					this.OndataValueChanging(value);
					this.SendPropertyChanging();
					this._dataValue = value;
					this.SendPropertyChanged("dataValue");
					this.OndataValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandingPage_LandingPageData", Storage="_LandingPage", ThisKey="landingPageID", OtherKey="id", IsForeignKey=true)]
		internal LandingPage LandingPage
		{
			get
			{
				return this._LandingPage.Entity;
			}
			set
			{
				LandingPage previousValue = this._LandingPage.Entity;
				if (((previousValue != value) 
							|| (this._LandingPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LandingPage.Entity = null;
						previousValue.LandingPageDatas.Remove(this);
					}
					this._LandingPage.Entity = value;
					if ((value != null))
					{
						value.LandingPageDatas.Add(this);
						this._landingPageID = value.id;
					}
					else
					{
						this._landingPageID = default(int);
					}
					this.SendPropertyChanged("LandingPage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LandingPageImages")]
	public partial class LandingPageImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _landingPageID;
		
		private string _url;
		
		private int _sort;
		
		private EntityRef<LandingPage> _LandingPage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlandingPageIDChanging(int value);
    partial void OnlandingPageIDChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public LandingPageImage()
		{
			this._LandingPage = default(EntityRef<LandingPage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_landingPageID", DbType="Int NOT NULL")]
		public int landingPageID
		{
			get
			{
				return this._landingPageID;
			}
			set
			{
				if ((this._landingPageID != value))
				{
					if (this._LandingPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlandingPageIDChanging(value);
					this.SendPropertyChanging();
					this._landingPageID = value;
					this.SendPropertyChanged("landingPageID");
					this.OnlandingPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandingPage_LandingPageImage", Storage="_LandingPage", ThisKey="landingPageID", OtherKey="id", IsForeignKey=true)]
		internal LandingPage LandingPage
		{
			get
			{
				return this._LandingPage.Entity;
			}
			set
			{
				LandingPage previousValue = this._LandingPage.Entity;
				if (((previousValue != value) 
							|| (this._LandingPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LandingPage.Entity = null;
						previousValue.LandingPageImages.Remove(this);
					}
					this._LandingPage.Entity = value;
					if ((value != null))
					{
						value.LandingPageImages.Add(this);
						this._landingPageID = value.id;
					}
					else
					{
						this._landingPageID = default(int);
					}
					this.SendPropertyChanged("LandingPage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cabelas")]
	public partial class Cabela : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cabelasID;
		
		private System.Nullable<int> _priceCode;
		
		private string _cabelasPart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncabelasIDChanging(int value);
    partial void OncabelasIDChanged();
    partial void OnpriceCodeChanging(System.Nullable<int> value);
    partial void OnpriceCodeChanged();
    partial void OncabelasPartChanging(string value);
    partial void OncabelasPartChanged();
    #endregion
		
		public Cabela()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cabelasID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cabelasID
		{
			get
			{
				return this._cabelasID;
			}
			set
			{
				if ((this._cabelasID != value))
				{
					this.OncabelasIDChanging(value);
					this.SendPropertyChanging();
					this._cabelasID = value;
					this.SendPropertyChanged("cabelasID");
					this.OncabelasIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceCode", DbType="Int")]
		public System.Nullable<int> priceCode
		{
			get
			{
				return this._priceCode;
			}
			set
			{
				if ((this._priceCode != value))
				{
					this.OnpriceCodeChanging(value);
					this.SendPropertyChanging();
					this._priceCode = value;
					this.SendPropertyChanged("priceCode");
					this.OnpriceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cabelasPart", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string cabelasPart
		{
			get
			{
				return this._cabelasPart;
			}
			set
			{
				if ((this._cabelasPart != value))
				{
					this.OncabelasPartChanging(value);
					this.SendPropertyChanging();
					this._cabelasPart = value;
					this.SendPropertyChanged("cabelasPart");
					this.OncabelasPartChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KioskOrderItems")]
	public partial class KioskOrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _itemID;
		
		private int _orderID;
		
		private int _partID;
		
		private int _quantity;
		
		private decimal _price;
		
		private int _isFulfilled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void OnorderIDChanging(int value);
    partial void OnorderIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnisFulfilledChanging(int value);
    partial void OnisFulfilledChanged();
    #endregion
		
		public KioskOrderItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="Int NOT NULL")]
		public int orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFulfilled", DbType="Int NOT NULL")]
		public int isFulfilled
		{
			get
			{
				return this._isFulfilled;
			}
			set
			{
				if ((this._isFulfilled != value))
				{
					this.OnisFulfilledChanging(value);
					this.SendPropertyChanging();
					this._isFulfilled = value;
					this.SendPropertyChanged("isFulfilled");
					this.OnisFulfilledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartChange2012")]
	public partial class PartChange2012
	{
		
		private int _partID;
		
		private int _priceCode;
		
		private decimal _list;
		
		private decimal _map;
		
		private decimal _jobber;
		
		private int _newPartID;
		
		private int _newPriceCode;
		
		private decimal _newList;
		
		private decimal _newMap;
		
		private decimal _newJobber;
		
		private System.Nullable<double> _UPC;
		
		public PartChange2012()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this._partID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceCode", DbType="Int NOT NULL")]
		public int priceCode
		{
			get
			{
				return this._priceCode;
			}
			set
			{
				if ((this._priceCode != value))
				{
					this._priceCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_list", DbType="Money NOT NULL")]
		public decimal list
		{
			get
			{
				return this._list;
			}
			set
			{
				if ((this._list != value))
				{
					this._list = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_map", DbType="Money NOT NULL")]
		public decimal map
		{
			get
			{
				return this._map;
			}
			set
			{
				if ((this._map != value))
				{
					this._map = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobber", DbType="Money NOT NULL")]
		public decimal jobber
		{
			get
			{
				return this._jobber;
			}
			set
			{
				if ((this._jobber != value))
				{
					this._jobber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newPartID", DbType="Int NOT NULL")]
		public int newPartID
		{
			get
			{
				return this._newPartID;
			}
			set
			{
				if ((this._newPartID != value))
				{
					this._newPartID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newPriceCode", DbType="Int NOT NULL")]
		public int newPriceCode
		{
			get
			{
				return this._newPriceCode;
			}
			set
			{
				if ((this._newPriceCode != value))
				{
					this._newPriceCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newList", DbType="Money NOT NULL")]
		public decimal newList
		{
			get
			{
				return this._newList;
			}
			set
			{
				if ((this._newList != value))
				{
					this._newList = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newMap", DbType="Money NOT NULL")]
		public decimal newMap
		{
			get
			{
				return this._newMap;
			}
			set
			{
				if ((this._newMap != value))
				{
					this._newMap = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_newJobber", DbType="Money NOT NULL")]
		public decimal newJobber
		{
			get
			{
				return this._newJobber;
			}
			set
			{
				if ((this._newJobber != value))
				{
					this._newJobber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPC", DbType="Float")]
		public System.Nullable<double> UPC
		{
			get
			{
				return this._UPC;
			}
			set
			{
				if ((this._UPC != value))
				{
					this._UPC = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncludedPart")]
	public partial class IncludedPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _partID;
		
		private int _includedID;
		
		private int _quantity;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Part> _ParentPart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnincludedIDChanging(int value);
    partial void OnincludedIDChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public IncludedPart()
		{
			this._Part = default(EntityRef<Part>);
			this._ParentPart = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._ParentPart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_includedID", DbType="Int NOT NULL")]
		public int includedID
		{
			get
			{
				return this._includedID;
			}
			set
			{
				if ((this._includedID != value))
				{
					this.OnincludedIDChanging(value);
					this.SendPropertyChanging();
					this._includedID = value;
					this.SendPropertyChanged("includedID");
					this.OnincludedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncludedPart_Part", Storage="_Part", ThisKey="includedID", OtherKey="partID", IsUnique=true, IsForeignKey=false)]
		internal Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.IncludedPart = null;
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.IncludedPart = this;
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_IncludedPart", Storage="_ParentPart", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		internal Part ParentPart
		{
			get
			{
				return this._ParentPart.Entity;
			}
			set
			{
				Part previousValue = this._ParentPart.Entity;
				if (((previousValue != value) 
							|| (this._ParentPart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentPart.Entity = null;
						previousValue.IncludedParts.Remove(this);
					}
					this._ParentPart.Entity = value;
					if ((value != null))
					{
						value.IncludedParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("ParentPart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartGroup")]
	public partial class PartGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<PartGroupPart> _Parts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public PartGroup()
		{
			this._Parts = new EntitySet<PartGroupPart>(new Action<PartGroupPart>(this.attach_Parts), new Action<PartGroupPart>(this.detach_Parts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartGroup_PartGroupPart", Storage="_Parts", ThisKey="id", OtherKey="partGroupID")]
		public EntitySet<PartGroupPart> Parts
		{
			get
			{
				return this._Parts;
			}
			set
			{
				this._Parts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parts(PartGroupPart entity)
		{
			this.SendPropertyChanging();
			entity.PartGroup = this;
		}
		
		private void detach_Parts(PartGroupPart entity)
		{
			this.SendPropertyChanging();
			entity.PartGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartGroupPart")]
	public partial class PartGroupPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _partGroupID;
		
		private int _partID;
		
		private int _sort;
		
		private EntityRef<PartGroup> _PartGroup;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpartGroupIDChanging(int value);
    partial void OnpartGroupIDChanged();
    partial void OnpartIDChanging(int value);
    partial void OnpartIDChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    #endregion
		
		public PartGroupPart()
		{
			this._PartGroup = default(EntityRef<PartGroup>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partGroupID", DbType="Int NOT NULL")]
		public int partGroupID
		{
			get
			{
				return this._partGroupID;
			}
			set
			{
				if ((this._partGroupID != value))
				{
					if (this._PartGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartGroupIDChanging(value);
					this.SendPropertyChanging();
					this._partGroupID = value;
					this.SendPropertyChanged("partGroupID");
					this.OnpartGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartIDChanging(value);
					this.SendPropertyChanging();
					this._partID = value;
					this.SendPropertyChanged("partID");
					this.OnpartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartGroup_PartGroupPart", Storage="_PartGroup", ThisKey="partGroupID", OtherKey="id", IsForeignKey=true)]
		internal PartGroup PartGroup
		{
			get
			{
				return this._PartGroup.Entity;
			}
			set
			{
				PartGroup previousValue = this._PartGroup.Entity;
				if (((previousValue != value) 
							|| (this._PartGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartGroup.Entity = null;
						previousValue.Parts.Remove(this);
					}
					this._PartGroup.Entity = value;
					if ((value != null))
					{
						value.Parts.Add(this);
						this._partGroupID = value.id;
					}
					else
					{
						this._partGroupID = default(int);
					}
					this.SendPropertyChanged("PartGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_PartGroupPart", Storage="_Part", ThisKey="partID", OtherKey="partID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.PartGroupParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.PartGroupParts.Add(this);
						this._partID = value.partID;
					}
					else
					{
						this._partID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApiKey")]
	public partial class ApiKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _api_key;
		
		private System.Guid _type_id;
		
		private System.Guid _user_id;
		
		private System.DateTime _date_added;
		
		private EntitySet<ApiAccess> _ApiAccesses;
		
		private EntityRef<CustomerUser> _CustomerUser;
		
		private EntityRef<ApiKeyType> _ApiKeyType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onapi_keyChanging(System.Guid value);
    partial void Onapi_keyChanged();
    partial void Ontype_idChanging(System.Guid value);
    partial void Ontype_idChanged();
    partial void Onuser_idChanging(System.Guid value);
    partial void Onuser_idChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    #endregion
		
		public ApiKey()
		{
			this._ApiAccesses = new EntitySet<ApiAccess>(new Action<ApiAccess>(this.attach_ApiAccesses), new Action<ApiAccess>(this.detach_ApiAccesses));
			this._CustomerUser = default(EntityRef<CustomerUser>);
			this._ApiKeyType = default(EntityRef<ApiKeyType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_api_key", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid api_key
		{
			get
			{
				return this._api_key;
			}
			set
			{
				if ((this._api_key != value))
				{
					this.Onapi_keyChanging(value);
					this.SendPropertyChanging();
					this._api_key = value;
					this.SendPropertyChanged("api_key");
					this.Onapi_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid type_id
		{
			get
			{
				return this._type_id;
			}
			set
			{
				if ((this._type_id != value))
				{
					if (this._ApiKeyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontype_idChanging(value);
					this.SendPropertyChanging();
					this._type_id = value;
					this.SendPropertyChanged("type_id");
					this.Ontype_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._CustomerUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApiKey_ApiAccess", Storage="_ApiAccesses", ThisKey="id", OtherKey="key_id")]
		public EntitySet<ApiAccess> ApiAccesses
		{
			get
			{
				return this._ApiAccesses;
			}
			set
			{
				this._ApiAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerUser_ApiKey", Storage="_CustomerUser", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public CustomerUser CustomerUser
		{
			get
			{
				return this._CustomerUser.Entity;
			}
			set
			{
				CustomerUser previousValue = this._CustomerUser.Entity;
				if (((previousValue != value) 
							|| (this._CustomerUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerUser.Entity = null;
						previousValue.ApiKeys.Remove(this);
					}
					this._CustomerUser.Entity = value;
					if ((value != null))
					{
						value.ApiKeys.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApiKeyType_ApiKey", Storage="_ApiKeyType", ThisKey="type_id", OtherKey="id", IsForeignKey=true)]
		public ApiKeyType ApiKeyType
		{
			get
			{
				return this._ApiKeyType.Entity;
			}
			set
			{
				ApiKeyType previousValue = this._ApiKeyType.Entity;
				if (((previousValue != value) 
							|| (this._ApiKeyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApiKeyType.Entity = null;
						previousValue.ApiKeys.Remove(this);
					}
					this._ApiKeyType.Entity = value;
					if ((value != null))
					{
						value.ApiKeys.Add(this);
						this._type_id = value.id;
					}
					else
					{
						this._type_id = default(System.Guid);
					}
					this.SendPropertyChanged("ApiKeyType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApiAccesses(ApiAccess entity)
		{
			this.SendPropertyChanging();
			entity.ApiKey = this;
		}
		
		private void detach_ApiAccesses(ApiAccess entity)
		{
			this.SendPropertyChanging();
			entity.ApiKey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApiKeyType")]
	public partial class ApiKeyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _type;
		
		private System.DateTime _date_added;
		
		private EntitySet<ApiKey> _ApiKeys;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    #endregion
		
		public ApiKeyType()
		{
			this._ApiKeys = new EntitySet<ApiKey>(new Action<ApiKey>(this.attach_ApiKeys), new Action<ApiKey>(this.detach_ApiKeys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(500)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApiKeyType_ApiKey", Storage="_ApiKeys", ThisKey="id", OtherKey="type_id")]
		public EntitySet<ApiKey> ApiKeys
		{
			get
			{
				return this._ApiKeys;
			}
			set
			{
				this._ApiKeys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApiKeys(ApiKey entity)
		{
			this.SendPropertyChanging();
			entity.ApiKeyType = this;
		}
		
		private void detach_ApiKeys(ApiKey entity)
		{
			this.SendPropertyChanging();
			entity.ApiKeyType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApiAccess")]
	public partial class ApiAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _key_id;
		
		private System.Guid _module_id;
		
		private EntityRef<ApiKey> _ApiKey;
		
		private EntityRef<ApiModule> _ApiModule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Onkey_idChanging(System.Guid value);
    partial void Onkey_idChanged();
    partial void Onmodule_idChanging(System.Guid value);
    partial void Onmodule_idChanged();
    #endregion
		
		public ApiAccess()
		{
			this._ApiKey = default(EntityRef<ApiKey>);
			this._ApiModule = default(EntityRef<ApiModule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_key_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid key_id
		{
			get
			{
				return this._key_id;
			}
			set
			{
				if ((this._key_id != value))
				{
					if (this._ApiKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onkey_idChanging(value);
					this.SendPropertyChanging();
					this._key_id = value;
					this.SendPropertyChanged("key_id");
					this.Onkey_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_module_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid module_id
		{
			get
			{
				return this._module_id;
			}
			set
			{
				if ((this._module_id != value))
				{
					if (this._ApiModule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmodule_idChanging(value);
					this.SendPropertyChanging();
					this._module_id = value;
					this.SendPropertyChanged("module_id");
					this.Onmodule_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApiKey_ApiAccess", Storage="_ApiKey", ThisKey="key_id", OtherKey="id", IsForeignKey=true)]
		public ApiKey ApiKey
		{
			get
			{
				return this._ApiKey.Entity;
			}
			set
			{
				ApiKey previousValue = this._ApiKey.Entity;
				if (((previousValue != value) 
							|| (this._ApiKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApiKey.Entity = null;
						previousValue.ApiAccesses.Remove(this);
					}
					this._ApiKey.Entity = value;
					if ((value != null))
					{
						value.ApiAccesses.Add(this);
						this._key_id = value.id;
					}
					else
					{
						this._key_id = default(System.Guid);
					}
					this.SendPropertyChanged("ApiKey");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApiModule_ApiAccess", Storage="_ApiModule", ThisKey="module_id", OtherKey="id", IsForeignKey=true)]
		public ApiModule ApiModule
		{
			get
			{
				return this._ApiModule.Entity;
			}
			set
			{
				ApiModule previousValue = this._ApiModule.Entity;
				if (((previousValue != value) 
							|| (this._ApiModule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApiModule.Entity = null;
						previousValue.ApiAccesses.Remove(this);
					}
					this._ApiModule.Entity = value;
					if ((value != null))
					{
						value.ApiAccesses.Add(this);
						this._module_id = value.id;
					}
					else
					{
						this._module_id = default(System.Guid);
					}
					this.SendPropertyChanged("ApiModule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApiModules")]
	public partial class ApiModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private System.Nullable<System.Guid> _access_level;
		
		private System.DateTime _date_added;
		
		private EntitySet<ApiAccess> _ApiAccesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onaccess_levelChanging(System.Nullable<System.Guid> value);
    partial void Onaccess_levelChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    #endregion
		
		public ApiModule()
		{
			this._ApiAccesses = new EntitySet<ApiAccess>(new Action<ApiAccess>(this.attach_ApiAccesses), new Action<ApiAccess>(this.detach_ApiAccesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_access_level", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> access_level
		{
			get
			{
				return this._access_level;
			}
			set
			{
				if ((this._access_level != value))
				{
					this.Onaccess_levelChanging(value);
					this.SendPropertyChanging();
					this._access_level = value;
					this.SendPropertyChanged("access_level");
					this.Onaccess_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApiModule_ApiAccess", Storage="_ApiAccesses", ThisKey="id", OtherKey="module_id")]
		public EntitySet<ApiAccess> ApiAccesses
		{
			get
			{
				return this._ApiAccesses;
			}
			set
			{
				this._ApiAccesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApiAccesses(ApiAccess entity)
		{
			this.SendPropertyChanging();
			entity.ApiModule = this;
		}
		
		private void detach_ApiAccesses(ApiAccess entity)
		{
			this.SendPropertyChanging();
			entity.ApiModule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthAccess")]
	public partial class AuthAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _userID;
		
		private System.Guid _AreaID;
		
		private System.DateTime _dateAdded;
		
		private EntitySet<AuthArea> _AuthAreas;
		
		private EntityRef<CustomerUser> _CustomerUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnuserIDChanging(System.Guid value);
    partial void OnuserIDChanged();
    partial void OnAreaIDChanging(System.Guid value);
    partial void OnAreaIDChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    #endregion
		
		public AuthAccess()
		{
			this._AuthAreas = new EntitySet<AuthArea>(new Action<AuthArea>(this.attach_AuthAreas), new Action<AuthArea>(this.detach_AuthAreas));
			this._CustomerUser = default(EntityRef<CustomerUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._CustomerUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuthAccess_AuthArea", Storage="_AuthAreas", ThisKey="AreaID", OtherKey="id")]
		public EntitySet<AuthArea> AuthAreas
		{
			get
			{
				return this._AuthAreas;
			}
			set
			{
				this._AuthAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerUser_AuthAccess", Storage="_CustomerUser", ThisKey="userID", OtherKey="id", IsForeignKey=true)]
		public CustomerUser CustomerUser
		{
			get
			{
				return this._CustomerUser.Entity;
			}
			set
			{
				CustomerUser previousValue = this._CustomerUser.Entity;
				if (((previousValue != value) 
							|| (this._CustomerUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerUser.Entity = null;
						previousValue.AuthAccesses.Remove(this);
					}
					this._CustomerUser.Entity = value;
					if ((value != null))
					{
						value.AuthAccesses.Add(this);
						this._userID = value.id;
					}
					else
					{
						this._userID = default(System.Guid);
					}
					this.SendPropertyChanged("CustomerUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthAreas(AuthArea entity)
		{
			this.SendPropertyChanging();
			entity.AuthAccess = this;
		}
		
		private void detach_AuthAreas(AuthArea entity)
		{
			this.SendPropertyChanging();
			entity.AuthAccess = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthAreas")]
	public partial class AuthArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _path;
		
		private System.Guid _DomainID;
		
		private string _name;
		
		private System.Nullable<System.Guid> _parentAreaID;
		
		private EntityRef<AuthAccess> _AuthAccess;
		
		private EntityRef<AuthDomain> _AuthDomain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void OnDomainIDChanging(System.Guid value);
    partial void OnDomainIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentAreaIDChanging(System.Nullable<System.Guid> value);
    partial void OnparentAreaIDChanged();
    #endregion
		
		public AuthArea()
		{
			this._AuthAccess = default(EntityRef<AuthAccess>);
			this._AuthDomain = default(EntityRef<AuthDomain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._AuthAccess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DomainID
		{
			get
			{
				return this._DomainID;
			}
			set
			{
				if ((this._DomainID != value))
				{
					if (this._AuthDomain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainIDChanging(value);
					this.SendPropertyChanging();
					this._DomainID = value;
					this.SendPropertyChanged("DomainID");
					this.OnDomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentAreaID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> parentAreaID
		{
			get
			{
				return this._parentAreaID;
			}
			set
			{
				if ((this._parentAreaID != value))
				{
					this.OnparentAreaIDChanging(value);
					this.SendPropertyChanging();
					this._parentAreaID = value;
					this.SendPropertyChanged("parentAreaID");
					this.OnparentAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuthAccess_AuthArea", Storage="_AuthAccess", ThisKey="id", OtherKey="AreaID", IsForeignKey=true)]
		public AuthAccess AuthAccess
		{
			get
			{
				return this._AuthAccess.Entity;
			}
			set
			{
				AuthAccess previousValue = this._AuthAccess.Entity;
				if (((previousValue != value) 
							|| (this._AuthAccess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuthAccess.Entity = null;
						previousValue.AuthAreas.Remove(this);
					}
					this._AuthAccess.Entity = value;
					if ((value != null))
					{
						value.AuthAreas.Add(this);
						this._id = value.AreaID;
					}
					else
					{
						this._id = default(System.Guid);
					}
					this.SendPropertyChanged("AuthAccess");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuthDomain_AuthArea", Storage="_AuthDomain", ThisKey="DomainID", OtherKey="id", IsForeignKey=true)]
		public AuthDomain AuthDomain
		{
			get
			{
				return this._AuthDomain.Entity;
			}
			set
			{
				AuthDomain previousValue = this._AuthDomain.Entity;
				if (((previousValue != value) 
							|| (this._AuthDomain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuthDomain.Entity = null;
						previousValue.AuthAreas.Remove(this);
					}
					this._AuthDomain.Entity = value;
					if ((value != null))
					{
						value.AuthAreas.Add(this);
						this._DomainID = value.id;
					}
					else
					{
						this._DomainID = default(System.Guid);
					}
					this.SendPropertyChanged("AuthDomain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthDomains")]
	public partial class AuthDomain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _url;
		
		private string _name;
		
		private EntitySet<AuthArea> _AuthAreas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public AuthDomain()
		{
			this._AuthAreas = new EntitySet<AuthArea>(new Action<AuthArea>(this.attach_AuthAreas), new Action<AuthArea>(this.detach_AuthAreas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuthDomain_AuthArea", Storage="_AuthAreas", ThisKey="id", OtherKey="DomainID")]
		public EntitySet<AuthArea> AuthAreas
		{
			get
			{
				return this._AuthAreas;
			}
			set
			{
				this._AuthAreas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthAreas(AuthArea entity)
		{
			this.SendPropertyChanging();
			entity.AuthDomain = this;
		}
		
		private void detach_AuthAreas(AuthArea entity)
		{
			this.SendPropertyChanging();
			entity.AuthDomain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebPropNotes")]
	public partial class WebPropNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _webPropID;
		
		private string _text;
		
		private System.DateTime _dateAdded;
		
		private EntityRef<WebProperty> _WebProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnwebPropIDChanging(int value);
    partial void OnwebPropIDChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    #endregion
		
		public WebPropNote()
		{
			this._WebProperty = default(EntityRef<WebProperty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_webPropID", DbType="Int NOT NULL")]
		public int webPropID
		{
			get
			{
				return this._webPropID;
			}
			set
			{
				if ((this._webPropID != value))
				{
					if (this._WebProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnwebPropIDChanging(value);
					this.SendPropertyChanging();
					this._webPropID = value;
					this.SendPropertyChanged("webPropID");
					this.OnwebPropIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebProperty_WebPropNote", Storage="_WebProperty", ThisKey="webPropID", OtherKey="id", IsForeignKey=true)]
		public WebProperty WebProperty
		{
			get
			{
				return this._WebProperty.Entity;
			}
			set
			{
				WebProperty previousValue = this._WebProperty.Entity;
				if (((previousValue != value) 
							|| (this._WebProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebProperty.Entity = null;
						previousValue.WebPropNotes.Remove(this);
					}
					this._WebProperty.Entity = value;
					if ((value != null))
					{
						value.WebPropNotes.Add(this);
						this._webPropID = value.id;
					}
					else
					{
						this._webPropID = default(int);
					}
					this.SendPropertyChanged("WebProperty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduledTask")]
	public partial class ScheduledTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private string _url;
		
		private System.Nullable<System.DateTime> _runtime;
		
		private System.Nullable<int> _runday;
		
		private string _runfrequency;
		
		private System.Nullable<int> _interval;
		
		private System.Nullable<System.DateTime> _lastRan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnruntimeChanging(System.Nullable<System.DateTime> value);
    partial void OnruntimeChanged();
    partial void OnrundayChanging(System.Nullable<int> value);
    partial void OnrundayChanged();
    partial void OnrunfrequencyChanging(string value);
    partial void OnrunfrequencyChanged();
    partial void OnintervalChanging(System.Nullable<int> value);
    partial void OnintervalChanged();
    partial void OnlastRanChanging(System.Nullable<System.DateTime> value);
    partial void OnlastRanChanged();
    #endregion
		
		public ScheduledTask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255)")]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runtime", DbType="DateTime")]
		public System.Nullable<System.DateTime> runtime
		{
			get
			{
				return this._runtime;
			}
			set
			{
				if ((this._runtime != value))
				{
					this.OnruntimeChanging(value);
					this.SendPropertyChanging();
					this._runtime = value;
					this.SendPropertyChanged("runtime");
					this.OnruntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runday", DbType="Int")]
		public System.Nullable<int> runday
		{
			get
			{
				return this._runday;
			}
			set
			{
				if ((this._runday != value))
				{
					this.OnrundayChanging(value);
					this.SendPropertyChanging();
					this._runday = value;
					this.SendPropertyChanged("runday");
					this.OnrundayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runfrequency", DbType="VarChar(50)")]
		public string runfrequency
		{
			get
			{
				return this._runfrequency;
			}
			set
			{
				if ((this._runfrequency != value))
				{
					this.OnrunfrequencyChanging(value);
					this.SendPropertyChanging();
					this._runfrequency = value;
					this.SendPropertyChanged("runfrequency");
					this.OnrunfrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interval", DbType="Int")]
		public System.Nullable<int> interval
		{
			get
			{
				return this._interval;
			}
			set
			{
				if ((this._interval != value))
				{
					this.OnintervalChanging(value);
					this.SendPropertyChanging();
					this._interval = value;
					this.SendPropertyChanged("interval");
					this.OnintervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastRan", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastRan
		{
			get
			{
				return this._lastRan;
			}
			set
			{
				if ((this._lastRan != value))
				{
					this.OnlastRanChanging(value);
					this.SendPropertyChanging();
					this._lastRan = value;
					this.SendPropertyChanged("lastRan");
					this.OnlastRanChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageType")]
	public partial class PackageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private EntityRef<PartPackage> _PartPackage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public PackageType()
		{
			this._PartPackage = default(EntityRef<PartPackage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._PartPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartPackage_PackageType", Storage="_PartPackage", ThisKey="ID", OtherKey="typeID", IsForeignKey=true)]
		internal PartPackage PartPackage
		{
			get
			{
				return this._PartPackage.Entity;
			}
			set
			{
				PartPackage previousValue = this._PartPackage.Entity;
				if (((previousValue != value) 
							|| (this._PartPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartPackage.Entity = null;
						previousValue.PackageType = null;
					}
					this._PartPackage.Entity = value;
					if ((value != null))
					{
						value.PackageType = this;
						this._ID = value.typeID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("PartPackage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
<<<<<<< HEAD
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebPropRequirementCheck")]
	public partial class WebPropRequirementCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _WebPropertiesID;
		
		private bool _Compliance;
		
		private System.Nullable<int> _WebPropRequirementsID;
		
		private EntityRef<WebProperty> _WebProperty;
		
		private EntityRef<WebPropRequirement> _WebPropRequirement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebPropertiesIDChanging(System.Nullable<int> value);
    partial void OnWebPropertiesIDChanged();
    partial void OnComplianceChanging(bool value);
    partial void OnComplianceChanged();
    partial void OnWebPropRequirementsIDChanging(System.Nullable<int> value);
    partial void OnWebPropRequirementsIDChanged();
    #endregion
		
		public WebPropRequirementCheck()
		{
			this._WebProperty = default(EntityRef<WebProperty>);
			this._WebPropRequirement = default(EntityRef<WebPropRequirement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebPropertiesID", DbType="Int")]
		public System.Nullable<int> WebPropertiesID
		{
			get
			{
				return this._WebPropertiesID;
			}
			set
			{
				if ((this._WebPropertiesID != value))
				{
					if (this._WebProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebPropertiesIDChanging(value);
					this.SendPropertyChanging();
					this._WebPropertiesID = value;
					this.SendPropertyChanged("WebPropertiesID");
					this.OnWebPropertiesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Compliance", DbType="Bit")]
		public bool Compliance
		{
			get
			{
				return this._Compliance;
			}
			set
			{
				if ((this._Compliance != value))
				{
					this.OnComplianceChanging(value);
					this.SendPropertyChanging();
					this._Compliance = value;
					this.SendPropertyChanged("Compliance");
					this.OnComplianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebPropRequirementsID", DbType="Int")]
		public System.Nullable<int> WebPropRequirementsID
		{
			get
			{
				return this._WebPropRequirementsID;
			}
			set
			{
				if ((this._WebPropRequirementsID != value))
				{
					if (this._WebPropRequirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebPropRequirementsIDChanging(value);
					this.SendPropertyChanging();
					this._WebPropRequirementsID = value;
					this.SendPropertyChanged("WebPropRequirementsID");
					this.OnWebPropRequirementsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebProperty_WebPropRequirementCheck", Storage="_WebProperty", ThisKey="WebPropertiesID", OtherKey="id", IsForeignKey=true)]
		public WebProperty WebProperty
		{
			get
			{
				return this._WebProperty.Entity;
			}
			set
			{
				WebProperty previousValue = this._WebProperty.Entity;
				if (((previousValue != value) 
							|| (this._WebProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebProperty.Entity = null;
						previousValue.WebPropRequirementChecks.Remove(this);
					}
					this._WebProperty.Entity = value;
					if ((value != null))
					{
						value.WebPropRequirementChecks.Add(this);
						this._WebPropertiesID = value.id;
					}
					else
					{
						this._WebPropertiesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebProperty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebPropRequirement_WebPropRequirementCheck", Storage="_WebPropRequirement", ThisKey="WebPropRequirementsID", OtherKey="ID", IsForeignKey=true)]
		public WebPropRequirement WebPropRequirement
		{
			get
			{
				return this._WebPropRequirement.Entity;
			}
			set
			{
				WebPropRequirement previousValue = this._WebPropRequirement.Entity;
				if (((previousValue != value) 
							|| (this._WebPropRequirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebPropRequirement.Entity = null;
						previousValue.WebPropRequirementChecks.Remove(this);
					}
					this._WebPropRequirement.Entity = value;
					if ((value != null))
					{
						value.WebPropRequirementChecks.Add(this);
						this._WebPropRequirementsID = value.ID;
					}
					else
					{
						this._WebPropRequirementsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("WebPropRequirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebPropRequirements")]
	public partial class WebPropRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ReqType;
		
		private string _Requirement;
		
		private EntitySet<WebPropRequirementCheck> _WebPropRequirementChecks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReqTypeChanging(string value);
    partial void OnReqTypeChanged();
    partial void OnRequirementChanging(string value);
    partial void OnRequirementChanged();
    #endregion
		
		public WebPropRequirement()
		{
			this._WebPropRequirementChecks = new EntitySet<WebPropRequirementCheck>(new Action<WebPropRequirementCheck>(this.attach_WebPropRequirementChecks), new Action<WebPropRequirementCheck>(this.detach_WebPropRequirementChecks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReqType", DbType="VarChar(255)")]
		public string ReqType
		{
			get
			{
				return this._ReqType;
			}
			set
			{
				if ((this._ReqType != value))
				{
					this.OnReqTypeChanging(value);
					this.SendPropertyChanging();
					this._ReqType = value;
					this.SendPropertyChanged("ReqType");
					this.OnReqTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Requirement", DbType="VarChar(1000)")]
		public string Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				if ((this._Requirement != value))
				{
					this.OnRequirementChanging(value);
					this.SendPropertyChanging();
					this._Requirement = value;
					this.SendPropertyChanged("Requirement");
					this.OnRequirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebPropRequirement_WebPropRequirementCheck", Storage="_WebPropRequirementChecks", ThisKey="ID", OtherKey="WebPropRequirementsID")]
		public EntitySet<WebPropRequirementCheck> WebPropRequirementChecks
		{
			get
			{
				return this._WebPropRequirementChecks;
			}
			set
			{
				this._WebPropRequirementChecks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WebPropRequirementChecks(WebPropRequirementCheck entity)
		{
			this.SendPropertyChanging();
			entity.WebPropRequirement = this;
		}
		
		private void detach_WebPropRequirementChecks(WebPropRequirementCheck entity)
		{
			this.SendPropertyChanging();
			entity.WebPropRequirement = null;
		}
=======
	public partial class getPartsWithMissingImageSizesResult
	{
		
		private int _partID;
		
		public getPartsWithMissingImageSizesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this._partID = value;
				}
			}
		}
	}
	
	public partial class getPartsWithNoImagesResult
	{
		
		private int _partID;
		
		public getPartsWithNoImagesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partID", DbType="Int NOT NULL")]
		public int partID
		{
			get
			{
				return this._partID;
			}
			set
			{
				if ((this._partID != value))
				{
					this._partID = value;
				}
			}
		}
>>>>>>> d124e3eb9331b04f93f88e7ab7a5228a90cdf945
	}
}
#pragma warning restore 1591
