#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurtAdmin
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="b2b_db")]
	public partial class B2BDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertB2BCompletedTest(B2BCompletedTest instance);
    partial void UpdateB2BCompletedTest(B2BCompletedTest instance);
    partial void DeleteB2BCompletedTest(B2BCompletedTest instance);
    partial void InsertB2BCertificate(B2BCertificate instance);
    partial void UpdateB2BCertificate(B2BCertificate instance);
    partial void DeleteB2BCertificate(B2BCertificate instance);
    partial void InsertB2BCategory(B2BCategory instance);
    partial void UpdateB2BCategory(B2BCategory instance);
    partial void DeleteB2BCategory(B2BCategory instance);
    partial void InsertB2BLesson(B2BLesson instance);
    partial void UpdateB2BLesson(B2BLesson instance);
    partial void DeleteB2BLesson(B2BLesson instance);
    partial void InsertB2BTest(B2BTest instance);
    partial void UpdateB2BTest(B2BTest instance);
    partial void DeleteB2BTest(B2BTest instance);
    partial void InsertB2BQuestion(B2BQuestion instance);
    partial void UpdateB2BQuestion(B2BQuestion instance);
    partial void DeleteB2BQuestion(B2BQuestion instance);
    partial void InsertB2BAnswer(B2BAnswer instance);
    partial void UpdateB2BAnswer(B2BAnswer instance);
    partial void DeleteB2BAnswer(B2BAnswer instance);
    partial void InsertB2BResource(B2BResource instance);
    partial void UpdateB2BResource(B2BResource instance);
    partial void DeleteB2BResource(B2BResource instance);
    partial void InsertB2BVideo(B2BVideo instance);
    partial void UpdateB2BVideo(B2BVideo instance);
    partial void DeleteB2BVideo(B2BVideo instance);
    partial void InsertB2BTestResult(B2BTestResult instance);
    partial void UpdateB2BTestResult(B2BTestResult instance);
    partial void DeleteB2BTestResult(B2BTestResult instance);
    partial void InsertB2BUser(B2BUser instance);
    partial void UpdateB2BUser(B2BUser instance);
    partial void DeleteB2BUser(B2BUser instance);
    partial void InsertB2BCompletedCert(B2BCompletedCert instance);
    partial void UpdateB2BCompletedCert(B2BCompletedCert instance);
    partial void DeleteB2BCompletedCert(B2BCompletedCert instance);
    partial void InsertB2BVideoSource(B2BVideoSource instance);
    partial void UpdateB2BVideoSource(B2BVideoSource instance);
    partial void DeleteB2BVideoSource(B2BVideoSource instance);
    partial void InsertB2BVideoType(B2BVideoType instance);
    partial void UpdateB2BVideoType(B2BVideoType instance);
    partial void DeleteB2BVideoType(B2BVideoType instance);
    #endregion
		
		public B2BDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["b2b_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public B2BDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public B2BDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public B2BDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public B2BDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<B2BCompletedTest> B2BCompletedTests
		{
			get
			{
				return this.GetTable<B2BCompletedTest>();
			}
		}
		
		public System.Data.Linq.Table<B2BCertificate> B2BCertificates
		{
			get
			{
				return this.GetTable<B2BCertificate>();
			}
		}
		
		public System.Data.Linq.Table<B2BCategory> B2BCategories
		{
			get
			{
				return this.GetTable<B2BCategory>();
			}
		}
		
		public System.Data.Linq.Table<B2BLesson> B2BLessons
		{
			get
			{
				return this.GetTable<B2BLesson>();
			}
		}
		
		public System.Data.Linq.Table<B2BTest> B2BTests
		{
			get
			{
				return this.GetTable<B2BTest>();
			}
		}
		
		public System.Data.Linq.Table<B2BQuestion> B2BQuestions
		{
			get
			{
				return this.GetTable<B2BQuestion>();
			}
		}
		
		public System.Data.Linq.Table<B2BAnswer> B2BAnswers
		{
			get
			{
				return this.GetTable<B2BAnswer>();
			}
		}
		
		public System.Data.Linq.Table<B2BResource> B2BResources
		{
			get
			{
				return this.GetTable<B2BResource>();
			}
		}
		
		public System.Data.Linq.Table<B2BVideo> B2BVideos
		{
			get
			{
				return this.GetTable<B2BVideo>();
			}
		}
		
		public System.Data.Linq.Table<B2BTestResult> B2BTestResults
		{
			get
			{
				return this.GetTable<B2BTestResult>();
			}
		}
		
		public System.Data.Linq.Table<B2BUser> B2BUsers
		{
			get
			{
				return this.GetTable<B2BUser>();
			}
		}
		
		public System.Data.Linq.Table<B2BCompletedCert> B2BCompletedCerts
		{
			get
			{
				return this.GetTable<B2BCompletedCert>();
			}
		}
		
		public System.Data.Linq.Table<B2BVideoSource> B2BVideoSources
		{
			get
			{
				return this.GetTable<B2BVideoSource>();
			}
		}
		
		public System.Data.Linq.Table<B2BVideoType> B2BVideoTypes
		{
			get
			{
				return this.GetTable<B2BVideoType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletedTests")]
	public partial class B2BCompletedTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _custID;
		
		private double _score;
		
		private int _testID;
		
		private int _certID;
		
		private System.DateTime _date_completed;
		
		private EntitySet<B2BCertificate> _Certificates;
		
		private EntitySet<B2BTest> _Tests;
		
		private EntitySet<B2BTestResult> _TestResults;
		
		private EntityRef<B2BUser> _B2BUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncustIDChanging(string value);
    partial void OncustIDChanged();
    partial void OnscoreChanging(double value);
    partial void OnscoreChanged();
    partial void OntestIDChanging(int value);
    partial void OntestIDChanged();
    partial void OncertIDChanging(int value);
    partial void OncertIDChanged();
    partial void Ondate_completedChanging(System.DateTime value);
    partial void Ondate_completedChanged();
    #endregion
		
		public B2BCompletedTest()
		{
			this._Certificates = new EntitySet<B2BCertificate>(new Action<B2BCertificate>(this.attach_Certificates), new Action<B2BCertificate>(this.detach_Certificates));
			this._Tests = new EntitySet<B2BTest>(new Action<B2BTest>(this.attach_Tests), new Action<B2BTest>(this.detach_Tests));
			this._TestResults = new EntitySet<B2BTestResult>(new Action<B2BTestResult>(this.attach_TestResults), new Action<B2BTestResult>(this.detach_TestResults));
			this._B2BUser = default(EntityRef<B2BUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string custID
		{
			get
			{
				return this._custID;
			}
			set
			{
				if ((this._custID != value))
				{
					if (this._B2BUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustIDChanging(value);
					this.SendPropertyChanging();
					this._custID = value;
					this.SendPropertyChanged("custID");
					this.OncustIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Float NOT NULL")]
		public double score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testID", DbType="Int NOT NULL")]
		public int testID
		{
			get
			{
				return this._testID;
			}
			set
			{
				if ((this._testID != value))
				{
					this.OntestIDChanging(value);
					this.SendPropertyChanging();
					this._testID = value;
					this.SendPropertyChanged("testID");
					this.OntestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_certID", DbType="Int NOT NULL")]
		public int certID
		{
			get
			{
				return this._certID;
			}
			set
			{
				if ((this._certID != value))
				{
					this.OncertIDChanging(value);
					this.SendPropertyChanging();
					this._certID = value;
					this.SendPropertyChanged("certID");
					this.OncertIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_completed", DbType="DateTime NOT NULL")]
		public System.DateTime date_completed
		{
			get
			{
				return this._date_completed;
			}
			set
			{
				if ((this._date_completed != value))
				{
					this.Ondate_completedChanging(value);
					this.SendPropertyChanging();
					this._date_completed = value;
					this.SendPropertyChanged("date_completed");
					this.Ondate_completedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedTest_B2BCertificate", Storage="_Certificates", ThisKey="certID", OtherKey="id")]
		public EntitySet<B2BCertificate> B2BCertificates
		{
			get
			{
				return this._Certificates;
			}
			set
			{
				this._Certificates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedTest_B2BTest", Storage="_Tests", ThisKey="testID", OtherKey="id")]
		public EntitySet<B2BTest> B2BTests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedTest_B2BTestResult", Storage="_TestResults", ThisKey="testID", OtherKey="id")]
		public EntitySet<B2BTestResult> B2BTestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BUser_B2BCompletedTest", Storage="_B2BUser", ThisKey="custID", OtherKey="custID", IsForeignKey=true)]
		public B2BUser B2BUser
		{
			get
			{
				return this._B2BUser.Entity;
			}
			set
			{
				B2BUser previousValue = this._B2BUser.Entity;
				if (((previousValue != value) 
							|| (this._B2BUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._B2BUser.Entity = null;
						previousValue.B2BCompletedTests.Remove(this);
					}
					this._B2BUser.Entity = value;
					if ((value != null))
					{
						value.B2BCompletedTests.Add(this);
						this._custID = value.custID;
					}
					else
					{
						this._custID = default(string);
					}
					this.SendPropertyChanged("B2BUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Certificates(B2BCertificate entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedTest = this;
		}
		
		private void detach_Certificates(B2BCertificate entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedTest = null;
		}
		
		private void attach_Tests(B2BTest entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedTest = this;
		}
		
		private void detach_Tests(B2BTest entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedTest = null;
		}
		
		private void attach_TestResults(B2BTestResult entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedTest = this;
		}
		
		private void detach_TestResults(B2BTestResult entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedTest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Certificates")]
	public partial class B2BCertificate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _text;
		
		private int _requirementNum;
		
		private string _image_path;
		
		private System.DateTime _date_added;
		
		private System.DateTime _date_modified;
		
		private bool _inactive;
		
		private EntitySet<B2BCategory> _Categories;
		
		private EntityRef<B2BCompletedTest> _CompletedTest;
		
		private EntityRef<B2BCompletedCert> _B2BCompletedCert;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnrequirementNumChanging(int value);
    partial void OnrequirementNumChanged();
    partial void Onimage_pathChanging(string value);
    partial void Onimage_pathChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void Ondate_modifiedChanging(System.DateTime value);
    partial void Ondate_modifiedChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BCertificate()
		{
			this._Categories = new EntitySet<B2BCategory>(new Action<B2BCategory>(this.attach_Categories), new Action<B2BCategory>(this.detach_Categories));
			this._CompletedTest = default(EntityRef<B2BCompletedTest>);
			this._B2BCompletedCert = default(EntityRef<B2BCompletedCert>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if ((this._CompletedTest.HasLoadedOrAssignedValue || this._B2BCompletedCert.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_requirementNum", DbType="Int NOT NULL")]
		public int requirementNum
		{
			get
			{
				return this._requirementNum;
			}
			set
			{
				if ((this._requirementNum != value))
				{
					this.OnrequirementNumChanging(value);
					this.SendPropertyChanging();
					this._requirementNum = value;
					this.SendPropertyChanged("requirementNum");
					this.OnrequirementNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_path", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string image_path
		{
			get
			{
				return this._image_path;
			}
			set
			{
				if ((this._image_path != value))
				{
					this.Onimage_pathChanging(value);
					this.SendPropertyChanging();
					this._image_path = value;
					this.SendPropertyChanged("image_path");
					this.Onimage_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_modified", DbType="DateTime NOT NULL")]
		public System.DateTime date_modified
		{
			get
			{
				return this._date_modified;
			}
			set
			{
				if ((this._date_modified != value))
				{
					this.Ondate_modifiedChanging(value);
					this.SendPropertyChanging();
					this._date_modified = value;
					this.SendPropertyChanged("date_modified");
					this.Ondate_modifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCertificate_B2BCategory", Storage="_Categories", ThisKey="id", OtherKey="certID")]
		public EntitySet<B2BCategory> B2BCategories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedTest_B2BCertificate", Storage="_CompletedTest", ThisKey="id", OtherKey="certID", IsForeignKey=true)]
		public B2BCompletedTest B2BCompletedTest
		{
			get
			{
				return this._CompletedTest.Entity;
			}
			set
			{
				B2BCompletedTest previousValue = this._CompletedTest.Entity;
				if (((previousValue != value) 
							|| (this._CompletedTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletedTest.Entity = null;
						previousValue.B2BCertificates.Remove(this);
					}
					this._CompletedTest.Entity = value;
					if ((value != null))
					{
						value.B2BCertificates.Add(this);
						this._id = value.certID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("B2BCompletedTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedCert_B2BCertificate", Storage="_B2BCompletedCert", ThisKey="id", OtherKey="certID", IsForeignKey=true)]
		public B2BCompletedCert B2BCompletedCert
		{
			get
			{
				return this._B2BCompletedCert.Entity;
			}
			set
			{
				B2BCompletedCert previousValue = this._B2BCompletedCert.Entity;
				if (((previousValue != value) 
							|| (this._B2BCompletedCert.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._B2BCompletedCert.Entity = null;
						previousValue.B2BCertificates.Remove(this);
					}
					this._B2BCompletedCert.Entity = value;
					if ((value != null))
					{
						value.B2BCertificates.Add(this);
						this._id = value.certID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("B2BCompletedCert");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(B2BCategory entity)
		{
			this.SendPropertyChanging();
			entity.B2BCertificate = this;
		}
		
		private void detach_Categories(B2BCategory entity)
		{
			this.SendPropertyChanging();
			entity.B2BCertificate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class B2BCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _certID;
		
		private string _title;
		
		private string _text;
		
		private string _image_path;
		
		private System.DateTime _date_added;
		
		private System.DateTime _date_modified;
		
		private bool _inactive;
		
		private EntitySet<B2BLesson> _Lessons;
		
		private EntitySet<B2BTest> _Tests;
		
		private EntityRef<B2BCertificate> _Certificate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncertIDChanging(int value);
    partial void OncertIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void Onimage_pathChanging(string value);
    partial void Onimage_pathChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void Ondate_modifiedChanging(System.DateTime value);
    partial void Ondate_modifiedChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BCategory()
		{
			this._Lessons = new EntitySet<B2BLesson>(new Action<B2BLesson>(this.attach_Lessons), new Action<B2BLesson>(this.detach_Lessons));
			this._Tests = new EntitySet<B2BTest>(new Action<B2BTest>(this.attach_Tests), new Action<B2BTest>(this.detach_Tests));
			this._Certificate = default(EntityRef<B2BCertificate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_certID", DbType="Int NOT NULL")]
		public int certID
		{
			get
			{
				return this._certID;
			}
			set
			{
				if ((this._certID != value))
				{
					if (this._Certificate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncertIDChanging(value);
					this.SendPropertyChanging();
					this._certID = value;
					this.SendPropertyChanged("certID");
					this.OncertIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_path", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string image_path
		{
			get
			{
				return this._image_path;
			}
			set
			{
				if ((this._image_path != value))
				{
					this.Onimage_pathChanging(value);
					this.SendPropertyChanging();
					this._image_path = value;
					this.SendPropertyChanged("image_path");
					this.Onimage_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_modified", DbType="DateTime NOT NULL")]
		public System.DateTime date_modified
		{
			get
			{
				return this._date_modified;
			}
			set
			{
				if ((this._date_modified != value))
				{
					this.Ondate_modifiedChanging(value);
					this.SendPropertyChanging();
					this._date_modified = value;
					this.SendPropertyChanged("date_modified");
					this.Ondate_modifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCategory_B2BLesson", Storage="_Lessons", ThisKey="id", OtherKey="catID")]
		public EntitySet<B2BLesson> B2BLessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCategory_B2BTest", Storage="_Tests", ThisKey="id", OtherKey="catID")]
		public EntitySet<B2BTest> B2BTests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCertificate_B2BCategory", Storage="_Certificate", ThisKey="certID", OtherKey="id", IsForeignKey=true)]
		public B2BCertificate B2BCertificate
		{
			get
			{
				return this._Certificate.Entity;
			}
			set
			{
				B2BCertificate previousValue = this._Certificate.Entity;
				if (((previousValue != value) 
							|| (this._Certificate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Certificate.Entity = null;
						previousValue.B2BCategories.Remove(this);
					}
					this._Certificate.Entity = value;
					if ((value != null))
					{
						value.B2BCategories.Add(this);
						this._certID = value.id;
					}
					else
					{
						this._certID = default(int);
					}
					this.SendPropertyChanged("B2BCertificate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lessons(B2BLesson entity)
		{
			this.SendPropertyChanging();
			entity.B2BCategory = this;
		}
		
		private void detach_Lessons(B2BLesson entity)
		{
			this.SendPropertyChanging();
			entity.B2BCategory = null;
		}
		
		private void attach_Tests(B2BTest entity)
		{
			this.SendPropertyChanging();
			entity.B2BCategory = this;
		}
		
		private void detach_Tests(B2BTest entity)
		{
			this.SendPropertyChanging();
			entity.B2BCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lessons")]
	public partial class B2BLesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _catID;
		
		private string _title;
		
		private string _Text;
		
		private System.DateTime _date_added;
		
		private System.DateTime _date_modified;
		
		private bool _inactive;
		
		private EntitySet<B2BResource> _Resources;
		
		private EntitySet<B2BVideo> _Videos;
		
		private EntityRef<B2BCategory> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void Ondate_modifiedChanging(System.DateTime value);
    partial void Ondate_modifiedChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BLesson()
		{
			this._Resources = new EntitySet<B2BResource>(new Action<B2BResource>(this.attach_Resources), new Action<B2BResource>(this.detach_Resources));
			this._Videos = new EntitySet<B2BVideo>(new Action<B2BVideo>(this.attach_Videos), new Action<B2BVideo>(this.detach_Videos));
			this._Category = default(EntityRef<B2BCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int NOT NULL")]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_modified", DbType="DateTime NOT NULL")]
		public System.DateTime date_modified
		{
			get
			{
				return this._date_modified;
			}
			set
			{
				if ((this._date_modified != value))
				{
					this.Ondate_modifiedChanging(value);
					this.SendPropertyChanging();
					this._date_modified = value;
					this.SendPropertyChanged("date_modified");
					this.Ondate_modifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BLesson_B2BResource", Storage="_Resources", ThisKey="id", OtherKey="lessonID")]
		public EntitySet<B2BResource> B2BResources
		{
			get
			{
				return this._Resources;
			}
			set
			{
				this._Resources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BLesson_B2BVideo", Storage="_Videos", ThisKey="id", OtherKey="lessonID")]
		public EntitySet<B2BVideo> B2BVideos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCategory_B2BLesson", Storage="_Category", ThisKey="catID", OtherKey="id", IsForeignKey=true)]
		public B2BCategory B2BCategory
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				B2BCategory previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.B2BLessons.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.B2BLessons.Add(this);
						this._catID = value.id;
					}
					else
					{
						this._catID = default(int);
					}
					this.SendPropertyChanged("B2BCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Resources(B2BResource entity)
		{
			this.SendPropertyChanging();
			entity.B2BLesson = this;
		}
		
		private void detach_Resources(B2BResource entity)
		{
			this.SendPropertyChanging();
			entity.B2BLesson = null;
		}
		
		private void attach_Videos(B2BVideo entity)
		{
			this.SendPropertyChanging();
			entity.B2BLesson = this;
		}
		
		private void detach_Videos(B2BVideo entity)
		{
			this.SendPropertyChanging();
			entity.B2BLesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tests")]
	public partial class B2BTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _catID;
		
		private string _title;
		
		private string _text;
		
		private double _min_pass_percent;
		
		private System.DateTime _date_added;
		
		private System.DateTime _date_modified;
		
		private bool _isRandomOrder;
		
		private bool _inactive;
		
		private EntitySet<B2BQuestion> _Questions;
		
		private EntityRef<B2BCategory> _Category;
		
		private EntityRef<B2BCompletedTest> _CompletedTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void Onmin_pass_percentChanging(double value);
    partial void Onmin_pass_percentChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void Ondate_modifiedChanging(System.DateTime value);
    partial void Ondate_modifiedChanged();
    partial void OnisRandomOrderChanging(bool value);
    partial void OnisRandomOrderChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BTest()
		{
			this._Questions = new EntitySet<B2BQuestion>(new Action<B2BQuestion>(this.attach_Questions), new Action<B2BQuestion>(this.detach_Questions));
			this._Category = default(EntityRef<B2BCategory>);
			this._CompletedTest = default(EntityRef<B2BCompletedTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._CompletedTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int NOT NULL")]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_pass_percent", DbType="Float NOT NULL")]
		public double min_pass_percent
		{
			get
			{
				return this._min_pass_percent;
			}
			set
			{
				if ((this._min_pass_percent != value))
				{
					this.Onmin_pass_percentChanging(value);
					this.SendPropertyChanging();
					this._min_pass_percent = value;
					this.SendPropertyChanged("min_pass_percent");
					this.Onmin_pass_percentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_modified", DbType="DateTime NOT NULL")]
		public System.DateTime date_modified
		{
			get
			{
				return this._date_modified;
			}
			set
			{
				if ((this._date_modified != value))
				{
					this.Ondate_modifiedChanging(value);
					this.SendPropertyChanging();
					this._date_modified = value;
					this.SendPropertyChanged("date_modified");
					this.Ondate_modifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isRandomOrder", DbType="Bit NOT NULL")]
		public bool isRandomOrder
		{
			get
			{
				return this._isRandomOrder;
			}
			set
			{
				if ((this._isRandomOrder != value))
				{
					this.OnisRandomOrderChanging(value);
					this.SendPropertyChanging();
					this._isRandomOrder = value;
					this.SendPropertyChanged("isRandomOrder");
					this.OnisRandomOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BTest_B2BQuestion", Storage="_Questions", ThisKey="id", OtherKey="testID")]
		public EntitySet<B2BQuestion> B2BQuestions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCategory_B2BTest", Storage="_Category", ThisKey="catID", OtherKey="id", IsForeignKey=true)]
		public B2BCategory B2BCategory
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				B2BCategory previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.B2BTests.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.B2BTests.Add(this);
						this._catID = value.id;
					}
					else
					{
						this._catID = default(int);
					}
					this.SendPropertyChanged("B2BCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedTest_B2BTest", Storage="_CompletedTest", ThisKey="id", OtherKey="testID", IsForeignKey=true)]
		public B2BCompletedTest B2BCompletedTest
		{
			get
			{
				return this._CompletedTest.Entity;
			}
			set
			{
				B2BCompletedTest previousValue = this._CompletedTest.Entity;
				if (((previousValue != value) 
							|| (this._CompletedTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletedTest.Entity = null;
						previousValue.B2BTests.Remove(this);
					}
					this._CompletedTest.Entity = value;
					if ((value != null))
					{
						value.B2BTests.Add(this);
						this._id = value.testID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("B2BCompletedTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(B2BQuestion entity)
		{
			this.SendPropertyChanging();
			entity.B2BTest = this;
		}
		
		private void detach_Questions(B2BQuestion entity)
		{
			this.SendPropertyChanging();
			entity.B2BTest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class B2BQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _testID;
		
		private string _text;
		
		private System.DateTime _date_added;
		
		private System.DateTime _date_modified;
		
		private int _sort;
		
		private bool _inactive;
		
		private EntitySet<B2BAnswer> _Answers;
		
		private EntityRef<B2BTest> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntestIDChanging(int value);
    partial void OntestIDChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void Ondate_modifiedChanging(System.DateTime value);
    partial void Ondate_modifiedChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BQuestion()
		{
			this._Answers = new EntitySet<B2BAnswer>(new Action<B2BAnswer>(this.attach_Answers), new Action<B2BAnswer>(this.detach_Answers));
			this._Test = default(EntityRef<B2BTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testID", DbType="Int NOT NULL")]
		public int testID
		{
			get
			{
				return this._testID;
			}
			set
			{
				if ((this._testID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntestIDChanging(value);
					this.SendPropertyChanging();
					this._testID = value;
					this.SendPropertyChanged("testID");
					this.OntestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_modified", DbType="DateTime NOT NULL")]
		public System.DateTime date_modified
		{
			get
			{
				return this._date_modified;
			}
			set
			{
				if ((this._date_modified != value))
				{
					this.Ondate_modifiedChanging(value);
					this.SendPropertyChanging();
					this._date_modified = value;
					this.SendPropertyChanged("date_modified");
					this.Ondate_modifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BQuestion_B2BAnswer", Storage="_Answers", ThisKey="id", OtherKey="questionID")]
		public EntitySet<B2BAnswer> B2BAnswers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BTest_B2BQuestion", Storage="_Test", ThisKey="testID", OtherKey="id", IsForeignKey=true)]
		public B2BTest B2BTest
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				B2BTest previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.B2BQuestions.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.B2BQuestions.Add(this);
						this._testID = value.id;
					}
					else
					{
						this._testID = default(int);
					}
					this.SendPropertyChanged("B2BTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(B2BAnswer entity)
		{
			this.SendPropertyChanging();
			entity.B2BQuestion = this;
		}
		
		private void detach_Answers(B2BAnswer entity)
		{
			this.SendPropertyChanging();
			entity.B2BQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answers")]
	public partial class B2BAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _questionID;
		
		private string _text;
		
		private bool _isCorrect;
		
		private System.DateTime _date_added;
		
		private System.DateTime _date_modified;
		
		private bool _inactive;
		
		private EntityRef<B2BTestResult> _TestResult;
		
		private EntityRef<B2BQuestion> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnquestionIDChanging(int value);
    partial void OnquestionIDChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnisCorrectChanging(bool value);
    partial void OnisCorrectChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void Ondate_modifiedChanging(System.DateTime value);
    partial void Ondate_modifiedChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BAnswer()
		{
			this._TestResult = default(EntityRef<B2BTestResult>);
			this._Question = default(EntityRef<B2BQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._TestResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionID", DbType="Int NOT NULL")]
		public int questionID
		{
			get
			{
				return this._questionID;
			}
			set
			{
				if ((this._questionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionIDChanging(value);
					this.SendPropertyChanging();
					this._questionID = value;
					this.SendPropertyChanged("questionID");
					this.OnquestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCorrect", DbType="Bit NOT NULL")]
		public bool isCorrect
		{
			get
			{
				return this._isCorrect;
			}
			set
			{
				if ((this._isCorrect != value))
				{
					this.OnisCorrectChanging(value);
					this.SendPropertyChanging();
					this._isCorrect = value;
					this.SendPropertyChanged("isCorrect");
					this.OnisCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_modified", DbType="DateTime NOT NULL")]
		public System.DateTime date_modified
		{
			get
			{
				return this._date_modified;
			}
			set
			{
				if ((this._date_modified != value))
				{
					this.Ondate_modifiedChanging(value);
					this.SendPropertyChanging();
					this._date_modified = value;
					this.SendPropertyChanged("date_modified");
					this.Ondate_modifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BTestResult_B2BAnswer", Storage="_TestResult", ThisKey="id", OtherKey="chosenAnswerID", IsForeignKey=true)]
		public B2BTestResult B2BTestResult
		{
			get
			{
				return this._TestResult.Entity;
			}
			set
			{
				B2BTestResult previousValue = this._TestResult.Entity;
				if (((previousValue != value) 
							|| (this._TestResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestResult.Entity = null;
						previousValue.B2BAnswers.Remove(this);
					}
					this._TestResult.Entity = value;
					if ((value != null))
					{
						value.B2BAnswers.Add(this);
						this._id = value.chosenAnswerID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("B2BTestResult");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BQuestion_B2BAnswer", Storage="_Question", ThisKey="questionID", OtherKey="id", IsForeignKey=true)]
		public B2BQuestion B2BQuestion
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				B2BQuestion previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.B2BAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.B2BAnswers.Add(this);
						this._questionID = value.id;
					}
					else
					{
						this._questionID = default(int);
					}
					this.SendPropertyChanged("B2BQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resources")]
	public partial class B2BResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _file_path;
		
		private System.DateTime _date_added;
		
		private int _sort;
		
		private int _lessonID;
		
		private string _title;
		
		private string _image_path;
		
		private EntityRef<B2BLesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfile_pathChanging(string value);
    partial void Onfile_pathChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OnlessonIDChanging(int value);
    partial void OnlessonIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Onimage_pathChanging(string value);
    partial void Onimage_pathChanged();
    #endregion
		
		public B2BResource()
		{
			this._Lesson = default(EntityRef<B2BLesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_file_path", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string file_path
		{
			get
			{
				return this._file_path;
			}
			set
			{
				if ((this._file_path != value))
				{
					this.Onfile_pathChanging(value);
					this.SendPropertyChanging();
					this._file_path = value;
					this.SendPropertyChanged("file_path");
					this.Onfile_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lessonID", DbType="Int NOT NULL")]
		public int lessonID
		{
			get
			{
				return this._lessonID;
			}
			set
			{
				if ((this._lessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlessonIDChanging(value);
					this.SendPropertyChanging();
					this._lessonID = value;
					this.SendPropertyChanged("lessonID");
					this.OnlessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_path", DbType="VarChar(255)")]
		public string image_path
		{
			get
			{
				return this._image_path;
			}
			set
			{
				if ((this._image_path != value))
				{
					this.Onimage_pathChanging(value);
					this.SendPropertyChanging();
					this._image_path = value;
					this.SendPropertyChanged("image_path");
					this.Onimage_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BLesson_B2BResource", Storage="_Lesson", ThisKey="lessonID", OtherKey="id", IsForeignKey=true)]
		public B2BLesson B2BLesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				B2BLesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.B2BResources.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.B2BResources.Add(this);
						this._lessonID = value.id;
					}
					else
					{
						this._lessonID = default(int);
					}
					this.SendPropertyChanged("B2BLesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Videos")]
	public partial class B2BVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _embed_link;
		
		private System.DateTime _date_added;
		
		private int _sort;
		
		private int _lessonID;
		
		private bool _inactive;
		
		private EntitySet<B2BVideoSource> _B2BVideoSources;
		
		private EntityRef<B2BLesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Ondate_addedChanging(System.DateTime value);
    partial void Ondate_addedChanged();
    partial void OnsortChanging(int value);
    partial void OnsortChanged();
    partial void OnlessonIDChanging(int value);
    partial void OnlessonIDChanged();
    partial void OninactiveChanging(bool value);
    partial void OninactiveChanged();
    #endregion
		
		public B2BVideo()
		{
			this._B2BVideoSources = new EntitySet<B2BVideoSource>(new Action<B2BVideoSource>(this.attach_B2BVideoSources), new Action<B2BVideoSource>(this.detach_B2BVideoSources));
			this._Lesson = default(EntityRef<B2BLesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_embed_link", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._embed_link;
			}
			set
			{
				if ((this._embed_link != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._embed_link = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_added", DbType="DateTime NOT NULL")]
		public System.DateTime date_added
		{
			get
			{
				return this._date_added;
			}
			set
			{
				if ((this._date_added != value))
				{
					this.Ondate_addedChanging(value);
					this.SendPropertyChanging();
					this._date_added = value;
					this.SendPropertyChanged("date_added");
					this.Ondate_addedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="Int NOT NULL")]
		public int sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lessonID", DbType="Int NOT NULL")]
		public int lessonID
		{
			get
			{
				return this._lessonID;
			}
			set
			{
				if ((this._lessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlessonIDChanging(value);
					this.SendPropertyChanging();
					this._lessonID = value;
					this.SendPropertyChanged("lessonID");
					this.OnlessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inactive")]
		public bool inactive
		{
			get
			{
				return this._inactive;
			}
			set
			{
				if ((this._inactive != value))
				{
					this.OninactiveChanging(value);
					this.SendPropertyChanging();
					this._inactive = value;
					this.SendPropertyChanged("inactive");
					this.OninactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BVideo_VideoSource", Storage="_B2BVideoSources", ThisKey="id", OtherKey="videoID")]
		public EntitySet<B2BVideoSource> B2BVideoSources
		{
			get
			{
				return this._B2BVideoSources;
			}
			set
			{
				this._B2BVideoSources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BLesson_B2BVideo", Storage="_Lesson", ThisKey="lessonID", OtherKey="id", IsForeignKey=true)]
		public B2BLesson B2BLesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				B2BLesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.B2BVideos.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.B2BVideos.Add(this);
						this._lessonID = value.id;
					}
					else
					{
						this._lessonID = default(int);
					}
					this.SendPropertyChanged("B2BLesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_B2BVideoSources(B2BVideoSource entity)
		{
			this.SendPropertyChanging();
			entity.B2BVideo = this;
		}
		
		private void detach_B2BVideoSources(B2BVideoSource entity)
		{
			this.SendPropertyChanging();
			entity.B2BVideo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestResults")]
	public partial class B2BTestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _testTookID;
		
		private int _questionTookID;
		
		private int _chosenAnswerID;
		
		private string _custID;
		
		private EntitySet<B2BAnswer> _Answers;
		
		private EntityRef<B2BCompletedTest> _CompletedTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntestTookIDChanging(int value);
    partial void OntestTookIDChanged();
    partial void OnquestionTookIDChanging(int value);
    partial void OnquestionTookIDChanged();
    partial void OnchosenAnswerIDChanging(int value);
    partial void OnchosenAnswerIDChanged();
    partial void OncustIDChanging(string value);
    partial void OncustIDChanged();
    #endregion
		
		public B2BTestResult()
		{
			this._Answers = new EntitySet<B2BAnswer>(new Action<B2BAnswer>(this.attach_Answers), new Action<B2BAnswer>(this.detach_Answers));
			this._CompletedTest = default(EntityRef<B2BCompletedTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._CompletedTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testTookID", DbType="Int NOT NULL")]
		public int testTookID
		{
			get
			{
				return this._testTookID;
			}
			set
			{
				if ((this._testTookID != value))
				{
					this.OntestTookIDChanging(value);
					this.SendPropertyChanging();
					this._testTookID = value;
					this.SendPropertyChanged("testTookID");
					this.OntestTookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionTookID", DbType="Int NOT NULL")]
		public int questionTookID
		{
			get
			{
				return this._questionTookID;
			}
			set
			{
				if ((this._questionTookID != value))
				{
					this.OnquestionTookIDChanging(value);
					this.SendPropertyChanging();
					this._questionTookID = value;
					this.SendPropertyChanged("questionTookID");
					this.OnquestionTookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenAnswerID", DbType="Int NOT NULL")]
		public int chosenAnswerID
		{
			get
			{
				return this._chosenAnswerID;
			}
			set
			{
				if ((this._chosenAnswerID != value))
				{
					this.OnchosenAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._chosenAnswerID = value;
					this.SendPropertyChanged("chosenAnswerID");
					this.OnchosenAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string custID
		{
			get
			{
				return this._custID;
			}
			set
			{
				if ((this._custID != value))
				{
					this.OncustIDChanging(value);
					this.SendPropertyChanging();
					this._custID = value;
					this.SendPropertyChanged("custID");
					this.OncustIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BTestResult_B2BAnswer", Storage="_Answers", ThisKey="chosenAnswerID", OtherKey="id")]
		public EntitySet<B2BAnswer> B2BAnswers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedTest_B2BTestResult", Storage="_CompletedTest", ThisKey="id", OtherKey="testID", IsForeignKey=true)]
		public B2BCompletedTest B2BCompletedTest
		{
			get
			{
				return this._CompletedTest.Entity;
			}
			set
			{
				B2BCompletedTest previousValue = this._CompletedTest.Entity;
				if (((previousValue != value) 
							|| (this._CompletedTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletedTest.Entity = null;
						previousValue.B2BTestResults.Remove(this);
					}
					this._CompletedTest.Entity = value;
					if ((value != null))
					{
						value.B2BTestResults.Add(this);
						this._id = value.testID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("B2BCompletedTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(B2BAnswer entity)
		{
			this.SendPropertyChanging();
			entity.B2BTestResult = this;
		}
		
		private void detach_Answers(B2BAnswer entity)
		{
			this.SendPropertyChanging();
			entity.B2BTestResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.B2BUser")]
	public partial class B2BUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _custID;
		
		private int _numLessonsCompleted;
		
		private int _numCertsCompleted;
		
		private System.DateTime _join_date;
		
		private EntitySet<B2BCompletedTest> _B2BCompletedTests;
		
		private EntitySet<B2BCompletedCert> _B2BCompletedCerts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncustIDChanging(string value);
    partial void OncustIDChanged();
    partial void OnnumLessonsCompletedChanging(int value);
    partial void OnnumLessonsCompletedChanged();
    partial void OnnumCertsCompletedChanging(int value);
    partial void OnnumCertsCompletedChanged();
    partial void Onjoin_dateChanging(System.DateTime value);
    partial void Onjoin_dateChanged();
    #endregion
		
		public B2BUser()
		{
			this._B2BCompletedTests = new EntitySet<B2BCompletedTest>(new Action<B2BCompletedTest>(this.attach_B2BCompletedTests), new Action<B2BCompletedTest>(this.detach_B2BCompletedTests));
			this._B2BCompletedCerts = new EntitySet<B2BCompletedCert>(new Action<B2BCompletedCert>(this.attach_B2BCompletedCerts), new Action<B2BCompletedCert>(this.detach_B2BCompletedCerts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string custID
		{
			get
			{
				return this._custID;
			}
			set
			{
				if ((this._custID != value))
				{
					this.OncustIDChanging(value);
					this.SendPropertyChanging();
					this._custID = value;
					this.SendPropertyChanged("custID");
					this.OncustIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numLessonsCompleted", DbType="Int NOT NULL")]
		public int numLessonsCompleted
		{
			get
			{
				return this._numLessonsCompleted;
			}
			set
			{
				if ((this._numLessonsCompleted != value))
				{
					this.OnnumLessonsCompletedChanging(value);
					this.SendPropertyChanging();
					this._numLessonsCompleted = value;
					this.SendPropertyChanged("numLessonsCompleted");
					this.OnnumLessonsCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numCertsCompleted", DbType="Int NOT NULL")]
		public int numCertsCompleted
		{
			get
			{
				return this._numCertsCompleted;
			}
			set
			{
				if ((this._numCertsCompleted != value))
				{
					this.OnnumCertsCompletedChanging(value);
					this.SendPropertyChanging();
					this._numCertsCompleted = value;
					this.SendPropertyChanged("numCertsCompleted");
					this.OnnumCertsCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_join_date", DbType="DateTime NOT NULL")]
		public System.DateTime join_date
		{
			get
			{
				return this._join_date;
			}
			set
			{
				if ((this._join_date != value))
				{
					this.Onjoin_dateChanging(value);
					this.SendPropertyChanging();
					this._join_date = value;
					this.SendPropertyChanged("join_date");
					this.Onjoin_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BUser_B2BCompletedTest", Storage="_B2BCompletedTests", ThisKey="custID", OtherKey="custID")]
		public EntitySet<B2BCompletedTest> B2BCompletedTests
		{
			get
			{
				return this._B2BCompletedTests;
			}
			set
			{
				this._B2BCompletedTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BUser_B2BCompletedCert", Storage="_B2BCompletedCerts", ThisKey="custID", OtherKey="custID")]
		public EntitySet<B2BCompletedCert> B2BCompletedCerts
		{
			get
			{
				return this._B2BCompletedCerts;
			}
			set
			{
				this._B2BCompletedCerts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_B2BCompletedTests(B2BCompletedTest entity)
		{
			this.SendPropertyChanging();
			entity.B2BUser = this;
		}
		
		private void detach_B2BCompletedTests(B2BCompletedTest entity)
		{
			this.SendPropertyChanging();
			entity.B2BUser = null;
		}
		
		private void attach_B2BCompletedCerts(B2BCompletedCert entity)
		{
			this.SendPropertyChanging();
			entity.B2BUser = this;
		}
		
		private void detach_B2BCompletedCerts(B2BCompletedCert entity)
		{
			this.SendPropertyChanging();
			entity.B2BUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletedCerts")]
	public partial class B2BCompletedCert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _custID;
		
		private int _certID;
		
		private System.DateTime _date_completed;
		
		private bool _hasPlaque;
		
		private bool _sentPlaqueEmail;
		
		private EntitySet<B2BCertificate> _B2BCertificates;
		
		private EntityRef<B2BUser> _B2BUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncustIDChanging(string value);
    partial void OncustIDChanged();
    partial void OncertIDChanging(int value);
    partial void OncertIDChanged();
    partial void Ondate_completedChanging(System.DateTime value);
    partial void Ondate_completedChanged();
    partial void OnhasPlaqueChanging(bool value);
    partial void OnhasPlaqueChanged();
    partial void OnsentPlaqueEmailChanging(bool value);
    partial void OnsentPlaqueEmailChanged();
    #endregion
		
		public B2BCompletedCert()
		{
			this._B2BCertificates = new EntitySet<B2BCertificate>(new Action<B2BCertificate>(this.attach_B2BCertificates), new Action<B2BCertificate>(this.detach_B2BCertificates));
			this._B2BUser = default(EntityRef<B2BUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custID", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string custID
		{
			get
			{
				return this._custID;
			}
			set
			{
				if ((this._custID != value))
				{
					if (this._B2BUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustIDChanging(value);
					this.SendPropertyChanging();
					this._custID = value;
					this.SendPropertyChanged("custID");
					this.OncustIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_certID", DbType="Int NOT NULL")]
		public int certID
		{
			get
			{
				return this._certID;
			}
			set
			{
				if ((this._certID != value))
				{
					this.OncertIDChanging(value);
					this.SendPropertyChanging();
					this._certID = value;
					this.SendPropertyChanged("certID");
					this.OncertIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_completed", DbType="DateTime NOT NULL")]
		public System.DateTime date_completed
		{
			get
			{
				return this._date_completed;
			}
			set
			{
				if ((this._date_completed != value))
				{
					this.Ondate_completedChanging(value);
					this.SendPropertyChanging();
					this._date_completed = value;
					this.SendPropertyChanged("date_completed");
					this.Ondate_completedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasPlaque", DbType="Bit NOT NULL")]
		public bool hasPlaque
		{
			get
			{
				return this._hasPlaque;
			}
			set
			{
				if ((this._hasPlaque != value))
				{
					this.OnhasPlaqueChanging(value);
					this.SendPropertyChanging();
					this._hasPlaque = value;
					this.SendPropertyChanged("hasPlaque");
					this.OnhasPlaqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sentPlaqueEmail", DbType="Bit NOT NULL")]
		public bool sentPlaqueEmail
		{
			get
			{
				return this._sentPlaqueEmail;
			}
			set
			{
				if ((this._sentPlaqueEmail != value))
				{
					this.OnsentPlaqueEmailChanging(value);
					this.SendPropertyChanging();
					this._sentPlaqueEmail = value;
					this.SendPropertyChanged("sentPlaqueEmail");
					this.OnsentPlaqueEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BCompletedCert_B2BCertificate", Storage="_B2BCertificates", ThisKey="certID", OtherKey="id")]
		public EntitySet<B2BCertificate> B2BCertificates
		{
			get
			{
				return this._B2BCertificates;
			}
			set
			{
				this._B2BCertificates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BUser_B2BCompletedCert", Storage="_B2BUser", ThisKey="custID", OtherKey="custID", IsForeignKey=true)]
		public B2BUser B2BUser
		{
			get
			{
				return this._B2BUser.Entity;
			}
			set
			{
				B2BUser previousValue = this._B2BUser.Entity;
				if (((previousValue != value) 
							|| (this._B2BUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._B2BUser.Entity = null;
						previousValue.B2BCompletedCerts.Remove(this);
					}
					this._B2BUser.Entity = value;
					if ((value != null))
					{
						value.B2BCompletedCerts.Add(this);
						this._custID = value.custID;
					}
					else
					{
						this._custID = default(string);
					}
					this.SendPropertyChanged("B2BUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_B2BCertificates(B2BCertificate entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedCert = this;
		}
		
		private void detach_B2BCertificates(B2BCertificate entity)
		{
			this.SendPropertyChanging();
			entity.B2BCompletedCert = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoSource")]
	public partial class B2BVideoSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _videoID;
		
		private string _filePath;
		
		private int _typeID;
		
		private EntityRef<B2BVideoType> _VideoTypes;
		
		private EntityRef<B2BVideo> _B2BVideo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnvideoIDChanging(int value);
    partial void OnvideoIDChanged();
    partial void OnfilePathChanging(string value);
    partial void OnfilePathChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    #endregion
		
		public B2BVideoSource()
		{
			this._VideoTypes = default(EntityRef<B2BVideoType>);
			this._B2BVideo = default(EntityRef<B2BVideo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoID", DbType="Int NOT NULL")]
		public int videoID
		{
			get
			{
				return this._videoID;
			}
			set
			{
				if ((this._videoID != value))
				{
					if (this._B2BVideo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvideoIDChanging(value);
					this.SendPropertyChanging();
					this._videoID = value;
					this.SendPropertyChanged("videoID");
					this.OnvideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filePath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string filePath
		{
			get
			{
				return this._filePath;
			}
			set
			{
				if ((this._filePath != value))
				{
					this.OnfilePathChanging(value);
					this.SendPropertyChanging();
					this._filePath = value;
					this.SendPropertyChanged("filePath");
					this.OnfilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VideoSource_VideoType", Storage="_VideoTypes", ThisKey="typeID", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public B2BVideoType VideoTypes
		{
			get
			{
				return this._VideoTypes.Entity;
			}
			set
			{
				B2BVideoType previousValue = this._VideoTypes.Entity;
				if (((previousValue != value) 
							|| (this._VideoTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VideoTypes.Entity = null;
						previousValue.B2BVideoSource = null;
					}
					this._VideoTypes.Entity = value;
					if ((value != null))
					{
						value.B2BVideoSource = this;
					}
					this.SendPropertyChanged("VideoTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B2BVideo_VideoSource", Storage="_B2BVideo", ThisKey="videoID", OtherKey="id", IsForeignKey=true)]
		public B2BVideo B2BVideo
		{
			get
			{
				return this._B2BVideo.Entity;
			}
			set
			{
				B2BVideo previousValue = this._B2BVideo.Entity;
				if (((previousValue != value) 
							|| (this._B2BVideo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._B2BVideo.Entity = null;
						previousValue.B2BVideoSources.Remove(this);
					}
					this._B2BVideo.Entity = value;
					if ((value != null))
					{
						value.B2BVideoSources.Add(this);
						this._videoID = value.id;
					}
					else
					{
						this._videoID = default(int);
					}
					this.SendPropertyChanged("B2BVideo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoType")]
	public partial class B2BVideoType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _type;
		
		private string _MIME;
		
		private EntityRef<B2BVideoSource> _B2BVideoSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnMIMEChanging(string value);
    partial void OnMIMEChanged();
    #endregion
		
		public B2BVideoType()
		{
			this._B2BVideoSource = default(EntityRef<B2BVideoSource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._B2BVideoSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MIME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MIME
		{
			get
			{
				return this._MIME;
			}
			set
			{
				if ((this._MIME != value))
				{
					this.OnMIMEChanging(value);
					this.SendPropertyChanging();
					this._MIME = value;
					this.SendPropertyChanged("MIME");
					this.OnMIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VideoSource_VideoType", Storage="_B2BVideoSource", ThisKey="id", OtherKey="typeID", IsForeignKey=true)]
		public B2BVideoSource B2BVideoSource
		{
			get
			{
				return this._B2BVideoSource.Entity;
			}
			set
			{
				B2BVideoSource previousValue = this._B2BVideoSource.Entity;
				if (((previousValue != value) 
							|| (this._B2BVideoSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._B2BVideoSource.Entity = null;
						previousValue.VideoTypes = null;
					}
					this._B2BVideoSource.Entity = value;
					if ((value != null))
					{
						value.VideoTypes = this;
						this._id = value.typeID;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("B2BVideoSource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
