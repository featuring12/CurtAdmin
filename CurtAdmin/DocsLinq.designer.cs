#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurtAdmin
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="alex_db")]
	public partial class DocsLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdocument(document instance);
    partial void Updatedocument(document instance);
    partial void Deletedocument(document instance);
    partial void InsertdocumentType(documentType instance);
    partial void UpdatedocumentType(documentType instance);
    partial void DeletedocumentType(documentType instance);
    partial void InsertitemDoc(itemDoc instance);
    partial void UpdateitemDoc(itemDoc instance);
    partial void DeleteitemDoc(itemDoc instance);
    partial void Insertuser_module(user_module instance);
    partial void Updateuser_module(user_module instance);
    partial void Deleteuser_module(user_module instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void InsertdocItem(docItem instance);
    partial void UpdatedocItem(docItem instance);
    partial void DeletedocItem(docItem instance);
    partial void Insertcat_item(cat_item instance);
    partial void Updatecat_item(cat_item instance);
    partial void Deletecat_item(cat_item instance);
    partial void InsertitemComment(itemComment instance);
    partial void UpdateitemComment(itemComment instance);
    partial void DeleteitemComment(itemComment instance);
    partial void Insertmodule(module instance);
    partial void Updatemodule(module instance);
    partial void Deletemodule(module instance);
    partial void Insertresource_listing(resource_listing instance);
    partial void Updateresource_listing(resource_listing instance);
    partial void Deleteresource_listing(resource_listing instance);
    partial void Insertresource_user(resource_user instance);
    partial void Updateresource_user(resource_user instance);
    partial void Deleteresource_user(resource_user instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public DocsLinqDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["alex_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DocsLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocsLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocsLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocsLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<document> documents
		{
			get
			{
				return this.GetTable<document>();
			}
		}
		
		public System.Data.Linq.Table<documentType> documentTypes
		{
			get
			{
				return this.GetTable<documentType>();
			}
		}
		
		public System.Data.Linq.Table<itemDoc> itemDocs
		{
			get
			{
				return this.GetTable<itemDoc>();
			}
		}
		
		public System.Data.Linq.Table<user_module> user_modules
		{
			get
			{
				return this.GetTable<user_module>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<docItem> docItems
		{
			get
			{
				return this.GetTable<docItem>();
			}
		}
		
		public System.Data.Linq.Table<cat_item> cat_items
		{
			get
			{
				return this.GetTable<cat_item>();
			}
		}
		
		public System.Data.Linq.Table<itemComment> itemComments
		{
			get
			{
				return this.GetTable<itemComment>();
			}
		}
		
		public System.Data.Linq.Table<module> modules
		{
			get
			{
				return this.GetTable<module>();
			}
		}
		
		public System.Data.Linq.Table<resource_listing> resource_listings
		{
			get
			{
				return this.GetTable<resource_listing>();
			}
		}
		
		public System.Data.Linq.Table<resource_user> resource_users
		{
			get
			{
				return this.GetTable<resource_user>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.documents")]
	public partial class document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _docID;
		
		private int _typeID;
		
		private string _documentTitle;
		
		private string _documentPath;
		
		private System.DateTime _dateAdded;
		
		private EntitySet<documentType> _documentTypes;
		
		private EntitySet<itemDoc> _itemDocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndocIDChanging(int value);
    partial void OndocIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OndocumentTitleChanging(string value);
    partial void OndocumentTitleChanged();
    partial void OndocumentPathChanging(string value);
    partial void OndocumentPathChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    #endregion
		
		public document()
		{
			this._documentTypes = new EntitySet<documentType>(new Action<documentType>(this.attach_documentTypes), new Action<documentType>(this.detach_documentTypes));
			this._itemDocs = new EntitySet<itemDoc>(new Action<itemDoc>(this.attach_itemDocs), new Action<itemDoc>(this.detach_itemDocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int docID
		{
			get
			{
				return this._docID;
			}
			set
			{
				if ((this._docID != value))
				{
					this.OndocIDChanging(value);
					this.SendPropertyChanging();
					this._docID = value;
					this.SendPropertyChanged("docID");
					this.OndocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentTitle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string documentTitle
		{
			get
			{
				return this._documentTitle;
			}
			set
			{
				if ((this._documentTitle != value))
				{
					this.OndocumentTitleChanging(value);
					this.SendPropertyChanging();
					this._documentTitle = value;
					this.SendPropertyChanged("documentTitle");
					this.OndocumentTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentPath", DbType="Varchar(2000) NULL", UpdateCheck=UpdateCheck.Never)]
		public string documentPath
		{
			get
			{
				return this._documentPath;
			}
			set
			{
				if ((this._documentPath != value))
				{
					this.OndocumentPathChanging(value);
					this.SendPropertyChanging();
					this._documentPath = value;
					this.SendPropertyChanged("documentPath");
					this.OndocumentPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="document_documentType", Storage="_documentTypes", ThisKey="typeID", OtherKey="typeID")]
		public EntitySet<documentType> documentTypes
		{
			get
			{
				return this._documentTypes;
			}
			set
			{
				this._documentTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="document_itemDoc", Storage="_itemDocs", ThisKey="docID", OtherKey="docID")]
		public EntitySet<itemDoc> itemDocs
		{
			get
			{
				return this._itemDocs;
			}
			set
			{
				this._itemDocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_documentTypes(documentType entity)
		{
			this.SendPropertyChanging();
			entity.document = this;
		}
		
		private void detach_documentTypes(documentType entity)
		{
			this.SendPropertyChanging();
			entity.document = null;
		}
		
		private void attach_itemDocs(itemDoc entity)
		{
			this.SendPropertyChanging();
			entity.document = this;
		}
		
		private void detach_itemDocs(itemDoc entity)
		{
			this.SendPropertyChanging();
			entity.document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.documentTypes")]
	public partial class documentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private string _type;
		
		private EntityRef<document> _document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public documentType()
		{
			this._document = default(EntityRef<document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="document_documentType", Storage="_document", ThisKey="typeID", OtherKey="typeID", IsForeignKey=true)]
		public document document
		{
			get
			{
				return this._document.Entity;
			}
			set
			{
				document previousValue = this._document.Entity;
				if (((previousValue != value) 
							|| (this._document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._document.Entity = null;
						previousValue.documentTypes.Remove(this);
					}
					this._document.Entity = value;
					if ((value != null))
					{
						value.documentTypes.Add(this);
						this._typeID = value.typeID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.itemDocs")]
	public partial class itemDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _docID;
		
		private System.Nullable<int> _itemID;
		
		private int _itemDocID;
		
		private EntityRef<document> _document;
		
		private EntityRef<docItem> _docItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndocIDChanging(int value);
    partial void OndocIDChanged();
    partial void OnitemIDChanging(System.Nullable<int> value);
    partial void OnitemIDChanged();
    partial void OnitemDocIDChanging(int value);
    partial void OnitemDocIDChanged();
    #endregion
		
		public itemDoc()
		{
			this._document = default(EntityRef<document>);
			this._docItem = default(EntityRef<docItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docID", DbType="Int NOT NULL")]
		public int docID
		{
			get
			{
				return this._docID;
			}
			set
			{
				if ((this._docID != value))
				{
					if (this._document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndocIDChanging(value);
					this.SendPropertyChanging();
					this._docID = value;
					this.SendPropertyChanged("docID");
					this.OndocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", DbType="Int")]
		public System.Nullable<int> itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					if (this._docItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemDocID", AutoSync=AutoSync.OnInsert, DbType="INT NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int itemDocID
		{
			get
			{
				return this._itemDocID;
			}
			set
			{
				if ((this._itemDocID != value))
				{
					this.OnitemDocIDChanging(value);
					this.SendPropertyChanging();
					this._itemDocID = value;
					this.SendPropertyChanged("itemDocID");
					this.OnitemDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="document_itemDoc", Storage="_document", ThisKey="docID", OtherKey="docID", IsForeignKey=true)]
		public document document
		{
			get
			{
				return this._document.Entity;
			}
			set
			{
				document previousValue = this._document.Entity;
				if (((previousValue != value) 
							|| (this._document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._document.Entity = null;
						previousValue.itemDocs.Remove(this);
					}
					this._document.Entity = value;
					if ((value != null))
					{
						value.itemDocs.Add(this);
						this._docID = value.docID;
					}
					else
					{
						this._docID = default(int);
					}
					this.SendPropertyChanged("document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="docItem_itemDoc", Storage="_docItem", ThisKey="itemID", OtherKey="itemID", IsForeignKey=true)]
		public docItem docItem
		{
			get
			{
				return this._docItem.Entity;
			}
			set
			{
				docItem previousValue = this._docItem.Entity;
				if (((previousValue != value) 
							|| (this._docItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._docItem.Entity = null;
						previousValue.itemDocs.Remove(this);
					}
					this._docItem.Entity = value;
					if ((value != null))
					{
						value.itemDocs.Add(this);
						this._itemID = value.itemID;
					}
					else
					{
						this._itemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("docItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_modules")]
	public partial class user_module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private int _moduleID;
		
		private int _user_modules_id;
		
		private EntityRef<module> _module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnmoduleIDChanging(int value);
    partial void OnmoduleIDChanged();
    partial void Onuser_modules_idChanging(int value);
    partial void Onuser_modules_idChanged();
    #endregion
		
		public user_module()
		{
			this._module = default(EntityRef<module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleID", DbType="Int NOT NULL")]
		public int moduleID
		{
			get
			{
				return this._moduleID;
			}
			set
			{
				if ((this._moduleID != value))
				{
					if (this._module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmoduleIDChanging(value);
					this.SendPropertyChanging();
					this._moduleID = value;
					this.SendPropertyChanged("moduleID");
					this.OnmoduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_modules_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_modules_id
		{
			get
			{
				return this._user_modules_id;
			}
			set
			{
				if ((this._user_modules_id != value))
				{
					this.Onuser_modules_idChanging(value);
					this.SendPropertyChanging();
					this._user_modules_id = value;
					this.SendPropertyChanged("user_modules_id");
					this.Onuser_modules_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="module_user_module", Storage="_module", ThisKey="moduleID", OtherKey="moduleID", IsForeignKey=true)]
		public module module
		{
			get
			{
				return this._module.Entity;
			}
			set
			{
				module previousValue = this._module.Entity;
				if (((previousValue != value) 
							|| (this._module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._module.Entity = null;
						previousValue.user_modules.Remove(this);
					}
					this._module.Entity = value;
					if ((value != null))
					{
						value.user_modules.Add(this);
						this._moduleID = value.moduleID;
					}
					else
					{
						this._moduleID = default(int);
					}
					this.SendPropertyChanged("module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stateID;
		
		private string _state1;
		
		private string _abbr;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void Onstate1Changing(string value);
    partial void Onstate1Changed();
    partial void OnabbrChanging(string value);
    partial void OnabbrChanged();
    #endregion
		
		public State()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="state", Storage="_state1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string state1
		{
			get
			{
				return this._state1;
			}
			set
			{
				if ((this._state1 != value))
				{
					this.Onstate1Changing(value);
					this.SendPropertyChanging();
					this._state1 = value;
					this.SendPropertyChanged("state1");
					this.Onstate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbr", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string abbr
		{
			get
			{
				return this._abbr;
			}
			set
			{
				if ((this._abbr != value))
				{
					this.OnabbrChanging(value);
					this.SendPropertyChanging();
					this._abbr = value;
					this.SendPropertyChanged("abbr");
					this.OnabbrChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.categories")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catID;
		
		private int _parentID;
		
		private string _catName;
		
		private string _comments;
		
		private int _moduleID;
		
		private EntitySet<module> _modules;
		
		private EntityRef<cat_item> _cat_item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OnparentIDChanging(int value);
    partial void OnparentIDChanged();
    partial void OncatNameChanging(string value);
    partial void OncatNameChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    partial void OnmoduleIDChanging(int value);
    partial void OnmoduleIDChanged();
    #endregion
		
		public category()
		{
			this._modules = new EntitySet<module>(new Action<module>(this.attach_modules), new Action<module>(this.detach_modules));
			this._cat_item = default(EntityRef<cat_item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					if (this._cat_item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentID", DbType="Int NOT NULL")]
		public int parentID
		{
			get
			{
				return this._parentID;
			}
			set
			{
				if ((this._parentID != value))
				{
					this.OnparentIDChanging(value);
					this.SendPropertyChanging();
					this._parentID = value;
					this.SendPropertyChanged("parentID");
					this.OnparentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string catName
		{
			get
			{
				return this._catName;
			}
			set
			{
				if ((this._catName != value))
				{
					this.OncatNameChanging(value);
					this.SendPropertyChanging();
					this._catName = value;
					this.SendPropertyChanged("catName");
					this.OncatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleID", DbType="Int NOT NULL")]
		public int moduleID
		{
			get
			{
				return this._moduleID;
			}
			set
			{
				if ((this._moduleID != value))
				{
					this.OnmoduleIDChanging(value);
					this.SendPropertyChanging();
					this._moduleID = value;
					this.SendPropertyChanged("moduleID");
					this.OnmoduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_module", Storage="_modules", ThisKey="moduleID", OtherKey="moduleID")]
		public EntitySet<module> modules
		{
			get
			{
				return this._modules;
			}
			set
			{
				this._modules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cat_item_category", Storage="_cat_item", ThisKey="catID", OtherKey="catID", IsForeignKey=true)]
		public cat_item cat_item
		{
			get
			{
				return this._cat_item.Entity;
			}
			set
			{
				cat_item previousValue = this._cat_item.Entity;
				if (((previousValue != value) 
							|| (this._cat_item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cat_item.Entity = null;
						previousValue.categories.Remove(this);
					}
					this._cat_item.Entity = value;
					if ((value != null))
					{
						value.categories.Add(this);
						this._catID = value.catID;
					}
					else
					{
						this._catID = default(int);
					}
					this.SendPropertyChanged("cat_item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_modules(module entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_modules(module entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.docItems")]
	public partial class docItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _itemID;
		
		private string _itemName;
		
		private string _itemDescription;
		
		private string _executionExample;
		
		private string _resultExample;
		
		private string _codeLink;
		
		private System.DateTime _dateModified;
		
		private int _author;
		
		private string _itemHTML;
		
		private EntitySet<itemDoc> _itemDocs;
		
		private EntityRef<cat_item> _cat_item;
		
		private EntityRef<itemComment> _itemComment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void OnitemNameChanging(string value);
    partial void OnitemNameChanged();
    partial void OnitemDescriptionChanging(string value);
    partial void OnitemDescriptionChanged();
    partial void OnexecutionExampleChanging(string value);
    partial void OnexecutionExampleChanged();
    partial void OnresultExampleChanging(string value);
    partial void OnresultExampleChanged();
    partial void OncodeLinkChanging(string value);
    partial void OncodeLinkChanged();
    partial void OndateModifiedChanging(System.DateTime value);
    partial void OndateModifiedChanged();
    partial void OnauthorChanging(int value);
    partial void OnauthorChanged();
    partial void OnitemHTMLChanging(string value);
    partial void OnitemHTMLChanged();
    #endregion
		
		public docItem()
		{
			this._itemDocs = new EntitySet<itemDoc>(new Action<itemDoc>(this.attach_itemDocs), new Action<itemDoc>(this.detach_itemDocs));
			this._cat_item = default(EntityRef<cat_item>);
			this._itemComment = default(EntityRef<itemComment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					if ((this._cat_item.HasLoadedOrAssignedValue || this._itemComment.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string itemName
		{
			get
			{
				return this._itemName;
			}
			set
			{
				if ((this._itemName != value))
				{
					this.OnitemNameChanging(value);
					this.SendPropertyChanging();
					this._itemName = value;
					this.SendPropertyChanged("itemName");
					this.OnitemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemDescription", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string itemDescription
		{
			get
			{
				return this._itemDescription;
			}
			set
			{
				if ((this._itemDescription != value))
				{
					this.OnitemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._itemDescription = value;
					this.SendPropertyChanged("itemDescription");
					this.OnitemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_executionExample", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string executionExample
		{
			get
			{
				return this._executionExample;
			}
			set
			{
				if ((this._executionExample != value))
				{
					this.OnexecutionExampleChanging(value);
					this.SendPropertyChanging();
					this._executionExample = value;
					this.SendPropertyChanged("executionExample");
					this.OnexecutionExampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resultExample", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string resultExample
		{
			get
			{
				return this._resultExample;
			}
			set
			{
				if ((this._resultExample != value))
				{
					this.OnresultExampleChanging(value);
					this.SendPropertyChanging();
					this._resultExample = value;
					this.SendPropertyChanged("resultExample");
					this.OnresultExampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codeLink", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string codeLink
		{
			get
			{
				return this._codeLink;
			}
			set
			{
				if ((this._codeLink != value))
				{
					this.OncodeLinkChanging(value);
					this.SendPropertyChanging();
					this._codeLink = value;
					this.SendPropertyChanged("codeLink");
					this.OncodeLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModified", DbType="DateTime NOT NULL")]
		public System.DateTime dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this.OndateModifiedChanging(value);
					this.SendPropertyChanging();
					this._dateModified = value;
					this.SendPropertyChanged("dateModified");
					this.OndateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="Int NOT NULL")]
		public int author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemHTML", DbType="Text", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string itemHTML
		{
			get
			{
				return this._itemHTML;
			}
			set
			{
				if ((this._itemHTML != value))
				{
					this.OnitemHTMLChanging(value);
					this.SendPropertyChanging();
					this._itemHTML = value;
					this.SendPropertyChanged("itemHTML");
					this.OnitemHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="docItem_itemDoc", Storage="_itemDocs", ThisKey="itemID", OtherKey="itemID")]
		public EntitySet<itemDoc> itemDocs
		{
			get
			{
				return this._itemDocs;
			}
			set
			{
				this._itemDocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cat_item_docItem", Storage="_cat_item", ThisKey="itemID", OtherKey="itemID", IsForeignKey=true)]
		public cat_item cat_item
		{
			get
			{
				return this._cat_item.Entity;
			}
			set
			{
				cat_item previousValue = this._cat_item.Entity;
				if (((previousValue != value) 
							|| (this._cat_item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cat_item.Entity = null;
						previousValue.docItems.Remove(this);
					}
					this._cat_item.Entity = value;
					if ((value != null))
					{
						value.docItems.Add(this);
						this._itemID = value.itemID;
					}
					else
					{
						this._itemID = default(int);
					}
					this.SendPropertyChanged("cat_item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="itemComment_docItem", Storage="_itemComment", ThisKey="itemID", OtherKey="itemID", IsForeignKey=true)]
		public itemComment itemComment
		{
			get
			{
				return this._itemComment.Entity;
			}
			set
			{
				itemComment previousValue = this._itemComment.Entity;
				if (((previousValue != value) 
							|| (this._itemComment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._itemComment.Entity = null;
						previousValue.docItems.Remove(this);
					}
					this._itemComment.Entity = value;
					if ((value != null))
					{
						value.docItems.Add(this);
						this._itemID = value.itemID;
					}
					else
					{
						this._itemID = default(int);
					}
					this.SendPropertyChanged("itemComment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_itemDocs(itemDoc entity)
		{
			this.SendPropertyChanging();
			entity.docItem = this;
		}
		
		private void detach_itemDocs(itemDoc entity)
		{
			this.SendPropertyChanging();
			entity.docItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cat_items")]
	public partial class cat_item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _catID;
		
		private int _itemID;
		
		private int _cat_items_id;
		
		private EntitySet<category> _categories;
		
		private EntitySet<docItem> _docItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncatIDChanging(int value);
    partial void OncatIDChanged();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void Oncat_items_idChanging(int value);
    partial void Oncat_items_idChanged();
    #endregion
		
		public cat_item()
		{
			this._categories = new EntitySet<category>(new Action<category>(this.attach_categories), new Action<category>(this.detach_categories));
			this._docItems = new EntitySet<docItem>(new Action<docItem>(this.attach_docItems), new Action<docItem>(this.detach_docItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catID", DbType="Int NOT NULL")]
		public int catID
		{
			get
			{
				return this._catID;
			}
			set
			{
				if ((this._catID != value))
				{
					this.OncatIDChanging(value);
					this.SendPropertyChanging();
					this._catID = value;
					this.SendPropertyChanged("catID");
					this.OncatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", DbType="Int NOT NULL")]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_items_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cat_items_id
		{
			get
			{
				return this._cat_items_id;
			}
			set
			{
				if ((this._cat_items_id != value))
				{
					this.Oncat_items_idChanging(value);
					this.SendPropertyChanging();
					this._cat_items_id = value;
					this.SendPropertyChanged("cat_items_id");
					this.Oncat_items_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cat_item_category", Storage="_categories", ThisKey="catID", OtherKey="catID")]
		public EntitySet<category> categories
		{
			get
			{
				return this._categories;
			}
			set
			{
				this._categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cat_item_docItem", Storage="_docItems", ThisKey="itemID", OtherKey="itemID")]
		public EntitySet<docItem> docItems
		{
			get
			{
				return this._docItems;
			}
			set
			{
				this._docItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_categories(category entity)
		{
			this.SendPropertyChanging();
			entity.cat_item = this;
		}
		
		private void detach_categories(category entity)
		{
			this.SendPropertyChanging();
			entity.cat_item = null;
		}
		
		private void attach_docItems(docItem entity)
		{
			this.SendPropertyChanging();
			entity.cat_item = this;
		}
		
		private void detach_docItems(docItem entity)
		{
			this.SendPropertyChanging();
			entity.cat_item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.itemComments")]
	public partial class itemComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _commentID;
		
		private int _userID;
		
		private string _comment;
		
		private int _itemID;
		
		private int _parentComment;
		
		private System.DateTime _dateAdded;
		
		private EntitySet<docItem> _docItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommentIDChanging(int value);
    partial void OncommentIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnitemIDChanging(int value);
    partial void OnitemIDChanged();
    partial void OnparentCommentChanging(int value);
    partial void OnparentCommentChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    #endregion
		
		public itemComment()
		{
			this._docItems = new EntitySet<docItem>(new Action<docItem>(this.attach_docItems), new Action<docItem>(this.detach_docItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int commentID
		{
			get
			{
				return this._commentID;
			}
			set
			{
				if ((this._commentID != value))
				{
					this.OncommentIDChanging(value);
					this.SendPropertyChanging();
					this._commentID = value;
					this.SendPropertyChanged("commentID");
					this.OncommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", DbType="Int NOT NULL")]
		public int itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentComment", DbType="Int NOT NULL")]
		public int parentComment
		{
			get
			{
				return this._parentComment;
			}
			set
			{
				if ((this._parentComment != value))
				{
					this.OnparentCommentChanging(value);
					this.SendPropertyChanging();
					this._parentComment = value;
					this.SendPropertyChanged("parentComment");
					this.OnparentCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="itemComment_docItem", Storage="_docItems", ThisKey="itemID", OtherKey="itemID")]
		public EntitySet<docItem> docItems
		{
			get
			{
				return this._docItems;
			}
			set
			{
				this._docItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_docItems(docItem entity)
		{
			this.SendPropertyChanging();
			entity.itemComment = this;
		}
		
		private void detach_docItems(docItem entity)
		{
			this.SendPropertyChanging();
			entity.itemComment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.modules")]
	public partial class module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _moduleID;
		
		private string _module1;
		
		private string _module_path;
		
		private string _module_type;
		
		private string _img_path;
		
		private EntitySet<user_module> _user_modules;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmoduleIDChanging(int value);
    partial void OnmoduleIDChanged();
    partial void Onmodule1Changing(string value);
    partial void Onmodule1Changed();
    partial void Onmodule_pathChanging(string value);
    partial void Onmodule_pathChanged();
    partial void Onmodule_typeChanging(string value);
    partial void Onmodule_typeChanged();
    partial void Onimg_pathChanging(string value);
    partial void Onimg_pathChanged();
    #endregion
		
		public module()
		{
			this._user_modules = new EntitySet<user_module>(new Action<user_module>(this.attach_user_modules), new Action<user_module>(this.detach_user_modules));
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int moduleID
		{
			get
			{
				return this._moduleID;
			}
			set
			{
				if ((this._moduleID != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmoduleIDChanging(value);
					this.SendPropertyChanging();
					this._moduleID = value;
					this.SendPropertyChanged("moduleID");
					this.OnmoduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="module", Storage="_module1", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string module1
		{
			get
			{
				return this._module1;
			}
			set
			{
				if ((this._module1 != value))
				{
					this.Onmodule1Changing(value);
					this.SendPropertyChanging();
					this._module1 = value;
					this.SendPropertyChanged("module1");
					this.Onmodule1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_module_path", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string module_path
		{
			get
			{
				return this._module_path;
			}
			set
			{
				if ((this._module_path != value))
				{
					this.Onmodule_pathChanging(value);
					this.SendPropertyChanging();
					this._module_path = value;
					this.SendPropertyChanged("module_path");
					this.Onmodule_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_module_type", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string module_type
		{
			get
			{
				return this._module_type;
			}
			set
			{
				if ((this._module_type != value))
				{
					this.Onmodule_typeChanging(value);
					this.SendPropertyChanging();
					this._module_type = value;
					this.SendPropertyChanged("module_type");
					this.Onmodule_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_path", DbType="VarChar(255)")]
		public string img_path
		{
			get
			{
				return this._img_path;
			}
			set
			{
				if ((this._img_path != value))
				{
					this.Onimg_pathChanging(value);
					this.SendPropertyChanging();
					this._img_path = value;
					this.SendPropertyChanged("img_path");
					this.Onimg_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="module_user_module", Storage="_user_modules", ThisKey="moduleID", OtherKey="moduleID")]
		public EntitySet<user_module> user_modules
		{
			get
			{
				return this._user_modules;
			}
			set
			{
				this._user_modules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_module", Storage="_category", ThisKey="moduleID", OtherKey="moduleID", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.modules.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.modules.Add(this);
						this._moduleID = value.moduleID;
					}
					else
					{
						this._moduleID = default(int);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_user_modules(user_module entity)
		{
			this.SendPropertyChanging();
			entity.module = this;
		}
		
		private void detach_user_modules(user_module entity)
		{
			this.SendPropertyChanging();
			entity.module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.resource_listings")]
	public partial class resource_listing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _resourceID;
		
		private string _resource_name;
		
		private string _resource_url;
		
		private string _username;
		
		private string _password;
		
		private string _comments;
		
		private EntitySet<resource_user> _resource_users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnresourceIDChanging(int value);
    partial void OnresourceIDChanged();
    partial void Onresource_nameChanging(string value);
    partial void Onresource_nameChanged();
    partial void Onresource_urlChanging(string value);
    partial void Onresource_urlChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    #endregion
		
		public resource_listing()
		{
			this._resource_users = new EntitySet<resource_user>(new Action<resource_user>(this.attach_resource_users), new Action<resource_user>(this.detach_resource_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int resourceID
		{
			get
			{
				return this._resourceID;
			}
			set
			{
				if ((this._resourceID != value))
				{
					this.OnresourceIDChanging(value);
					this.SendPropertyChanging();
					this._resourceID = value;
					this.SendPropertyChanged("resourceID");
					this.OnresourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resource_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string resource_name
		{
			get
			{
				return this._resource_name;
			}
			set
			{
				if ((this._resource_name != value))
				{
					this.Onresource_nameChanging(value);
					this.SendPropertyChanging();
					this._resource_name = value;
					this.SendPropertyChanged("resource_name");
					this.Onresource_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resource_url", DbType="VarChar(255)")]
		public string resource_url
		{
			get
			{
				return this._resource_url;
			}
			set
			{
				if ((this._resource_url != value))
				{
					this.Onresource_urlChanging(value);
					this.SendPropertyChanging();
					this._resource_url = value;
					this.SendPropertyChanged("resource_url");
					this.Onresource_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(255)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="resource_listing_resource_user", Storage="_resource_users", ThisKey="resourceID", OtherKey="resourceID")]
		public EntitySet<resource_user> resource_users
		{
			get
			{
				return this._resource_users;
			}
			set
			{
				this._resource_users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_resource_users(resource_user entity)
		{
			this.SendPropertyChanging();
			entity.resource_listing = this;
		}
		
		private void detach_resource_users(resource_user entity)
		{
			this.SendPropertyChanging();
			entity.resource_listing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.resource_users")]
	public partial class resource_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _resource_user_key;
		
		private int _resourceID;
		
		private int _userID;
		
		private EntityRef<resource_listing> _resource_listing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onresource_user_keyChanging(int value);
    partial void Onresource_user_keyChanged();
    partial void OnresourceIDChanging(int value);
    partial void OnresourceIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    #endregion
		
		public resource_user()
		{
			this._resource_listing = default(EntityRef<resource_listing>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resource_user_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int resource_user_key
		{
			get
			{
				return this._resource_user_key;
			}
			set
			{
				if ((this._resource_user_key != value))
				{
					this.Onresource_user_keyChanging(value);
					this.SendPropertyChanging();
					this._resource_user_key = value;
					this.SendPropertyChanged("resource_user_key");
					this.Onresource_user_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resourceID", DbType="Int NOT NULL")]
		public int resourceID
		{
			get
			{
				return this._resourceID;
			}
			set
			{
				if ((this._resourceID != value))
				{
					if (this._resource_listing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresourceIDChanging(value);
					this.SendPropertyChanging();
					this._resourceID = value;
					this.SendPropertyChanged("resourceID");
					this.OnresourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="resource_listing_resource_user", Storage="_resource_listing", ThisKey="resourceID", OtherKey="resourceID", IsForeignKey=true)]
		public resource_listing resource_listing
		{
			get
			{
				return this._resource_listing.Entity;
			}
			set
			{
				resource_listing previousValue = this._resource_listing.Entity;
				if (((previousValue != value) 
							|| (this._resource_listing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._resource_listing.Entity = null;
						previousValue.resource_users.Remove(this);
					}
					this._resource_listing.Entity = value;
					if ((value != null))
					{
						value.resource_users.Add(this);
						this._resourceID = value.resourceID;
					}
					else
					{
						this._resourceID = default(int);
					}
					this.SendPropertyChanged("resource_listing");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _username;
		
		private string _password;
		
		private string _email;
		
		private string _fname;
		
		private string _lname;
		
		private string _website;
		
		private string _phone;
		
		private string _fax;
		
		private int _isAdmin;
		
		private string _comments;
		
		private System.DateTime _dateAdded;
		
		private int _isActive;
		
		private int _superUser;
		
		private int _stateID;
		
		private string _city;
		
		private string _address;
		
		private int _isDealer;
		
		private string _biography;
		
		private string _photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnfaxChanging(string value);
    partial void OnfaxChanged();
    partial void OnisAdminChanging(int value);
    partial void OnisAdminChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    partial void OndateAddedChanging(System.DateTime value);
    partial void OndateAddedChanged();
    partial void OnisActiveChanging(int value);
    partial void OnisActiveChanged();
    partial void OnsuperUserChanging(int value);
    partial void OnsuperUserChanged();
    partial void OnstateIDChanging(int value);
    partial void OnstateIDChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnisDealerChanging(int value);
    partial void OnisDealerChanged();
    partial void OnbiographyChanging(string value);
    partial void OnbiographyChanged();
    partial void OnphotoChanging(string value);
    partial void OnphotoChanged();
    #endregion
		
		public user()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fname", DbType="VarChar(255)")]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="VarChar(255)")]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="VarChar(255)")]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(50)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fax", DbType="VarChar(50)")]
		public string fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if ((this._fax != value))
				{
					this.OnfaxChanging(value);
					this.SendPropertyChanging();
					this._fax = value;
					this.SendPropertyChanged("fax");
					this.OnfaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdmin", DbType="Int NOT NULL")]
		public int isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime dateAdded
		{
			get
			{
				return this._dateAdded;
			}
			set
			{
				if ((this._dateAdded != value))
				{
					this.OndateAddedChanging(value);
					this.SendPropertyChanging();
					this._dateAdded = value;
					this.SendPropertyChanged("dateAdded");
					this.OndateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Int NOT NULL")]
		public int isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_superUser", DbType="Int NOT NULL")]
		public int superUser
		{
			get
			{
				return this._superUser;
			}
			set
			{
				if ((this._superUser != value))
				{
					this.OnsuperUserChanging(value);
					this.SendPropertyChanging();
					this._superUser = value;
					this.SendPropertyChanged("superUser");
					this.OnsuperUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateID", DbType="Int NOT NULL")]
		public int stateID
		{
			get
			{
				return this._stateID;
			}
			set
			{
				if ((this._stateID != value))
				{
					this.OnstateIDChanging(value);
					this.SendPropertyChanging();
					this._stateID = value;
					this.SendPropertyChanged("stateID");
					this.OnstateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(250)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDealer", DbType="Int NOT NULL")]
		public int isDealer
		{
			get
			{
				return this._isDealer;
			}
			set
			{
				if ((this._isDealer != value))
				{
					this.OnisDealerChanging(value);
					this.SendPropertyChanging();
					this._isDealer = value;
					this.SendPropertyChanged("isDealer");
					this.OnisDealerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_biography", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string biography
		{
			get
			{
				return this._biography;
			}
			set
			{
				if ((this._biography != value))
				{
					this.OnbiographyChanging(value);
					this.SendPropertyChanging();
					this._biography = value;
					this.SendPropertyChanged("biography");
					this.OnbiographyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="VarChar(500)")]
		public string photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
